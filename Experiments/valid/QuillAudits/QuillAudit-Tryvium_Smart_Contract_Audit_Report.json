{
    "path": "./Audit_Reports_2024/QuillAudits/QuillAudit-Tryvium_Smart_Contract_Audit_Report.pdf",
    "project_info": {
        "url": "https://github.com/tryvium-travels/smart-contracts",
        "commit_hash": "ed01c4d0d616832b798f494db90177f5e4c91792",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/QuillAudit-Tryvium_Smart_Contract_Audit_Report/smart-contracts"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "TokenVault & BountyVault imports in TryviumToken can be omitted",
            "description": "Imports of TokenVault & BountyVault in TryviumToken can be omitted, and TEAM_VAULT, BOUNTY_VAULT, SALES_VAULT & RESERVED_FUNDS_VAULT can be declared as address.",
            "severity": "Informational",
            "contract": "TryviumToken",
            "function": "N/A",
            "lineNumber": "23-47"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-354"
                ]
            },
            "title": "Floating pragma",
            "description": "The contract makes use of the floating-point pragma ^0.8.6. Contracts should be deployed using the same compiler version and flags that were used during the testing process.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-1265"
                ]
            },
            "title": "Transfer Function in TokenVault is Susceptible to Reentrancy",
            "description": "The transfer function in TokenVault lacks the nonReentrant modifier, which could lead to a reentrancy attack vector if new features are introduced.",
            "severity": "Low",
            "contract": "TokenVault",
            "function": "transfer(uint256 _amount, address payable _to, string calldata _reason)",
            "lineNumber": "146-164"
        }
    ]
}