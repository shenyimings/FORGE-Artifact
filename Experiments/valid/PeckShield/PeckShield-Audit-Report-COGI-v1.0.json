{
    "path": "./Audit_Reports_2024/PeckShield/PeckShield-Audit-Report-COGI-v1.0.pdf",
    "project_info": {
        "url": "https://github.com/COGI-Technology/cogi_contracts/tree/d87a739e6efda86ccb0d625de608e576f55228c8",
        "commit_hash": "d87a739e6efda86ccb0d625de608e576f55228c8",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/PeckShield-Audit-Report-COGI-v1/cogi_contracts"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Trust Issue Of Admin Keys",
            "description": "In the COGI protocol, there is a special admin account with the MINTER_ROLE role which plays a critical role in governing and regulating system-wide operations.",
            "severity": "Medium",
            "contract": "CogiERC20",
            "function": "_mint() and mint()",
            "lineNumber": "44-48, 51-54"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Redundant Code Removal",
            "description": "The `CogiERC20` contract has imported unnecessary reference contracts and the `CogiERC721` contract has a repeated initialization that can be removed.",
            "severity": "Low",
            "contract": "Multiple Contracts",
            "function": "N/A",
            "lineNumber": "17-23,59-70"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Market Bypass With Direct ERC721 safeTransferFrom()",
            "description": "The current implementation allows the current owner and buyer to directly negotiate a price without paying the listingPrice by calling transferFrom()/safeTransferFrom(), bypassing the market.",
            "severity": "Low",
            "contract": "CogiNFTMarket",
            "function": "purchaseExecution()",
            "lineNumber": "87-102"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Improper Amount Of Ether Transferred",
            "description": "The distribution of the `msg` `.value` (transferred in by the buyer) is incorrect, causing all received Ether to be sent to the seller and nothing left for the payment of listingPrice.",
            "severity": "High",
            "contract": "CogiNFTMarket",
            "function": "purchaseExecution()",
            "lineNumber": "96"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Improved Ether Transfers",
            "description": "In the `CogiNFTMarket` contract, the Solidity functions, `transfer` `()` and `send` `()`, are used for dealing with `Ether` transfers. However, as described in [1], when the `owner` address happens to be a contract which implements a callback function containing EVM instructions such as `SLOAD`, the 2300 gas supplied with `transfer` `()` might be insufficient, leading to an out-of-gas error.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}