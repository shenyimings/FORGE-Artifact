{
    "path": "./Audit_Reports_2024/Cyberscope/6-hinu.pdf",
    "project_info": {
        "url": "N/A",
        "commit_hash": "N/A",
        "address": "0x61ebd23c227f30dd80dbc10876cc71814fe16791",
        "chain": "bsc",
        "compilerVersion": [
            "v0.5.0+commit.1d4f565a"
        ],
        "project_path": {
            "HabibiInu": "Experiments/contracts\\6-hinu\\HabibiInu"
        }
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "MTS - Misleading Total Supply",
            "description": "The totalSupply function returns the circulating supply of the token instead of the total token supply, which is misleading according to the ERC20 specification.",
            "severity": "Critical",
            "contract": "HabibiInu",
            "function": "totalSupply()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-710"
                ]
            },
            "title": "L04 - Conformance to Solidity Naming Conventions",
            "description": "The Solidity style guide provides guidelines for writing clean and consistent Solidity code, improving readability and maintainability.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-237"
                ],
                "4": [
                    "CWE-238"
                ]
            },
            "title": "L19 - Stable Compiler Version",
            "description": "The `^` symbol indicates that any version of Solidity that is compatible with the specified version (i.e., any version that is a higher minor or patch version) can be used to compile the contract. The version lock is a mechanism that allows the author to specify a minimum version of the Solidity compiler that must be used to compile the contract code.",
            "severity": "N/A",
            "contract": "HabibiInu",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}