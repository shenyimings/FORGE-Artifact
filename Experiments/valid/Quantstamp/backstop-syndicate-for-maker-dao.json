{
    "path": "./Audit_Reports_2024/Quantstamp/backstop-syndicate-for-maker-dao.pdf",
    "project_info": {
        "url": "https://github.com/backstop-syndicate/dai-backstop-syndicate/tree/965a3dbd44e42705ac4aa38e37e21949032f2fc8",
        "commit_hash": "965a3dbd44e42705ac4aa38e37e21949032f2fc8",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/backstop-syndicate-for-maker-dao/dai-backstop-syndicate"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Inherent rounding issue in `defect()` and `getDefectAmount()`",
            "description": "There are inherent rounding issues in the functions `defect()` and `getDefectAmount()` caused by integer division operations.",
            "severity": "Low Risk",
            "contract": "DaiBackstopSyndicate.sol",
            "function": "defect() and getDefectAmount()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Constructors do not check arguments",
            "description": "Constructors do not check if provided arguments are non-zero values.",
            "severity": "Informational",
            "contract": [
                "SimpleFlopper.sol",
                "DaiBackstopSyndicate.sol"
            ],
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-1265"
                ]
            },
            "title": "Reentrancy",
            "description": "A reentrancy vulnerability is a scenario where an attacker can repeatedly call a function from itself, unexpectedly leading to potentially disastrous results.",
            "severity": "Informational",
            "contract": "DaiBackstopSyndicate.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-436"
                ]
            },
            "title": "Transaction Order Dependence between `contains()` and remove()",
            "description": "The function `EnumerableSet.contains()` may return different values depending on whether it is ordered before or after a transaction that executes `EnumerableSet.remove()` for the same value in the same block.",
            "severity": "Informational",
            "contract": "EnumerableSet.sol, DaiBackstopSyndicate.sol",
            "function": "contains(), remove(), enterAuction(), finalizeAuction()",
            "lineNumber": "N/A"
        }
    ]
}