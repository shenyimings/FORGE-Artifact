{
    "path": "./Audit_Reports_2024/Quantstamp/acid-digix-dao-dissolution-contract.pdf",
    "project_info": {
        "url": "https://github.com/DigixGlobal/acid-solidity/tree/8b43815f2bc29934442d0c28e293bfbddb54fc4f",
        "commit_hash": "8b43815f2bc29934442d0c28e293bfbddb54fc4f",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/acid-digix-dao-dissolution-contract/acid-solidity"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-393"
                ]
            },
            "title": "Unchecked Return Value",
            "description": "The return value of `address.call.value()` is not checked, which can lead to a situation where Ether is transferred but not received, and DGD tokens are lost.",
            "severity": "High Risk",
            "contract": "Acid.sol",
            "function": "N/A",
            "lineNumber": "53"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-665"
                ],
                "3": [
                    "CWE-1419"
                ],
                "4": [
                    "CWE-454"
                ]
            },
            "title": "Repeatedly Initializable",
            "description": "The contract is repeatedly initializable.",
            "severity": "Medium Risk",
            "contract": "Acid.sol",
            "function": "init",
            "lineNumber": "L32"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Integer Overflow / Underflow",
            "description": "Integer overflow/underflow occur when an integer hits its bit-size limit. Every integer has a set range; when that range is passed, the value loops back around.",
            "severity": "Medium Risk",
            "contract": "Acid.sol",
            "function": "N/A",
            "lineNumber": "42"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Gas Usage / `for` Loop Concerns",
            "description": "Gas usage is a main concern for smart contract developers and users, since high gas costs may prevent users from wanting to use the smart contract. Even worse, some gas usage issues may prevent the contract from providing services entirely.",
            "severity": "Medium Risk",
            "contract": "Acid.sol",
            "function": "N/A",
            "lineNumber": "46"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Unlocked Pragma",
            "description": "Every Solidity file specifies in the header a version number of the format `pragma solidity (^)0.4.*` . The caret ( `^` ) before the version number implies an unlocked pragma, meaning that the compiler will use the specified version _and above_ , hence the term \"unlocked.\" For consistency and to prevent unexpected behavior in the future, it is recommended to remove the caret to lock the file onto a specific Solidity version.",
            "severity": "Low Risk",
            "contract": "Acid.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-362"
                ]
            },
            "title": "Race Conditions / Front-Running",
            "description": "A block is an ordered collection of transactions from all around the network. It's possible for the ordering of these transactions to manipulate the end result of a block. A miner/attacker can take advantage of this by generating and moving transactions in a way that benefits themselves.",
            "severity": "Low Risk",
            "contract": "Acid.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Unchecked Parameter",
            "description": "The address as input for the `init` function is never checked to be non-zero in `Acid.sol`.",
            "severity": "Low Risk",
            "contract": "Acid",
            "function": "init()",
            "lineNumber": "N/A"
        }
    ]
}