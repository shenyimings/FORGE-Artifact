{
    "path": "./Audit_Reports_2024/Quantstamp/sturdy-aura-integration-and-leverage.pdf",
    "project_info": {
        "url": "https://github.com/balancer-labs/balancer-v2-monorepo/tree/d2794ef7d8f6d321cde36b7c536e8d51971688bd",
        "commit_hash": "d2794ef7d8f6d321cde36b7c536e8d51971688bd",
        "address": "0x8401Eb5ff34cc943f096A32EF3d5113FEbE8D4Eb",
        "is_exists": true,
        "project_path": "Experiments/contracts/sturdy-aura-integration-and-leverage/balancer-v2-monorepo"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-693"
                ]
            },
            "title": "Draining Collateral with Reentrancy Attack",
            "description": "The `GeneralLevSwap` contract does not use the `ReentrancyGuard` nor follows the checks-effects-interactions pattern, allowing reentrancy attacks. The `_withdrawWithFlashloan()` function is vulnerable to a reentrancy attack when calling `IERC20(_sAsset).safeTransferFrom(_user, address(this), withdrawalAmount)` with a malicious `_sAsset` contract.",
            "severity": "High",
            "contract": "GeneralLevSwap",
            "function": "_withdrawWithFlashloan()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "Broken Slippage Controls Will Result in Lost Funds",
            "description": "The functions `withdrawWithFlashloan()`, `zapDeposit()`, and `zapLeverageWithFlashloan()` within the `GeneralLevSwap` contract have ineffective slippage mechanisms and permit swaps to be made at very undesirable rates, leaving users vulnerable to sandwich attacks and front-running.",
            "severity": "High Risk",
            "contract": "GeneralLevSwap",
            "function": [
                "withdrawWithFlashloan()",
                "zapDeposit()",
                "zapLeverageWithFlashloan()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Incorrect Price of STETH May Be Used From Chainlink Feed",
            "description": "The BALWSTETHWETHOracle contract retrieves the price of STETH by querying a Chainlink price feed without checking its staleness, validity, and number of decimals, which could lead to severe consequences for the protocol, including loss of user funds.",
            "severity": "High Risk",
            "contract": "BALWSTETHWETHOracle",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Balancer LP Token Price May Be Incorrect",
            "description": "The approach taken to calculate the Balancer LP Token value involves multiplying the price of the cheaper of the two tokens (WETH and STETH) by the value returned by BALWSTETHWETH.getRate(). This price calculation would be most accurate when the price of WETH is the same as STETH. However, the WETH/STETH price can fluctuate significantly, and the further they diverge, the less accurate the price calculation will be.",
            "severity": "Medium Risk",
            "contract": "BALWSTETHWETHOracle",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-610"
                ]
            },
            "title": "STETH Price Feed Is a Single Point of Failure",
            "description": "The BALWSTETHWETHOracle contract's primary purpose is to provide a price for the B-stETH-STABLE token. However, the correct calculation of the price is highly dependent on having the correct STETH price, which currently relies solely on the Chainlink price feed.",
            "severity": "Low Risk",
            "contract": "BALWSTETHWETHOracle",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-697"
                ]
            },
            "title": "Strict Inequality Could Cause Validation to Fail",
            "description": "A validation check within `_withdrawWithFlashloan()` incorrectly uses strict inequality, which may cause the function to fail for valid data.",
            "severity": "Low Risk",
            "contract": "GeneralLevSwap",
            "function": "_withdrawWithFlashloan()",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Extreme Fee Setup Can Block the Yield Function",
            "description": "In the case where `_vaultFee + _incentiveRatio == PercentageMath.PERCENTAGE_FACTOR` in the `AuraBalancerLPVault` contract, the `AuraBalancerLPVault._transferYield()` function might fail due to overflow.",
            "severity": "Low Risk",
            "contract": "AuraBalancerLPVault",
            "function": "_transferYield()",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "Unlimited Allowance Given to Vault",
            "description": "In the constructor of the GeneralLevSwap contract, the _vault is set to have a maximum allowance of the COLLATERAL. While the GeneralLevSwap contract is not designed to hold any collateral assets directly, setting an unlimited allowance is a pattern that should generally be avoided.",
            "severity": "Low",
            "contract": "GeneralLevSwap",
            "function": "constructor",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Hardcoded Slippage May Result in Swap Failure",
            "description": "When swapping from the Balancer LP token to the borrowing asset through the `_swapFrom()` function, there is a hard-coded slippage value of `10%` which may result in swap failure if a user wants to allow more than `10%` slippage due to unusual market conditions.",
            "severity": "Low Risk",
            "contract": "AURAWSTETHWETHLevSwap.sol",
            "function": "_swapFrom()",
            "lineNumber": "L93"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Missing Input Validation",
            "description": "Lack of input validation in functions executeOperation(), receiveFlashLoan(), _executeOperation(), enterPositionWithFlashloan(), withdrawWithFlashloan(), and zapLeverageWithFlashloan().",
            "severity": "Low Risk",
            "contract": "GeneralLevSwap",
            "function": [
                "executeOperation()",
                "receiveFlashLoan()",
                "_executeOperation()",
                "enterPositionWithFlashloan()",
                "withdrawWithFlashloan()",
                "zapLeverageWithFlashloan()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-1339"
                ]
            },
            "title": "Precision Loss Due to Division Before Multiplication",
            "description": "There are two calculations where precision is lost due to division before multiplication.",
            "severity": "Low Risk",
            "contract": "GeneralLevSwap",
            "function": "_withdrawWithFlashloan(), _leverageWithFlashloan()",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Return Values Not Verified",
            "description": "Several contracts within the protocol make calls to functions on other contracts with return values that indicate the result of those functions. However, many of these return values are not being validated within the code.",
            "severity": "Low Risk",
            "contract": [
                "GeneralLevSwap",
                "AuraBalancerLPVault"
            ],
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Unsafe Casts",
            "description": "There are multiple instances of unsafe casts within the contracts which could lead to overflow or underflow of values and have unpredictable results.",
            "severity": "Low Risk",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1068"
                ]
            },
            "title": "Reentrancy Risks Can Be Mitigated",
            "description": "To avoid reentrancy risks and reduce the attack surface, it is highly recommended to inherit from OpenZeppelin's `ReentrancyGuard` contract and add the `nonReentrant` modifier to all functions that:",
            "severity": "Low Risk",
            "contract": "AuraBalancerLPVault",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Incorrect _vaultFee Could Cause _transferYield() to Fail",
            "description": "In the AuraBalancerLPVault contract, an incorrect _vaultFee setup can cause the _transferYield() function to fail due to overflow.",
            "severity": "Low Risk",
            "contract": "AuraBalancerLPVault",
            "function": "_transferYield()",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-282"
                ],
                "3": [
                    "CWE-708"
                ]
            },
            "title": "Privileged Roles and Ownership",
            "description": "The LeverageSwapManager possesses a function registerLevSwapper() which is callable by the administrator role of the contract, allowing admin to change the official implementation of the *LevSwap contract for a particular collateral to an entirely different one.",
            "severity": "Informational",
            "contract": "LeverageSwapManager",
            "function": "registerLevSwapper()",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-391"
                ]
            },
            "title": "Events Not Emitted at Key State Transitions",
            "description": "The `registerLevSwapper()` function represents a critical state change for the protocol, as it changes or disables the leverage swap functionality for a particular collateral asset. The function should emit an event, so this key state transition can be monitored and responded to.",
            "severity": "Informational",
            "contract": "LeverageSwapManager",
            "function": "registerLevSwapper()",
            "lineNumber": "N/A"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Functions Unnecessarily Marked as payable",
            "description": "The functions `setConfiguration()` and `processExtraYield()` in the `AuraBalancerLPVault` contract are marked as `payable`, yet there is no reason for it, and the funds would become stuck.",
            "severity": "Informational",
            "contract": "AuraBalancerLPVault",
            "function": [
                "setConfiguration()",
                "processExtraYield()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Directly Transferred Tokens Are Swapped",
            "description": "Tokens sent directly to the contract by accident will be returned to the next user swapping to that asset, leading to unexpected behavior and potentially inflated collateral.",
            "severity": "Informational",
            "contract": "AURAWSTETHWETHLevSwap",
            "function": "_swapTo() and _swapFrom()",
            "lineNumber": "N/A"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Leverage Parameters Are Unconventional or Unintuitive",
            "description": "The definition of leverage used by the protocol might differ from user expectations, leading to unexpectedly high leverage.",
            "severity": "Informational",
            "contract": "GeneralLevSwap.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 20,
            "category": {
                "1": [
                    "CWE-697"
                ],
                "2": [
                    "CWE-185"
                ]
            },
            "title": "Code Readability Suffers From Misleading Names",
            "description": "The function signatures from `_swapFrom()` and `_swapTo()` seem to suggest that `_amount` of `_borrowingAsset` is swapped to another asset or being swapped for, respectively. However, in the derived implementation in the `AURAWSTETHWETHLevSwap` contract, the `_borrowingAsset` parameter remains unused in both methods.",
            "severity": "Informational",
            "contract": "AURAWSTETHWETHLevSwap",
            "function": "_swapFrom() and _swapTo()",
            "lineNumber": "N/A"
        }
    ]
}