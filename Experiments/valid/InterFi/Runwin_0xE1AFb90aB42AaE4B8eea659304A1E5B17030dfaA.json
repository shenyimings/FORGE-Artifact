{
    "path": "./Audit_Reports_2024/InterFi/Runwin_0xE1AFb90aB42AaE4B8eea659304A1E5B17030dfaA.pdf",
    "project_info": {
        "url": "https://github.com/interfinetwork/audited-codes/blob/main/",
        "commit_hash": "106cec87a889f03e37848aff82484529ad5216cb",
        "address": "0xe1afb90ab42aae4b8eea659304a1e5b17030dfaa",
        "is_exists": false,
        "chain": "bsc",
        "compiler_version": [
            "v0.8.15+commit.e14f2714"
        ],
        "project_path": {
            "RunwinToken": "Experiments/contracts/Runwin_0xE1AFb90aB42AaE4B8eea659304A1E5B17030dfaA/RunwinToken"
        }
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Minting of unlimited number of tokens",
            "description": "Smart contract owner can mint tokens after initial contract creation/deployment without any limitation.",
            "severity": "High",
            "contract": "N/A",
            "function": "mint(address, uint256)",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Potential unauthorized script upgrade",
            "description": "N/A",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Redundant code for transferOwnership() function",
            "description": "Smart contract utilizes redundant code for transferOwnership(). Ideal transfer ownership code should look like: function transferOwnership(address newOwner) public virtual onlyOwner {require (newOwner != address( 0 ), \"Ownable: new owner is the zero address\" );emit OwnershipTransferred (_owner, newOwner);_owner = newOwner;",
            "severity": "High",
            "contract": "RunwinToken",
            "function": "transferOwnership()",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Smart contract owner can mint tokens after initial contract creation/deployment",
            "description": "The smart contract owner has the ability to mint new tokens even after the initial deployment of the contract.",
            "severity": "High",
            "contract": "Runwin",
            "function": "mint(address, uint256)",
            "lineNumber": "N/A"
        }
    ]
}