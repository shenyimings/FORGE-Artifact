{
    "path": "./Audit_Reports_2024/Solidified/Solidified-USM_[10.12.2020].pdf",
    "project_info": {
        "url": "https://github.com/usmfum/USM",
        "commit_hash": "5b450aea474bc07f38606851b9ef6f84d2be0b3f",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/Solidified-USM_[10/USM"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Proxy.sol: Anyone can burn/defund someone else\u2019s USM/FUM",
            "description": "The `burn()` and `defund()` functions in Proxy.sol don't check `msg.sender`, allowing anyone to burn someone else's USM/FUM and get WETH to a desired destination as long as Proxy has Delegate permissions.",
            "severity": "Critical",
            "contract": "Proxy.sol",
            "function": "burn() and defund()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Proxy.sol: Anyone can mint USM and FUM using someone else\u2019s approved WETH",
            "description": "Anyone can call mint() or fund() functions to use someone else's approved WETH to mint USM/FUM for themselves, potentially allowing malicious actors to front-run transactions and steal the approved WETH.",
            "severity": "Critical",
            "contract": "Proxy.sol",
            "function": [
                "mint(address from, address to, uint ethIn, uint minUsmOut)",
                "fund(address from, address to, uint ethIn, uint minFumOut)"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "EIP712 signature domain leftover from another project",
            "description": "The EIP712 signature domain in Delegable.sol seems to have been re-used from the Yield project.",
            "severity": "Minor",
            "contract": "Delegable.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-1329"
                ]
            },
            "title": "Oracles might disappear or become unreliable",
            "description": "Hardcoded oracles may become unreliable or disappear, and there is currently no facility to update or replace them.",
            "severity": "Note",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-327"
                ]
            },
            "title": "Malleable signatures accepted",
            "description": "The `addDelegateBySignature()` function in `Delegable.sol` uses the built-in `ecrecover()` and still allows malleable signatures for backward compatibility reasons.",
            "severity": "Minor",
            "contract": "Delegable.sol",
            "function": "addDelegateBySignature()",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Tautologies in WadMath.sol",
            "description": "The `wadHalfExp()` function performs two checks over unsigned integer variables that will always resolve to true, since unsigned integers are always >= 0.",
            "severity": "Minor",
            "contract": "WadMath.sol",
            "function": "wadHalfExp()",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-693"
                ]
            },
            "title": "Variable shadowed in inherited contracts",
            "description": "The contract USM.sol declares a constant NUM_UNISWAP_PAIRS which is already declared in the imported and inherited MedianOracle.sol. This can lead to inconsistencies if changes are made to one of the contracts.",
            "severity": "Minor",
            "contract": "USM.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "ETH can be forced into the USM contract bypassing mint()",
            "description": "ETH can be forcibly sent to the USM contract without triggering the execution of a receive function, potentially causing incorrect values for view functions like debtRatio().",
            "severity": "Minor",
            "contract": "USM",
            "function": "ethPool()",
            "lineNumber": "N/A"
        }
    ]
}