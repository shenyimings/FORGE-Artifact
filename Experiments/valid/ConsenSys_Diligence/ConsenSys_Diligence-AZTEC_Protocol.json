{
    "path": "./Audit_Reports_2024/ConsenSys_Diligence/ConsenSys_Diligence-AZTEC_Protocol.pdf",
    "project_info": {
        "url": "https://github.com/AztecProtocol/aztec-v1",
        "commit_hash": "7a020f4ced9680f6e4a452fe570671aac0802471",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/ConsenSys_Diligence-AZTEC_Protocol/aztec-v1"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Tokens are not minted in confidentialTransferFrom",
            "description": "The ZkAssetMintable contract allows minting of unlimited number of tokens if confidentially minted tokens are not publicly minted when there is a need for it.",
            "severity": "Major",
            "contract": "ZkAssetMintableBase.sol",
            "function": "confidentialTransferFrom",
            "lineNumber": "138"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Tokens are not minted in confidentialTransferFrom",
            "description": "ZkAssetMintable contract is responsible for supplying tokens to the ACE contract. If some tokens were confidentially minted, they are publicly minted only when there is a need for it (i.e., if there are not enough funds to withdraw). It's done automatically in `confidentialTransfer` function but not in `confidentialTransferFrom`. This may cause the function to revert if there are not enough tokens in totalSupply to withdraw.",
            "severity": "Major",
            "contract": "ZkAssetMintableBase",
            "function": "confidentialTransferFrom()",
            "lineNumber": "138"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-282"
                ],
                "3": [
                    "CWE-708"
                ]
            },
            "title": "ZkAssetOwnable should use OpenZeppelin's Ownable.sol",
            "description": "The concept of Ownership on ZkAssets is relatively weak and does not conform to the OpenZeppelin Ownable standard. It is suggested to use the more popular `Ownable.sol` from OpenZeppelin, which would be more in line with a user's expectations of contract ownership.",
            "severity": "Medium",
            "contract": "ZkAssetOwnable",
            "function": "N/A",
            "lineNumber": "L35"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Multiple Integer Overflows in joinSplit.sol",
            "description": "While fuzzing `joinSplit.sol` using Harvey, multiple integer overflows were detected.",
            "severity": "Minor",
            "contract": "JoinSplit",
            "function": "N/A",
            "lineNumber": "L67-L70"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-435"
                ]
            },
            "title": "Bilateral swaps cannot be trustless without additional contract",
            "description": "interacting contracts are legit, and it's up to their customers to confirm legitimacy as well. There should be a way to make atomic trustless bilateral swap transactions using a current set of contracts.",
            "severity": "Critical",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-282"
                ],
                "3": [
                    "CWE-708"
                ]
            },
            "title": "Overpowered ACE owners",
            "description": "The concept of Ownership on ZkAssets is relatively weak and does not conform to the OpenZeppelin Ownable standard, making it vulnerable to attacks.",
            "severity": "High",
            "contract": "ZkAssetOwnable",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-282"
                ],
                "3": [
                    "CWE-708"
                ]
            },
            "title": "Weak Ownership on ZkAssets",
            "description": "The concept of ownership on _ZkAssets_ is relatively weak as it does not conform to the OpenZeppelin Ownable standard and ownership cannot be updated once set.",
            "severity": "Medium",
            "contract": "ZkAssetOwnable",
            "function": "N/A",
            "lineNumber": "L35"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "_ACE_ compartmentalization",
            "description": "One approach to mitigating overpowered _ACE_ owners is to compartmentalize out experimental ACEs.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "_ZkAsset_ Factory",
            "description": "The _ACE_ could choose to only create _NoteRegistries_ for _ZkAssets_ created through the factory.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}