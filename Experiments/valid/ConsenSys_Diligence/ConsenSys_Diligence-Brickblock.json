{
    "path": "./Audit_Reports_2024/ConsenSys_Diligence/ConsenSys_Diligence-Brickblock.pdf",
    "project_info": {
        "url": "https://github.com/brickblock-io/smart-contracts/tree/master",
        "commit_hash": "master",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/ConsenSys_Diligence-Brickblock/smart-contracts"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Unnecessary refund action in PoaCrowdsale",
            "description": "In the buyAndEndFunding() method of PoaCrowdsale there's a transfer action being executed every time even if the refund is equal to 0 or not even requested/needed.",
            "severity": "N/A",
            "contract": "PoaCrowdsale",
            "function": "buyAndEndFunding()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-1287"
                ]
            },
            "title": "Typecasting to Address",
            "description": "The variable should be explicitly typecast to address.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Blocking conditions in buyFiat",
            "description": "Logical error in the function due to the check if (fundingGoalInCents().sub(_newFundedAmount) >= 0), making the second check if (fundedAmountInCentsDuringFiatFunding() >= fundingGoalInCents()) impossible to be greater than, only less than or equal to.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "buyFiat",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Use of ever-growing unsigned integers in PoaToken is dangerous",
            "description": "In both the balanceOf and distribute functions the math behind makes use of uint256 variables that are never-growing (can only increase and never decrease, per specification), this creates an attack surface for DoS attacks.",
            "severity": "N/A",
            "contract": "PoaToken",
            "function": [
                "balanceOf",
                "distribute"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Use of ever-growing unsigned integers in AccessToken is dangerous",
            "description": "In both the balanceOf and distribute functions the math behind makes use of uint256 variables that are never-growing (can only increase and never decrease, per specification), this creates an attack surface for DoS attacks.",
            "severity": "N/A",
            "contract": "AccessToken",
            "function": [
                "balanceOf",
                "distribute"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Non-optimal stage checking condition in PoaToken",
            "description": "The finding indicates a non-optimal stage checking condition in the PoaToken contract.",
            "severity": "N/A",
            "contract": "PoaToken",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1164"
                ]
            },
            "title": "Contradicting comment on POAManager",
            "description": "No description provided",
            "severity": "Minor",
            "contract": "POAManager",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-1339"
                ]
            },
            "title": "Inconsistent type used for decimals",
            "description": "N/A",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1076"
                ]
            },
            "title": "Inconsistent event naming",
            "description": "Throughout the contract system - somewhat inconsistent event naming conventions, for example, Burn and BurnEvent.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Incorrect name of parameter in BBKUnlockedEvent",
            "description": "In AccessToken, wrong variable name, the second uint256 is actually the unlockedAmount",
            "severity": "N/A",
            "contract": "AccessToken",
            "function": "BBKUnlockedEvent",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Usage of EntityState for both brokers and tokens in PoaManager is an anti-separation-of-concerns pattern",
            "description": "The struct is the same shape for both PoaToken and Broker data. The rights access is controlled with modifiers on the public functions (addBroker, removeBroker, addToken, removeToken) and then make use of private functions to work with the abstract EntityState.",
            "severity": "N/A",
            "contract": "PoaManager",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1120"
                ]
            },
            "title": "Unnecessary complexity in toXLengthString functions in PoaCommon",
            "description": "Both the toXLengthString functions in PoaCommon are too complex and can be substituted by a simpler version with a single assembly block.",
            "severity": "N/A",
            "contract": "PoaCommon",
            "function": "to32LengthStringOpt()",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "No plan for how a physical tokenized asset would handle a chain split",
            "description": "The brickblock contract system creates tokens for physical assets, but in the event of an unplanned contentious hard fork, there would be two blockchain assets for each physical one. This is a potentially catastrophic scenario.",
            "severity": "N/A",
            "contract": "brickblock",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1120"
                ]
            },
            "title": "Usage of random storage slots in the Proxy adds too much complexity",
            "description": "There is a big complexity in the codebase stemming from the use of a custom implementation of randomized storage slots for system-wide storage variables. This promotes dense code and may introduce unknown vulnerabilities.",
            "severity": "N/A",
            "contract": "Proxy",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Unnecessary usage of low-level .call() method",
            "description": "Throughout the set of PoA-related contracts, there is an unnecessary and possibly dangerous usage of the low-level .call() method since every contract being called is known by the caller beforehand.",
            "severity": "N/A",
            "contract": "PoaCommon.sol",
            "function": "N/A",
            "lineNumber": "184"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Withdraw method does not check if balance is sufficient for the withdrawal",
            "description": "The withdraw function does not verify if the user's balance is sufficient before processing the withdrawal.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "withdraw()",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Precision in percent function can overflow",
            "description": "The public percent function in PoaCrowdsale takes precision as a parameter, does not validate it, and does not use safe math.",
            "severity": "N/A",
            "contract": "PoaCrowdsale",
            "function": "percent()",
            "lineNumber": "N/A"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Transaction order dependence issue in ExchangeRates",
            "description": "There's a transaction order dependence issue with the 'owner' agent in ExchangeRates. When seeing a big buy transaction come in, 'owner', basically controlling the exchange rate, could prepend a transaction (or multiple ones) of his own to get all the contribution for, practically, no tokens in exchange.",
            "severity": "N/A",
            "contract": "ExchangeRates",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Non-optimal ordering of instructions in PoaProxy and PoaToken fallback functions",
            "description": "In PoaProxy and PoaToken fallback functions, the order of the instructions can be changed to achieve better gas optimization. There is no need to copy return data to memory if the call result is false and the call is going to be reverted anyway.",
            "severity": "N/A",
            "contract": "PoaProxy, PoaToken",
            "function": "fallback()",
            "lineNumber": "N/A"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "ExchangeRateProvider 's callback check for access control is non-optimal",
            "description": "There is a transaction order dependence issue with the \"owner\" agent in ExchangeRates. When seeing a big buy transaction come in, \"owner\", basically controlling the exchange rate, could prepend a transaction (or multiple ones) of his own to get all the contribution for, practically, no tokens in exchange.",
            "severity": "N/A",
            "contract": "ExchangeRates",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 20,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Inaccurate specification comment for setFailed() method in PoaCrowdsale",
            "description": "N/A",
            "severity": "N/A",
            "contract": "PoaCrowdsale",
            "function": "setFailed()",
            "lineNumber": "N/A"
        },
        {
            "id": 21,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Unnecessary fallback functions to refuse payments",
            "description": "In AccessToken, CentralLogger, ContractRegistry, ExchangeRates, FeeManager, PoaManager and Whitelist, the presence of the fallback function is not needed because the default Solidity behavior is to disallow payments to contracts through their fallback function.",
            "severity": "N/A",
            "contract": [
                "AccessToken",
                "CentralLogger",
                "ContractRegistry",
                "ExchangeRates",
                "FeeManager",
                "PoaManager",
                "Whitelist"
            ],
            "function": "fallback()",
            "lineNumber": "N/A"
        },
        {
            "id": 22,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Comment about upgrade path is incorrect",
            "description": "This comment in AccessTokenUpgradeExample is incorrect. In the event of an upgrade, more than just inheritance will be required to access the state of the old contract.",
            "severity": "N/A",
            "contract": "AccessTokenUpgradeExample",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 23,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-841"
                ]
            },
            "title": "buyAndEndFunding ends by calling buyAndContinueFunding",
            "description": "The function that ends a PoaCrowdsale, buyAndEndFunding, ends by calling buyAndContinueFunding - though there is no wrong functionality here, it is counterintuitive.",
            "severity": "N/A",
            "contract": "PoaCrowdsale",
            "function": "buyAndEndFunding()",
            "lineNumber": "N/A"
        },
        {
            "id": 24,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Unused variable has no dummy check-in ExchangeRateProviderStub",
            "description": "There are unused variables in the sendQuery function in ExchangeRateProvider, generating a compiler warning. In ExchangeRateProviderStub on the same function, there's a comment about doing a dummy check is wrong, but no dummy check is done.",
            "severity": "N/A",
            "contract": "ExchangeRateProviderStub",
            "function": "sendQuery",
            "lineNumber": "N/A"
        },
        {
            "id": 25,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "FeeManager open-by-default design might introduce flaws in the token economy",
            "description": "The current design allows for great flexibility as well as keeping fee payments simple.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 26,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Minting of unlimited number of sundae tokens",
            "description": "N/A",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 27,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Potential unauthorized script upgrade",
            "description": "The presence of an upgrade path allows potential unauthorized script upgrades.",
            "severity": "High",
            "contract": "AccessTokenUpgradeExample",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}