{
    "path": "./Audit_Reports_2024/Beosin/NodeDAO-Protocol_202302011759.pdf",
    "project_info": {
        "url": "https://github.com/King-Hash-Org/NodeDAO-Protocol",
        "commit_hash": "c97683960416e9ec1501e51a3b89fc97b3c27f40",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/NodeDAO-Protocol_202302011759/NodeDAO-Protocol"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Unlimited rate range in _setUnstakePoolSize_ and _setUnstakeFeeRate_ functions",
            "description": "Since the rate range is limited to less than one hundred percent in the _setUnstakePoolSize_ and _setUnstakeFeeRate_ functions, it is still possible to set the rate to a higher value, which may result in higher than expected fees being charged.",
            "severity": "Info",
            "contract": "LiquidStaking.sol",
            "function": "_setUnstakePoolSize_ and _setUnstakeFeeRate_",
            "lineNumber": "506-514"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Redundant code in _deposit_ function",
            "description": "The following functions are redundant code.",
            "severity": "Info",
            "contract": "LiquidStaking",
            "function": "_deposit_",
            "lineNumber": "src\\LiquidStaking.sol# 242-250"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Incorrect update of unclaimedRewards parameter in _claimRewardsOfLiquidStaking_ function",
            "description": "In the function, the new reward is added by \"address(this).balance - unclaimedRewards - operatorRewards;\" however, the contract also contains the __settle_daoRewards part, and in the next settlement of the reward address(this).balance will include the daoRewards part of the reward, resulting in confusion in the reward calculation.",
            "severity": "Medium",
            "contract": "ELVault.sol",
            "function": "_claimRewardsOfLiquidStaking_",
            "lineNumber": "109"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Absence of receive function to handle ETH transfers in LiquidStaking contract",
            "description": "The absence of a function to receive ETH transfers in the LiquidStaking contract will cause the vault contract to fail to send rewards.",
            "severity": "High",
            "contract": "LiquidStaking",
            "function": "N/A",
            "lineNumber": "src\\LiquidStaking.sol"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-410"
                ]
            },
            "title": "Insufficient updating of operatorPoolBalances[operatorId] in _registerValidator_ function",
            "description": "The _registerValidator_ function needs to consume the balance of the corresponding operatorId, that is, the value of the variable operatorPoolBalances[operatorId]. In the _stakeETH_ and _unstakeETH_ functions, when the user calls the _stakeETH_ function to stake, operatorPoolBalances[_operatorId] will increase according to the amount of ETH sent, and send NETH certificate tokens to the user; when calling _unstakeETH_ to extract ETH, it will be based on the NETH certificate To withdraw the ETH in the unstakePoolBalances pool, but the operatorPoolBalances[operatorId] has not been updated, user can use this part of the extra operatorPoolBalances to register validator.",
            "severity": "High",
            "contract": "LiquidStaking",
            "function": "_registerValidator_",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "This function cannot update multiple cycles of beacon chain data",
            "description": "When the first epoch report meets the quorum, isQuorum will change to true, but when the next expected epoch does not change the value to false, the beacon chain data for the next expected epoch will not be updated at this time.",
            "severity": "Critical",
            "contract": "BeaconOracle",
            "function": "_reportBeacon_",
            "lineNumber": "171-174"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "The _addOracleMember_ function is not designed properly",
            "description": "BeaconOracle contract _addOracleMember_ function, add oracle Member, always add at the end of the array, so there may be oracleMemberCount is not greater than the maximum number of MEMBERS (part of the oracle member was removed), but the last index of oracleMembers has exceeded 255, which will cause an exception to the voting for the MEMBERS who index exceeds 255.",
            "severity": "Low",
            "contract": "BeaconOracle",
            "function": "_addOracleMember_",
            "lineNumber": "src/oracles/BeaconOracle.sol#100-107"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "The data triggered by the event in the _reportBeacon_ function is abnormal",
            "description": "The number of votes for calling the _reportBeacon_ function is not added when triggering the report success event.",
            "severity": "Info",
            "contract": "BeaconOracle",
            "function": "_reportBeacon",
            "lineNumber": "src/oracles/BeaconOracle.sol #L220, #L230"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "An error occurred while compiling the contract",
            "description": "An error occurs when compiling the contract with the 0.8.7 version of the compiler, which will cause the contract to fail to compile.",
            "severity": "Info",
            "contract": "BeaconOracle",
            "function": "N/A",
            "lineNumber": "src/oracles/BeaconOracle.sol"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-697"
                ]
            },
            "title": "The isOracleMember function is not judged rigorously",
            "description": "The _isOracleMember_ function may return true if the address passed in is 0.",
            "severity": "Info",
            "contract": "BeaconOracle",
            "function": "_isOracleMember_()",
            "lineNumber": "src/oracles/BeaconOracle.sol#131-132"
        }
    ]
}