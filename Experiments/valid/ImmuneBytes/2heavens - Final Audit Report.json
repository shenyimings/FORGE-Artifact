{
    "path": "./Audit_Reports_2024/ImmuneBytes/2heavens - Final Audit Report.pdf",
    "project_info": {
        "url": "https://github.com/guizostudios/2heavens",
        "commit_hash": "548faed421a3b72a943c5b2e65362f1202932142",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/2heavens - Final Audit Report/2heavens"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Rugpull indicator",
            "description": "A rug pull attack allows an adversary to drain all funds from a contract by setting themselves as the beneficiary and calling the 'withdraw' function with their own recipient address.",
            "severity": "Critical",
            "contract": "JointAccount",
            "function": "setBeneficiary()",
            "lineNumber": "60"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Unrestricted Heir Claiming",
            "description": "The code allows any user designated as the 'heir' to initiate the claim process and then to claim the ownership of an account without restrictions, even if the account is frozen.",
            "severity": "Critical",
            "contract": "N/A",
            "function": "claim()",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "Insecure Contract Configuration",
            "description": "The contract function createTTOD sets values for the Accounts contract's _feeAddress and _transferFee variables through user input, without any restrictions on the values that can be provided.",
            "severity": "High",
            "contract": "Accounts",
            "function": "createTTOD",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "Create modifier to ensure proper access control",
            "description": "It is recommended to create a modifier to encapsulate the check for the contract owner if the same check is repeated in multiple functions.",
            "severity": "Medium",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-391"
                ]
            },
            "title": "No event emission on critical functions",
            "description": "Contract does not emit respective events over crucial functionality eg. createJointWallet function.",
            "severity": "Critical",
            "contract": "N/A",
            "function": "createJointWallet()",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Missing data validation",
            "description": "Contract does not check for input data passed into function parameter eg. createJointWallet, jointSetBeneficiary and setWithdrawLimit, these functions do not check for zero address and zero amount which can be easily set by malicious users.",
            "severity": "Medium",
            "contract": "N/A",
            "function": "createJointWallet, jointSetBeneficiary, setWithdrawLimit",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Missing functionality",
            "description": "During the deployment of the contract, _transferFee set to something which is not specified anywhere in the contract and there is no check even in constructor to verify the amount reserved for protocol fee, further there is no functionality in contract to change the fee parameter in future if required.",
            "severity": "Critical",
            "contract": "N/A",
            "function": "constructor",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-1265"
                ]
            },
            "title": "Use Non-Reentrant library",
            "description": "The mutex variable is used to prevent reentrancy by manually setting it to true before executing critical sections of code and setting it back to false after the critical section is finished.",
            "severity": "Low",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1065"
                ]
            },
            "title": "Use pause/unpause openzeppelin library",
            "description": "Using well-vetted and battle-tested libraries such as OpenZeppelin is considered a best practice in smart contract development, as it can greatly reduce the risk of security vulnerabilities.",
            "severity": "Low",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Merge withdraw and transferFunds function",
            "description": "It is recommended to merge withdraw and transferFunds functions into one function with an additional parameter to determine if the transfer is a withdraw or a transfer to a recipient.",
            "severity": "Low",
            "contract": "HeirAccount, JoitAccount",
            "function": "withdraw(), transferFunds()",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Code practice/ Gas Optimisation",
            "description": "Using \"!= 0\" is a valid way to check if a uint value is non-zero nevertheless it has the same efficiency as using \"> 0\". In solidity specifically while using uint, it might make the code more readable, as it explicitly checks for non-zero values.",
            "severity": "Low",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-358"
                ]
            },
            "title": "Don't make withdrawal functions payable.",
            "description": "Withdrawal functions should not be payable to prevent unintended behavior and potential security risks.",
            "severity": "Critical",
            "contract": "JointAccount",
            "function": "withdraw()",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Relevant checks should be placed first.",
            "description": "In jointAccount and heirAccount contract there is a function name Withdraw which checks for : require(!frozen, \"Account is frozen, cannot withdraw funds.\"); This check should be placed first in the function to make sure other functionality will be processed after that, there is no point to move forward before checking for that.",
            "severity": "Low",
            "contract": "jointAccount and heirAccount",
            "function": "Withdraw",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1076"
                ],
                "3": [
                    "CWE-1078"
                ],
                "4": [
                    "CWE-1099"
                ]
            },
            "title": "Naming convention",
            "description": "Naming conventions are important in smart contract development because they help make the code more readable.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Improper Contract functions configuration",
            "description": "The contract function createTTOD sets values for the Accounts contract's _feeAddress and _transferFee variables through user input, without any restrictions on the values that can be provided.",
            "severity": "High",
            "contract": "Accounts",
            "function": "createTTOD()",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-710"
                ]
            },
            "title": "Contract Order of layout",
            "description": "The layout of a Solidity smart contract should be according to recommended practices for organizing and structuring code that can make it easier to read, maintain, and debug.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Use Call instead of Transfer to transfer ETH",
            "description": "Using transfer() made sense under the assumption that gas costs are constant. However, gas costs are not constant while ethereum is changing gas costs in past EIPs. Smart contracts should be robust to this fact.",
            "severity": "Critical",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}