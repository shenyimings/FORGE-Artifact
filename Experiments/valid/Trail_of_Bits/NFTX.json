{
    "path": "./Audit_Reports_2024/Trail_of_Bits/NFTX.pdf",
    "project_info": {
        "url": "https://github.com/NFTX-project/nftx-protocol-v2/tree/c8ddc72b4400ad1e12ed03f4369b765371564a00",
        "commit_hash": "c8ddc72b4400ad1e12ed03f4369b765371564a00",
        "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
        "is_exists": true,
        "project_path": "Experiments/contracts/NFTX/nftx-protocol-v2"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Reliance on third-party library for deployment",
            "description": "Due to the use of the `delegatecall` proxy pattern, some NFTX contracts cannot be initialized with their own constructors; instead, they have initializer functions. These functions can be front-run, allowing an attacker to initialize contracts incorrectly.",
            "severity": "Informational",
            "contract": "N/\u0391",
            "function": "__NFTXInventoryStaking_init",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-229"
                ],
                "4": [
                    "CWE-230"
                ]
            },
            "title": "Missing validation of proxy admin indices",
            "description": "The index determining which proxy is being targeted is never validated, allowing functions to execute even if the index is out of bounds with respect to the number of proxies managed by the contract.",
            "severity": "Informational",
            "contract": "ProxyController.sol",
            "function": [
                "changeProxyAdmin(uint256,uint256)",
                "getAdmin(uint256)"
            ],
            "lineNumber": "79-95"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Random token withdrawals can be gamed",
            "description": "The randomness of token withdrawal can be predicted by a contract caller due to known elements used to calculate `randomIndex`, allowing them to choose a specific token for withdrawal and exploit the lower 'random redemption fee'",
            "severity": "High",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Duplicate receivers allowed by addReceiver()",
            "description": "The function does not check whether the receiver is already in the list, allowing receivers to be accidentally added multiple times and increasing the amount of fees they receive.",
            "severity": "High",
            "contract": "NFTXSimpleFeeDistributor",
            "function": "_addReceiver()",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "OpenZeppelin vulnerability can break initialization",
            "description": "A bug was recently discovered in all OpenZeppelin versions prior to v4.4.1 that affects initializer functions invoked separately during contract creation: the bug causes the contract initialization modifier to fail to prevent reentrancy to the initializers.",
            "severity": "N/A",
            "contract": "package.json",
            "function": "initializer",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Potentially excessive gas fees imposed on users for protocol fee distribution",
            "description": "Users may pay a substantial amount in gas for the distribution of insignificant protocol fees.",
            "severity": "High",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Risk of denial of service due to unbounded loop",
            "description": "When protocol fees are distributed, the system loops through the list of beneficiaries (known internally as receivers) to send them the protocol fees they are entitled to.",
            "severity": "Medium",
            "contract": "NFTXSimpleFeeDistributor.sol",
            "function": "distribute(uint256)",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-749"
                ]
            },
            "title": "A malicious fee receiver can cause a denial of service",
            "description": "When a receiver is a contract, a call is made to it and arbitrary code is executed, which could allow a malicious receiver contract to conduct a denial-of-service attack.",
            "severity": "Medium",
            "contract": "NFTXSimpleFeeDistributor",
            "function": "_sendForReceiver",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Vault managers can grief users",
            "description": "The process of creating vaults in the NFTX protocol is trustless, allowing anyone to create a new vault and use any asset as the underlying vault NFT. Vault managers can disable certain vault features and change vault fees.",
            "severity": "Medium",
            "contract": "NFTXVaultUpgradeable.sol",
            "function": "setVaultFeatures()",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Lack of zero address check in functions",
            "description": "Certain setter functions fail to validate incoming arguments, so callers can accidentally set important state variables to the zero address.",
            "severity": "N/A",
            "contract": [
                "NFTXInventoryStaking",
                "NFTXSimpleFeeDistributor",
                "RewardDistributionToken"
            ],
            "function": [
                "__NFTXInventoryStaking_init()",
                "setInventoryStakingAddress()",
                "addReceiver()",
                "changeReceiverAddress()",
                "__RewardDistributionToken_init()"
            ],
            "lineNumber": "N/A"
        }
    ]
}