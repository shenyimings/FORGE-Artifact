{
    "path": "./Audit_Reports_2024/Trail_of_Bits/FraxQ42021.pdf",
    "project_info": {
        "url": "https://github.com/FraxFinance/frax-solidity/tree/31dd816b03c5598141b5de7b1595453f0fdddb75",
        "commit_hash": "31dd816b03c5598141b5de7b1595453f0fdddb75",
        "address": "0x2fe065e6ffef9ac95ab39e5042744d695f560729",
        "is_exists": true,
        "project_path": "Experiments/contracts/FraxQ42021/frax-solidity"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ]
            },
            "title": "Testing is not routine",
            "description": "The Frax Solidity repository does not have reproducible tests that can be run locally.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-237"
                ],
                "4": [
                    "CWE-238"
                ]
            },
            "title": "No clear mapping from contracts to tests",
            "description": "There are 405 Solidity files within the `contracts` folder but there are only 80 files within the `test` folder, thus it is not clear which tests correspond to which contracts.",
            "severity": "Informational",
            "contract": "Various",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-862"
                ],
                "4": [
                    "CWE-638"
                ],
                "5": [
                    "CWE-424"
                ],
                "6": [
                    "CWE-425"
                ]
            },
            "title": "amoMinterBorrow cannot be paused",
            "description": "The FraxPoolV3 owner is required to disable the AMO contracts when a bug is discovered but unable to stop it.",
            "severity": "Medium",
            "contract": "FraxPoolV3",
            "function": "amoMinterBorrow",
            "lineNumber": "552-559"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-400"
                ],
                "3": [
                    "CWE-770"
                ]
            },
            "title": "Array updates are not constant time",
            "description": "Array size can grow unbounded and block gas limits are too low, making it difficult to remove elements from arrays like minters_array or bridge_tokens_array.",
            "severity": "Critical",
            "contract": "CrossChainCanonical",
            "function": "N/A",
            "lineNumber": "269-285"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Incorrect calculation of collateral amount in redeemFrax",
            "description": "The `redeemFrax` function of the `FraxPoolV3` contract incorrectly multiplies a FRAX amount with the collateral price to calculate the equivalent collateral amount, instead of dividing by the collateral price.",
            "severity": "High",
            "contract": "FraxPoolV3",
            "function": "redeemFrax()",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "spotPriceOHM is vulnerable to manipulation",
            "description": "The spotPriceOHM function can be manipulated by making a large trade through the OHM-FRAX pool, allowing an attacker to change the collateralization rate at will.",
            "severity": "Critical",
            "contract": "N/A",
            "function": "spotPriceOHM()",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Return values of the Chainlink oracle are not validated",
            "description": "The `latestRoundData` function returns a signed integer that is coerced to an unsigned integer without checking that the value is a positive integer, which can cause unexpected behavior and drastically misrepresent the price. Additionally, the completion and recency of the round data are not validated, permitting stale price data.",
            "severity": "Informational",
            "contract": "FraxPoolV3.sol, ComboOracle.sol, FRAXOracleWrapper.sol, FXSOracleWrapper.sol",
            "function": "getFRAXPrice(), getFXSPrice()",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Unlimited arbitrage in CCFrax1to1AMM",
            "description": "The `CCFrax1to1AMM` contract implements an automated market maker (AMM) with a constant price and zero slippage, making it vulnerable to unlimited arbitrage due to the lack of limits on `frax_price` swings.",
            "severity": "High",
            "contract": "CCFrax1to1AMM.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Collateral prices are assumed to always be $1",
            "description": "In the `FraxPoolV3` contract, the `setCollateralPrice` function sets collateral prices and stores them in the `collateral_prices` mapping, assuming they are always $1. This can lead to arbitrage opportunities or losses for users if actual prices differ.",
            "severity": "Medium",
            "contract": "FraxPoolV3",
            "function": "setCollateralPrice",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Solidity compiler optimizations can be problematic",
            "description": "High-severity security issues due to optimization bugs have occurred in the past and it is likely that there are latent bugs related to optimization and that new bugs will be introduced due to future optimizations.",
            "severity": "High",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Users are unable to limit the amount of collateral paid to FraxPoolV3",
            "description": "The redeemFrax function of the FraxPoolV3 contract does not correctly calculate the equivalent collateral amount, allowing users to steal all collateral from the protocol if the collateral price were changed.",
            "severity": "High",
            "contract": "FraxPoolV3",
            "function": "redeemFrax()",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Incorrect default price tolerance in CCFrax1to1AMM",
            "description": "The `price_tolerance` state variable of the `CCFrax1to1AMM` contract is set to 50,000, which corresponds to 0.05, inconsistent with the inline comment indicating 5,000 corresponding to 0.005.",
            "severity": "Low",
            "contract": "CCFrax1to1AMM",
            "function": "N/A",
            "lineNumber": "56"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1164"
                ]
            },
            "title": "Significant code duplication",
            "description": "Significant code duplication exists throughout the codebase. Duplicate code can lead to incomplete fixes or inconsistent behavior (e.g., because the code is modified in one location but not in all).",
            "severity": "Informational",
            "contract": "Various",
            "function": "retroCatchUp",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "StakingRewardsMultiGauge.recoverERC20 allows token managers to steal rewards",
            "description": "The `recoverERC20` function in the `StakingRewardsMultiGauge` contract allows token managers to steal rewards, violating conventions established by other Frax Solidity contracts.",
            "severity": "Medium",
            "contract": "StakingRewardsMultiGauge",
            "function": "recoverERC20()",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Convex_AMO_V2 custodian can withdraw rewards",
            "description": "The Convex_AMO_V2 custodian can withdraw rewards, violating conventions established by other Frax Solidity contracts where the custodian is only able to pause operations.",
            "severity": "Medium",
            "contract": "Convex_AMO_V2",
            "function": "withdrawRewards()",
            "lineNumber": "L425-435"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-228"
                ]
            },
            "title": "The FXS1559 documentation is inaccurate",
            "description": "Inaccurate documentation of FXS1559 contract.",
            "severity": "Unknown",
            "contract": "FXS1559_AMO_V3",
            "function": "N/A",
            "lineNumber": "87"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Univ3LiquidityAMO defaults the price of collateral to $1",
            "description": "The Univ3LiquidityAMO contract assumes a fixed price of $1 for collateral, which can lead to inaccurate calculations and potential losses for users.",
            "severity": "High",
            "contract": "FraxPoolV3",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "calc_withdraw_one_coin is vulnerable to manipulation",
            "description": "N/A",
            "severity": "High",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "18"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Incorrect valuation of LP tokens",
            "description": "The value of Uniswap V2 LP tokens is calculated incorrectly due to the return value of getReserves being vulnerable to manipulation, resulting in inaccurate global collateral value.",
            "severity": "High",
            "contract": "FraxUniV3Farm_Volatile",
            "function": "lpTokenInfo",
            "lineNumber": "241-263"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Missing check of return value of transfer and transferFrom",
            "description": "The codebase does not consistently use OpenZeppelin's SafeERC20 library, leading to missing return value checks for calls to 'transfer' and 'transferFrom', making the TWAMM contract vulnerable.",
            "severity": "Critical",
            "contract": "TWAMM",
            "function": "provideLiquidity(uint256)",
            "lineNumber": "N/A"
        },
        {
            "id": 20,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "A rewards distributor does not exist for each reward token",
            "description": "The `FraxUnifiedFarmTemplate` contract's `setGaugeController` function sets a global `rewards_distributor` state variable, allowing any token manager to set the rewards distributor that will be used by all tokens. There should be a rewards distributor for each token instead of a single global distributor.",
            "severity": "Undetermined",
            "contract": "FraxUnifiedFarmTemplate",
            "function": "setGaugeController",
            "lineNumber": "N/A"
        }
    ]
}