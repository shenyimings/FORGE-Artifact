{
    "path": "./Audit_Reports_2024/Spearbit/Porter-Spearbit-Security-Review.pdf",
    "project_info": {
        "url": "https://github.com/porter-finance/v1-core/tree/985fb85f03917cb48c85259c53af89ee36a8521e",
        "commit_hash": "985fb85f03917cb48c85259c53af89ee36a8521e",
        "address": "0x0000000000000000000000000000000000000000",
        "is_exists": true,
        "project_path": "Experiments/contracts/Porter-Spearbit-Security-Review/v1-core"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Verify amount is greater than 0 to avoid unnecessarily safeTransfer() calls",
            "description": "Implement a check to make sure `amount > 0` to avoid unnecessary `safeTransfer()` calls.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Improve checks for token allow-list",
            "description": "The BondFactory contract has two enabled allow-lists by default, which require the team\u2019s approval for issuers and tokens to create bonds. However, the screening process was not properly defined before the assessment.",
            "severity": "Informational",
            "contract": "BondFactory.sol",
            "function": "N/A",
            "lineNumber": "L93"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Incorrect revert message",
            "description": "The error description `error BondBeforeGracePeriodOrPaid()` is incorrect and should be changed to `BondBeforeGracePeriodAndNotPaid()`. Also, correct the related Natspec description.",
            "severity": "Informational",
            "contract": "Bond.sol",
            "function": "N/A",
            "lineNumber": "L81"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Non-existent bonds naming/symbol restrictions",
            "description": "The issuer can define any name and symbol during bond creation without enforcement or construction by the contract, potentially leading to abusive or misleading names.",
            "severity": "Informational",
            "contract": "BondFactory.sol",
            "function": "N/A",
            "lineNumber": "L93"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Needles variable initialization for default values",
            "description": "uint256 variables are initialized to a default value of zero per Solidity docs. Setting a variable to the default value is unnecessary.",
            "severity": "Informational",
            "contract": "Bond.sol",
            "function": "N/A",
            "lineNumber": "L333"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Deflationary payment tokens are not handled in the pay() function",
            "description": "The pay() function does not support rebasing/deflationary/inflationary payment tokens whose balance changes during transfers or over time.",
            "severity": "Informational",
            "contract": "Bond.sol",
            "function": "pay()",
            "lineNumber": "L145"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Rebasing/Inflation/Deflation Reward Tokens",
            "description": "The pay() function does not support rebasing/deflationary/inflationary payment tokens whose balance changes during transfers or over time.",
            "severity": "Informational",
            "contract": "Bond.sol",
            "function": "pay()",
            "lineNumber": "L145"
        }
    ]
}