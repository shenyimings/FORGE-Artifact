{
    "path": "./Audit_Reports_2024/Spearbit/Morpho-Spearbit-Security-Review.pdf",
    "project_info": {
        "url": "https://github.com/morpho-labs/morpho-contracts",
        "commit_hash": "a861d50597ae047640727fd63afc3c3a9b0e1cbc",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/Morpho-Spearbit-Security-Review/morpho-contracts"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Wrong P2P exchange rate calculation",
            "description": "_p2pDelta is divided by _poolIndex and multiplied by _p2pRate , nevertheless it should have been multiplied by _poolIndex and divided by _p2pRate to compute the correct share of the delta.",
            "severity": "Critical Risk",
            "contract": "MarketsManagerForAave.sol",
            "function": "_computeNewP2PExchangeRate",
            "lineNumber": "L436"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "MatchingEngineForAave is using the wrong totalSupply in updateBorrowers",
            "description": "The NDS value used by MatchingEngineForAave when calling DoubleLinkedList.insertSorted in both updateBorrowers and updateSuppliers can cause performance issues and potential DOS attacks.",
            "severity": "Medium Risk",
            "contract": "PositionsManagerForAaveGettersSetters",
            "function": "updateBorrowers",
            "lineNumber": "L40-L43"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "RewardsManagerAave does not verify token addresses",
            "description": "Aave has 3 different types of tokens: aToken, stable debt token and variable debt token. The public `accrueUserUnclaimedRewards` function allows passing arbitrary token addresses for which to accrue user rewards. Current code assumes that if the token is not the variable debt token, then it must be the aToken, and uses the user\u2019s supply balance for the reward calculation.",
            "severity": "Critical Risk",
            "contract": "RewardsManagerForAave.sol",
            "function": "accrueUserUnclaimedRewards",
            "lineNumber": "L145-L147"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "FullMath requires overflow behavior",
            "description": "UniswapV3\u2019s `FullMath.sol` is copied and migrated from an old solidity version to version 0.8 which reverts on overflows but the old `FullMath` relies on the implicit overflow behavior.",
            "severity": "High Risk",
            "contract": "FullMath",
            "function": "N/A",
            "lineNumber": "L2"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Morpho\u2019s USDT mainnet market can end up in broken state",
            "description": "An attacker can cause Morpho's USDT mainnet market to end up in a broken state by repaying 1000 USDT on Morpho when the contract's debt balance is only 999, leaving an approval of 1 USDT remaining.",
            "severity": "High Risk",
            "contract": "N/A",
            "function": "_repayERC20ToPool/_supplyERC20ToPool",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Wrong reserve factor computation on P2P rates",
            "description": "The real reserve factor should apply only on the spread so you\u2019re right that this formula is wrong and needs to be updated. a + (1/2 +- f)(b-a) where f is the reserve factor.",
            "severity": "High Risk",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "SwapManager assumes Morpho token is token0 of every token pair",
            "description": "The SwapManager contract incorrectly assumes that the Morpho token is always token0 in every token pair.",
            "severity": "N/A",
            "contract": "SwapManagerUniV3, SwapManagerUniV2, SwapManagerUniV3OnEth",
            "function": "N/A",
            "lineNumber": "L23, L25, L28, L29, L33, L34"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "_newNDS min/max value should be accurately validated by the team",
            "description": "The _newNDS value influences the maximum number of cycles that DDL.insertSorted can do and should be accurately validated to avoid transaction failure or incorrect user placement in the list.",
            "severity": "Medium Risk",
            "contract": "PositionsManagerForAaveGettersSetters.sol",
            "function": "updateBorrowers/updateSuppliers",
            "lineNumber": "L40-L43"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "_newNDS set to 0 would skip all theMatchingEngineForAave match/unmatch supplier/borrower functions if the user does not specify a custom maxGas",
            "description": "If _newNDS is set to 0, it would skip all MatchingEngineForAave match/unmatch supplier/borrower functions unless a custom maxGas is specified by the user.",
            "severity": "Medium Risk",
            "contract": "PositionsManagerForAaveGettersSetters.sol",
            "function": "updateBorrowers/updateSuppliers",
            "lineNumber": "40-43"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Unvalidated _poolTokenAddress Handling",
            "description": "The `_poolTokenAddress` is not checked to be handled by `PositionsManagerForAave` and `MarketsManagerForAave`, which could lead to a `poolToken` starting in a paused state.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "DDL should prevent inserting items with 0 value",
            "description": "The DDL library should verify that the inserted value is greater than 0 to prevent adding users with empty values, which may potentially cause the list and as a result the overall protocol to underperform.",
            "severity": "Low Risk",
            "contract": "DoubleLinkedList.sol",
            "function": "insertSorted",
            "lineNumber": "L83"
        }
    ]
}