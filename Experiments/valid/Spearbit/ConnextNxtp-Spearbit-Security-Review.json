{
    "path": "./Audit_Reports_2024/Spearbit/ConnextNxtp-Spearbit-Security-Review.pdf",
    "project_info": {
        "url": "https://github.com/connext/nxtp",
        "commit_hash": "32a0370edc917cc45c231565591740ff274b5c05",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/ConnextNxtp-Spearbit-Security-Review/nxtp"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "No checks/constraints against the `_representation`",
            "description": "The function does not perform checks or constraints on the `_representation`, allowing dirty bytes to manipulate the `type` section of the view.",
            "severity": "Low Risk",
            "contract": "TypedMemView.sol",
            "function": "unsafeBuildUnchecked",
            "lineNumber": "L323-L324, L329-L330"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Incorrect Comment in `dequeueVerified`",
            "description": "The comment in `dequeueVerified` mentions that when no verified items are found in the queue, then `last == first`. But this is not true since the loop condition is `last >= first` and the loop only terminates (not considering the `break`) when `last == first - 1`.",
            "severity": "Low Risk",
            "contract": "Queue.sol",
            "function": "dequeueVerified()",
            "lineNumber": "L80"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ],
                "3": [
                    "CWE-680"
                ]
            },
            "title": "Dirty bytes in `_loc` and `_len` can override other values when packing a typed memory view in `unsafeBuildUnchecked`",
            "description": "For a `TypedMemView`, the location and the length are supposed to occupy `12` bytes (`uint96`), but the type used for these values for the input parameters for `unsafeBuildUnchecked` is `uint256`. This would allow those values to carry dirty bytes and when the following calculations are performed: `_loc` can potentially manipulate the `type` section of the view and `_len` can potentially manipulate both the `_loc` and the `_type` section.",
            "severity": "Low Risk",
            "contract": "TypedMemView",
            "function": "unsafeBuildUnchecked",
            "lineNumber": "L323-L324, L329-L330"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Hard-coded Precompile Addresses Not Verified",
            "description": "To use `sha2`, `hash160` and `hash256` of `TypedMemView` the hard-coded precompile addresses would need to be checked to make sure they return the corresponding hash values.",
            "severity": "Low Risk",
            "contract": "TypedMemView",
            "function": "N/A",
            "lineNumber": "646, 668-669, 685-686"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-391"
                ]
            },
            "title": "`sha2`, `hash160` and `hash256` of `TypedMemView.sha2` do not clear the memory after calculating the hash",
            "description": "When a call to the precompile contract at `address(2)` (or at `address(3)`) is made, the returned value is placed at the slot pointed by the free memory pointer and then placed on the stack. The free memory pointer is not incremented to account for this used memory position nor the code tries to clean this memory slot of 32 bytes.",
            "severity": "Low Risk",
            "contract": "TypedMemView",
            "function": "N/A",
            "lineNumber": "646, 662, 679"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-436"
                ],
                "3": [
                    "CWE-115"
                ]
            },
            "title": "Fee on transfer token support",
            "description": "It seems that only the `addLiquidity` function is currently supporting the fee on transfer token. All operations like swapping are prohibiting the fee on transfer token.",
            "severity": "Low Risk",
            "contract": "SwapUtils.sol",
            "function": "N/A",
            "lineNumber": "902-905"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Fee on transfer tokens can stuck the transaction",
            "description": "Consider the scenario where a user makes an xcall with amount A of token X with calldata C1, but before the amount can be transferred on the destination domain, token X introduces a fee on transfer. This can cause the transaction to fail if the IXReceiver has an amount check.",
            "severity": "Low Risk",
            "contract": "AssetLogic.sol",
            "function": "_handleExecuteTransaction",
            "lineNumber": "L79"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Initial Liquidity Provider can trick the system",
            "description": "N/A",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "36"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Ensure non-zero local asset in `_xcall()`",
            "description": "Make sure the value of `_params.normalizedIn` is not zero when invoking `_xcall()` to avoid potential issues.",
            "severity": "Gas Optimization",
            "contract": "BridgeFacet",
            "function": "_xcall()/_xcallIntoLocal()",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Incompatible Stable Swap Pools with Tokens of Varying Decimals",
            "description": "The stable swap functionality used in Connext calculates and stores token precision relative to pool precision, which may become inaccurate if a token's decimals change in the future.",
            "severity": "Low Risk",
            "contract": [
                "TokenFacet",
                "SwapAdminFacet",
                "StableSwap",
                "SwapUtilsExternal"
            ],
            "function": [
                "N/A"
            ],
            "lineNumber": [
                "164",
                "399",
                "140",
                "143",
                "169",
                "100",
                "407"
            ]
        }
    ]
}