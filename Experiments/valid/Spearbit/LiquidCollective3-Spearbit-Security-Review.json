{
    "path": "./Audit_Reports_2024/Spearbit/LiquidCollective3-Spearbit-Security-Review.pdf",
    "project_info": {
        "url": "https://github.com/liquid-collective/liquid-collective-protocol",
        "commit_hash": "3a23e607c2c45334fc7fa37032ad389b4fa6dbae",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/LiquidCollective3-Spearbit-Security-Review/liquid-collective-protocol"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-665"
                ],
                "3": [
                    "CWE-908"
                ],
                "4": [
                    "CWE-457"
                ]
            },
            "title": "Invariants are not enforced for stopped validator counts",
            "description": "_setStoppedValidatorCounts does not enforce invariants on stopped validator counts, allowing oracle members to report values that break these invariants and manipulate preExitingBalance value and activeCount for exiting validators picking algorithm.",
            "severity": "Medium Risk",
            "contract": "OperatorsRegistry.1.sol",
            "function": "_setStoppedValidatorCounts",
            "lineNumber": "L419-L440"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "_pickNextValidatorsToExitFromActiveOperators uses the wrong index to query stopped validator count for operators",
            "description": "In `_pickNextValidatorsToExitFromActiveOperators`, `operators` does not necessarily have the same order as the actual `OperatorsV2` 's operators, since the ones that don't have `_hasExitableKeys` will be skipped. And so when querying the stopped validator counts, one should not use the `idx` in the cached operator's array, but the cached `index` of this array element.",
            "severity": "Critical Risk",
            "contract": "OperatorsRegistry.1.sol",
            "function": "_pickNextValidatorsToExitFromActiveOperators",
            "lineNumber": "L628"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Oracles' reports votes are not stored in storage",
            "description": "The purpose of `Oracle.1.sol` `setConsensusLayerData` function is to facilitate the reporting and quorum of oracles. However, there is an issue with the current implementation as `ReportVariants.get()` returns a memory array instead of a storage array, resulting in an increase in votes that will not be stored at the end of the transaction and preventing `setConsensusLayerData` from being called.",
            "severity": "Critical Risk",
            "contract": "Oracle.1.sol",
            "function": "ReportVariants.get()",
            "lineNumber": "L268"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-391"
                ]
            },
            "title": "User's LsETH might be locked due to out-of-gas error during recursive calls",
            "description": "If a redeem request is satisfied by many small chunks of withdrawal events and recursion depth becomes large, an out-of-gas error can occur, locking the user's LsETH.",
            "severity": "Medium Risk",
            "contract": "RedeemManager",
            "function": "_claimRedeemRequest",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Allowed users can directly transfer their share to `RedeemManager`",
            "description": "An allowed user can directly transfer its shares to the `RedeemManager` without requesting a redeem. This would cause the withdrawal stack to grow, since the redeem demand increases.",
            "severity": "Medium Risk",
            "contract": "SharesManager.1.sol",
            "function": "N/A",
            "lineNumber": "L105, L119"
        }
    ]
}