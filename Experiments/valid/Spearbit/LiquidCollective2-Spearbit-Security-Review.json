{
    "path": "./Audit_Reports_2024/Spearbit/LiquidCollective2-Spearbit-Security-Review.pdf",
    "project_info": {
        "url": "https://github.com/liquid-collective/liquid-collective-protocol",
        "commit_hash": "7693929ce487f2467f0558dd47e6f3ff59399121",
        "address": "N/A",
        "is_exists": true,
        "project_path": "Experiments/contracts/LiquidCollective2-Spearbit-Security-Review/liquid-collective-protocol"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Account owner of the minted TLC tokens must call `delegate` to own vote power of initial minted tokens",
            "description": "The `_account` owner of the minted TLC tokens must remember to call `tlcToken.delegate(accountOwner)` to auto-delegate to itself, otherwise it will have zero voting power.",
            "severity": "Low Risk",
            "contract": "TLC.1.sol",
            "function": "N/A",
            "lineNumber": "L20"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-191"
                ]
            },
            "title": "Gas Optimization",
            "description": "Because of the `if` statement, it is impossible for `vestedAmount - releasedAmount` to underflow, thus allowing the usage of the `unchecked` block to save a bit of gas.",
            "severity": "Gas Optimization",
            "contract": "ERC20VestableVotesUpgradeable.1.sol",
            "function": "N/A",
            "lineNumber": "354-356"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-191"
                ]
            },
            "title": "Consider using `unchecked` block to save some gas",
            "description": "Because of the `if` statement, it is impossible for `vestedAmount - releasedAmount` to underflow, thus allowing the usage of the `unchecked` block to save a bit of gas.",
            "severity": "Gas Optimization",
            "contract": "ERC20VestableVotesUpgradeable.1.sol",
            "function": "N/A",
            "lineNumber": "L354-L356"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Creation of a vesting schedule that could release zero tokens after a period has passed",
            "description": "The creation of a vesting schedule with a cliff duration that is not divisible by the period can lead to a situation where no tokens are released after the period has passed.",
            "severity": "Informational",
            "contract": "ERC20VestableVotesUpgradeable.1.sol",
            "function": "_createVestingSchedule",
            "lineNumber": "L200-L202"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-391"
                ]
            },
            "title": "Checks-Effects-Interactions best practice is violated in CoverageFund",
            "description": "We were not able to find any concrete instances of harmful reentrancy attack vectors in this contract, but it's recommended to follow the Checks-effects-interactions pattern anyway.",
            "severity": "Informational",
            "contract": "CoverageFund.1.sol",
            "function": "N/A",
            "lineNumber": "L35,L43"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "River contract allows setting an empty metadata URI",
            "description": "The current implementation of `River.setMetadataURI` and `MetadataURI.set` both allow the current value of the metadata URI to be updated to an empty string.",
            "severity": "Informational",
            "contract": "River.1.sol, MetadataURI.sol",
            "function": "setMetadataURI, set",
            "lineNumber": "L181-L184, L33-L44"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Consider requiring that the `_cliffDuration` is a multiple of `_period`",
            "description": "The variable names and documentation are ambiguous, and it's recommended to require `_cliffDuration` to be a multiple of `_period` for better clarity.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Add documentation about the scenario where a vesting schedule can be created in the past",
            "description": "In the current implementation of `_createVestingSchedule` function, there is no check for the `_start` value. This means that the creator of a vesting schedule could create a schedule that starts in the past.",
            "severity": "Informational",
            "contract": "ERC20VestableVotesUpgradeable.1.sol",
            "function": "_createVestingSchedule",
            "lineNumber": "200-202"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Creation of vesting schedules that have already ended and cannot be revoked",
            "description": "In ERC20VestableVotesUpgradeableV1 createVestingSchedule, allowing creation of vesting schedules with a past _start also influences the behavior of _revokeVestingSchedule.",
            "severity": "Informational",
            "contract": "ERC20VestableVotesUpgradeableV1",
            "function": "_createVestingSchedule",
            "lineNumber": "L200-L202"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "getVestingSchedule returns misleading information if the vesting token creator revokes",
            "description": "The getVestingSchedule function returns the information about the created vesting schedule but does not update correctly when the creator revokes the schedule, leading to displaying wrong information.",
            "severity": "Informational",
            "contract": "ERC20VestableVotesUpgradeable.1",
            "function": "getVestingSchedule()",
            "lineNumber": "71-73"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-191"
                ]
            },
            "title": "Denial of Service (DOS) via Vesting Schedule Escrow",
            "description": "A malicious user can DOS a vesting schedule by sending only 1 wei of TLC to the vesting escrow address, causing an underflow error and allowing the user to gain the whole vested amount plus the extra amount sent.",
            "severity": "High",
            "contract": "N/A",
            "function": "releaseVestingSchedule() and revokeVestingSchedule()",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Coverage funds might be pulled not only for the purpose of covering slashing losses",
            "description": "Funds might be pulled from CoverageFundV1 to the River contract through setConsensusLayerData to cover the losses and keep the share price stable, but it is possible that these funds will be pulled not only in emergency events.",
            "severity": "Medium Risk",
            "contract": "OracleManager.1.sol",
            "function": "setConsensusLayerData",
            "lineNumber": "L108-L113"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Consider preventing `CoverageFundAddress` to be set as `address(0)`",
            "description": "Both functions `_newCoverageFund` and `River.setCoverageFund` do not revert when the address parameter is equal to `address(0)`. If the Coverage Fund address is empty, the `River._pullCoverageFunds` function will return earlier and will not pull any coverage fund.",
            "severity": "Medium Risk",
            "contract": "River.1.sol/CoverageFundAddress.sol",
            "function": "_newCoverageFund/River.setCoverageFund",
            "lineNumber": "176/21"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ],
                "3": [
                    "CWE-302"
                ]
            },
            "title": "`CoverageFund.initCoverageFundV1` might be front-runnable",
            "description": "Initializing a contract is a 2 phase process where the first call is the actual deployment and the second call is a call to the `init` function itself. From our experience with the repository, the upgradeable contracts deployment scripts are using the `TUPProxy` correctly, however in that case we were not able to find the deployment script for `CoverFund`, so we decided to raise this point to make sure you are following the previous policy also for this contract.",
            "severity": "Low Risk",
            "contract": "CoverageFund.1.sol",
            "function": "initCoverageFundV1",
            "lineNumber": "L21"
        }
    ]
}