{
    "path": "./Audit_Reports_2024/ImmuneBytes/Geg Finance - Final Audit Report.pdf",
    "project_info": {
        "url": "https://github.com/GEG-Finance/geg-app",
        "commit_hash": "062cc6268e4533549cc38b264d62c17c3874a6aa",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Floating Pragma Issue. Compiler version is not fixed",
            "description": "The pragma solidity version of contracts Bank.sol, Gerc20.sol, Gether.sol, OracleV1.sol, Queue.sol has not been fixed to a specific solidity version.",
            "severity": "High",
            "contract": "Bank.sol, Gerc20.sol, Gether.sol, OracleV1.sol, Queue.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Absence of Zero Address Validation",
            "description": "The contract includes a function that updates an imperative address, but no Zero Address Validation is implemented on the following functions while updating the address state variables of the contract.",
            "severity": "Low",
            "contract": "Oraclev1",
            "function": "setToken",
            "lineNumber": "118"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Multiplication is being performed on the result of Division",
            "description": "During the automated testing of the Bankable contract, it was found that the _applyFine function in the contract is performing multiplication on the result of a Division. Integer Divisions in Solidity might truncate. Moreover, this performing division before multiplication might lead to loss of precision.",
            "severity": "Medium",
            "contract": "Bankable",
            "function": "_applyFine",
            "lineNumber": "268"
        }
    ]
}