{"path": "./Audit_Reports_2024/PeckShield/PeckShield-Audit-Report-VeChain-v1.0.pdf", "project_info": {"url": "N/A", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"], "2": ["CWE-1339"]}, "title": "Improved Precision By Multiplication-Before-Division", "description": "The lack of float support in Solidity may introduce precision loss when both multiplication and division are involved, particularly in the calculateVTHO() function of StakingModel contract.", "severity": "Low", "contract": "StakingModel", "function": "calculateVTHO()", "lineNumber": "91"}, {"id": 1, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Redundant Check in Modifier checkItemBalance()", "description": "There is a redundant check on 'require (vetBalance(msg.sender) >= wad)' in the 'withdraw()' routine because there is the same validity check in the 'removeVET()' function.", "severity": "Informational", "contract": "VVET9", "function": "withdraw()", "lineNumber": "29"}, {"id": 2, "category": {"1": ["CWE-691"], "2": ["CWE-362"]}, "title": "approve()/transferFrom() Race Condition", "description": "There is a known race condition issue regarding `approve()` / `transferFrom()` where a user's intention of restricting the spender to a new amount can be broken.", "severity": "Low", "contract": "VVET9", "function": ["approve()", "transferFrom()"], "lineNumber": "44-48, 37-43"}, {"id": 3, "category": {"1": ["CWE-664"], "2": ["CWE-496"]}, "title": "Suggested Event Generation For Allowance Changes", "description": "The event generation suggestion is made to improve allowance changes tracking by emitting an Approval event on calls to transferFrom(). This allows applications to reconstruct the allowance for all accounts just by listening to the events.", "severity": "Informational", "contract": "VVET9", "function": "transferFrom()", "lineNumber": "32-39"}, {"id": 4, "category": {"1": ["CWE-664"], "2": ["CWE-487"]}, "title": "Declaration of Variable with Unnecessarily Wide Scope", "description": "Declaring a variable with an unnecessarily wide scope can lead to unintended behavior and potential security vulnerabilities.", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Integer Overflow or Wraparound", "description": "N/A", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-284"], "2": ["CWE-269"]}, "title": "Improper Privilege Management", "description": "The contract has improper privilege management which can lead to unauthorized access or modification of sensitive data.", "severity": "High", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-691"], "2": ["CWE-362"]}, "title": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')", "description": "There is a known race condition issue regarding approve() / transferFrom(). Specifically, when a user intends to reduce the allowed spending amount previously approved from, say, 10 VVETs to 1 VVET. The previously approved spender might race to transfer the amount the user initially approved (the 10 VVETs) and then additionally spend the new amount the user just approved (1 VVET).", "severity": "Low", "contract": "VVET9", "function": "approve()", "lineNumber": "44-48"}]}