{
    "path": "./Audit_Reports_2024/PeckShield/PeckShield-Audit-Report-StoneV2-v1.0.pdf",
    "project_info": {
        "url": "https://github.com/stonedefi/stone_defi_contract_v2/tree/bb0be57",
        "commit_hash": "bb0be57",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Accommodation of Non-ERC20-Compliant Tokens",
            "description": "The `WETHGateway` contract does not properly handle non-ERC20-compliant tokens, which may cause issues if not handled correctly.",
            "severity": "Low",
            "contract": "WETHGateway",
            "function": "transfer()",
            "lineNumber": "128"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-391"
                ]
            },
            "title": "Generation of Meaningful Events For Important State Changes",
            "description": "In Ethereum, events are used to record runtime dynamics and are accessible to external analytics and reporting tools. The SharerV4 contract lacks emitting important events that reflect important state changes, specifically when governance is being updated in SharerV4::acceptGovernance().",
            "severity": "Informational",
            "contract": "SharerV4",
            "function": "acceptGovernance()",
            "lineNumber": "497"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Duplicate Pool Detection and Prevention",
            "description": "The addition of a new pool does not perform necessary sanity checks to prevent a new pool with a duplicate token from being added.",
            "severity": "Low",
            "contract": "Staking",
            "function": "add()",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Timely massUpdatePools During Pool Weight Changes",
            "description": "The reward pools can be dynamically added via `add()` and the weights of supported pools can be adjusted via `set()`. When analyzing the pool weight update routine `set()`, we notice the need of timely invoking `massUpdatePools()` to update the reward distribution before the new pool weight becomes effective.",
            "severity": "Low",
            "contract": "Staking",
            "function": "set()",
            "lineNumber": "108-115"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Trust Issue of Admin Keys",
            "description": "The `StoneDefi` protocol has a privileged `owner` account that plays a critical role in governing and regulating the protocol-wide operations.",
            "severity": "Medium",
            "contract": "Staking",
            "function": "set()",
            "lineNumber": "109"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-1286"
                ]
            },
            "title": "Removal of Unused Code",
            "description": "Unused code or unnecessary redundancies can be safely removed from contracts such as `StrategyLenderYieldOptimiser` and `StoneVaults`, for example, the function `getPriceStoneVault()` contains unreachable code with `revert()` after the `return` statement.",
            "severity": "Informational",
            "contract": "StoneVaults",
            "function": "getPriceStoneVault()",
            "lineNumber": "57-63"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Staking Incompatibility With Deflationary Tokens",
            "description": "In the StoneDefi protocol, the Staking contract is designed to take users\u2019 assets and deliver rewards depending on their share, but it may not work correctly with deflationary tokens.",
            "severity": "Undetermined",
            "contract": "Staking",
            "function": [
                "deposit()",
                "withdraw()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-841"
                ]
            },
            "title": "Suggested Adherence Of Checks-Effects-Interactions Pattern",
            "description": "The adherence of `checks-effects-interactions` principle is violated in the `withdraw()` function, which externally calls a token contract to transfer assets and starts interacting with the external contract before effecting the update.",
            "severity": "Low",
            "contract": "Staking",
            "function": "withdraw()",
            "lineNumber": "244"
        }
    ]
}