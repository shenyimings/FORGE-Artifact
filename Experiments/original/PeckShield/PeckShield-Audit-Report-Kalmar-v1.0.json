{"path": "./Audit_Reports_2024/PeckShield/PeckShield-Audit-Report-Kalmar-v1.0.pdf", "project_info": {"url": "N/A", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"]}, "title": "Possible Costly LPs From Improper Bank Initialization", "description": "In the `Kalmar` protocol, the `Bank` contract is an essential one that manages current debt positions and mediates the access to various `workers` (or `Goblins`). Meanwhile, the `Bank` contract allows liquidity providers to provide liquidity so that lenders can earn high interest and the lending interest rate comes from leveraged yield farmers. While examining the share calculation when lenders provide liquidity (via `deposit()`), we notice an issue that may unnecessarily make the `Bank` -related pool token extremely expensive and bring hurdles (or even causes loss) for later liquidity providers.", "severity": "Medium", "contract": "Bank", "function": "deposit()", "lineNumber": "104"}, {"id": 1, "category": {"1": ["CWE-693"], "2": ["CWE-807"]}, "title": "Potential Sandwich Attacks For Reduced Returns", "description": "The reinvest() function in MasterChefGoblin contract is vulnerable to sandwich attacks, which can lead to reduced returns.", "severity": "Low", "contract": "MasterChefGoblin", "function": "reinvest()", "lineNumber": "115-124"}]}