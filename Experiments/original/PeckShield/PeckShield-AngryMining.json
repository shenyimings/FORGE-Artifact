{
    "path": "./Audit_Reports_2024/PeckShield/PeckShield-AngryMining.pdf",
    "project_info": {
        "url": "N/A",
        "commit_hash": "N/A",
        "address": "N/A"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Duplicate Pool Detection and Prevention",
            "description": "The `addPool()` function does not perform necessary sanity checks to prevent a new pool with a duplicate token from being added.",
            "severity": "Low",
            "contract": "AngryMining",
            "function": "addPool()",
            "lineNumber": "103-104"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-233"
                ]
            },
            "title": "Improved Validation Of Function Arguments",
            "description": "In the `AngryMining` contract, the `addBonusPeriod()` function is used to add a bonus period and give additional rewards from `_beginBlock` to `_endBlock`. To elaborate, we show below the related code snippet.",
            "severity": "Low",
            "contract": "AngryMining",
            "function": "addBonusPeriod()",
            "lineNumber": "90-93"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Recommended Explicit Pool Validity Checks",
            "description": "The current implementation relies on implicit bound-checks of arrays to ensure pool index stays within array range, instead it is recommended to make explicit sanity checks by introducing a new modifier to validate given pools.",
            "severity": "Informational",
            "contract": "AngryMining",
            "function": "depositLP()",
            "lineNumber": "237-245"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Trust Issue of Admin Keys",
            "description": "In the AngryMining protocol, there is a special administrative account, i.e., executor. This executor account plays a critical role in governing and regulating the system-wide operations. The privileged account could even set the _allocPoint to 0, which leads to no rewards received from the related LP pool.",
            "severity": "Medium",
            "contract": "AngryMining",
            "function": "changePool()",
            "lineNumber": "120-128"
        }
    ]
}