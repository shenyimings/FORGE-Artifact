{"path": "./Audit_Reports_2024/PeckShield/PeckShield-Audit-Report-xRaise-v1.0.pdf", "project_info": {"url": "N/A", "commit_hash": "a431c87", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-664"], "2": ["CWE-221"], "3": ["CWE-223"]}, "title": "Incomplete getUserWalletInfo() Logic in AccountFactoryDiamond", "description": "The `getUserWalletInfo()` function in `AccountFactoryDiamond` contract returns incomplete wallet information, specifically an empty `devices` array.", "severity": "Low", "contract": "AccountFactoryDiamond", "function": "getUserWalletInfo()", "lineNumber": "68-85"}, {"id": 1, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Duplicate Session Avoidance in SessionFacet", "description": "The `SessionFacet` contract does not detect and block possible session duplicates when creating a new session.", "severity": "Low", "contract": "SessionFacet", "function": ["createSession()", "deleteSession()"], "lineNumber": "54, 37-50, 61-70"}, {"id": 2, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1287"]}, "title": "Accommodation of Non-ERC20-Compliant Tokens", "description": "The `transfer` function does not comply with the ERC20 standard, allowing transactions to proceed successfully without being reverted even when the check fails.", "severity": "Low", "contract": "Multiple Contracts", "function": "transfer()", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-703"], "2": ["CWE-755"]}, "title": "Revisited withdrawSubscriptions() Logic in SubscriptionFacet", "description": "The implementation of the `withdrawSubscriptions()` routine in `SubscriptionFacet` should be revisited to properly handle subscription withdrawal.", "severity": "Medium", "contract": "SubscriptionFacet", "function": "withdrawSubscriptions()", "lineNumber": "100-108"}, {"id": 4, "category": {"1": ["CWE-682"]}, "title": "Revisited Modifiers in SocialRecoveryFacet", "description": "The modifiers 'onlyUserGuardian', 'onlyExternalGuardian', and 'onlyGuardian' can be improved. The first two modifiers share the same code, while the last modifier always yields false.", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-284"], "2": ["CWE-269"], "3": ["CWE-266"]}, "title": "Trust Issue of Admin Keys", "description": "In the `xRaise` protocol, there is a privileged account (`owner`). This account plays critical roles in governing and regulating the protocol-wide operations (e.g., configure protocol parameters and upgrade protocol implementations). Our analysis shows that the privileged account needs to be scrutinized.", "severity": "Medium", "contract": "AccountFactoryDiamond", "function": "manageAllowedGuardians", "lineNumber": "58"}]}