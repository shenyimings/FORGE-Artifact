{
    "path": "./Audit_Reports_2024/PeckShield/PeckShield-Audit-Report-Paraluni-v1.0.pdf",
    "project_info": {
        "url": "https://gitlab.com/maven42/paraluni_contracts",
        "commit_hash": "N/A",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Possible Overflow Prevention With SafeMath",
            "description": "The addition of `_totalClaimed[msg.sender][pooltype]` to `pending.sub(fee)` is not guarded against possible overflow in the `_claim()` function, and it's recommended to use `SafeMath` for safe math operations.",
            "severity": "Informational",
            "contract": "MasterChef",
            "function": "_claim()",
            "lineNumber": "534"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Duplicate Pool Detection and Prevention",
            "description": "The `add()` function in the `MasterChef` contract does not perform necessary sanity checks to prevent a new pool with a duplicate token from being added.",
            "severity": "Low",
            "contract": "MasterChef",
            "function": "add()",
            "lineNumber": "271-272"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-436"
                ]
            },
            "title": "Incompatibility With Deflationary Tokens",
            "description": "The ParaSupply contract uses safeTransferFrom() or safeTransfer() routines to transfer assets into or out of its pool, which works as expected with standard ERC20 tokens but may not be compatible with deflationary tokens.",
            "severity": "Low",
            "contract": "ParaSupply",
            "function": [
                "supplyFlex()",
                "withdrawFlex()"
            ],
            "lineNumber": "134-140, 162"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Trust Issue of Admin Keys",
            "description": "In the Paraluni protocol, there is a special administrative account, i.e., owner/admin, which plays a critical role in governing and regulating the protocol-wide operations. It also has the privilege to control or govern the flow of assets managed by this protocol.",
            "severity": "Medium",
            "contract": "ParaTokenNew",
            "function": "_setMinerAddress()",
            "lineNumber": "56-58"
        }
    ]
}