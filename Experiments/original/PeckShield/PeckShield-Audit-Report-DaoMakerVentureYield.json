{
    "path": "./Audit_Reports_2024/PeckShield/PeckShield-Audit-Report-DaoMakerVentureYield.pdf",
    "project_info": {
        "url": "N/A",
        "commit_hash": "N/A",
        "address": "N/A"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1068"
                ]
            },
            "title": "Inconsistency Between Document and Implementation",
            "description": "There are a few misleading comments embedded among lines of solidity code, which bring unnecessary hurdles to understand and/or maintain the software.",
            "severity": "Informational",
            "contract": "Multiple Contracts",
            "function": "stakeStartBonusShares()",
            "lineNumber": "78, 384-388"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Suggested Adherence Of Checks-Effects-Interactions Pattern",
            "description": "A common coding best practice in Solidity is the adherence of `checks-effects-interactions` principle. This principle is effective in mitigating a serious attack vector known as `re-entrancy`. Specifically, it first calls a function in the vulnerable contract, but before the first instance of the function call is finished, second call can be arranged to re-enter the vulnerable contract by invoking functions that should only be executed once.",
            "severity": "Low",
            "contract": "Staking",
            "function": "stakeStart()",
            "lineNumber": "52"
        }
    ]
}