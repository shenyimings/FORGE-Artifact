{
    "path": "./Audit_Reports_2024/PeckShield/peckshield-audit-report-gatherdao-v1.0.pdf",
    "project_info": {
        "url": "N/A",
        "commit_hash": "N/A",
        "address": "N/A"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Incompatibility with Deflationary Tokens",
            "description": "The `GatherCore` contract does not account for deflationary tokens that charge fees for transfer or transferFrom operations, which may cause inconsistent internal asset balances.",
            "severity": "Low",
            "contract": "GatherCore",
            "function": "contributePoolCurrency()",
            "lineNumber": "40,47-54"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Suggested Adherence of Checks-Effects-Interactions",
            "description": "The `checks-effects-interactions` principle is violated in the `contributePoolCurrency()` function, which may lead to re-entrancy attacks.",
            "severity": "Informational",
            "contract": "GatherCore",
            "function": "contributePoolCurrency()",
            "lineNumber": "40"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-391"
                ]
            },
            "title": "Possible DoS Attack in Contribute()",
            "description": "In the `GatherCore` contract, the internal function `contribute()` updates the states regarding each user\u2019s contribution as well as the global states. However, those constraints create an attack surface for denial-of-services.",
            "severity": "Medium",
            "contract": "GatherCore",
            "function": "contribute()",
            "lineNumber": "56-62"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "Confused Deputy in contributeToPool()",
            "description": "In the GatherCore contract, there is a confused deputy issue in both contributePoolCurrency() and contributeToPool(). The functions collect assets before calling contribute() to update internal asset records without ensuring that the current pool is configured with the asset being sent.",
            "severity": "Critical",
            "contract": "GatherCore",
            "function": "contributeToPool()",
            "lineNumber": "35"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Out-of-gas Risks in distributeTokens()",
            "description": "The `distributeTokens()` function allows a privileged user to send out `erc20Token` to each contributor. However, the transaction to invoke this function is likely out-of-gas when `contributors.length` reaches 400.",
            "severity": "Low",
            "contract": "GatherCore",
            "function": "distributeTokens()",
            "lineNumber": "282-290"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Privileged Interfaces to Move Out Assets",
            "description": "The function `withdrawRandomERC20Token()` allows privileged users to transfer an arbitrary asset owned by `GatherCore` to the `poolOwner` in any `PoolState`. This can potentially mess up internal asset records.",
            "severity": "Informational",
            "contract": "GatherCore",
            "function": "withdrawRandomERC20Token()",
            "lineNumber": "338-347"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Unreachable Condition in distributeTokens()",
            "description": "An unreachable condition exists in `distributeTokens()` which can be optimized to reduce gas consumption.",
            "severity": "Informational",
            "contract": "GatherCore",
            "function": "distributeTokens()",
            "lineNumber": "290"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Redundant Variables and Operations",
            "description": "The `_poolOwner` variable in `GatherDAO::createPool()` is redundant as it always equals to `msg.sender`.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Duplicate Contributors Due to addAdmin()",
            "description": "In the `Admin` contract, the internal function `addAdmin()` allows the caller to add `_newAdmin` as one of the privileged users. Whenever a `_newAdmin` is added, three arrays would be updated: `contributorsInfo[]`, `contributors[]`, and `poolAdmins[]`. According to the current implementation, the `_newAdmin` would be added into the `contributors[]` array automatically with her related `contributorsInfo` updated. However, there\u2019s no sanity check to avoid an existing `_newAdmin` from being added into the `contributors[]` array.",
            "severity": "Low",
            "contract": "Admin",
            "function": "addAdmin()",
            "lineNumber": "38-39, 40"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Unable to Add/Remove Admins After Pool Initialization",
            "description": "There's no interface to add or remove an admin from a `Pool`. However, there're many cases that we might need to add or remove a privileged user after the initialization process.",
            "severity": "Informational",
            "contract": "Admin",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Logic Error in setPoolToRefunded()",
            "description": "Typo/logic error in setPoolToRefunded() when checking the pool state.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}