{
    "path": "./Audit_Reports_2024/PeckShield/PeckShield-Audit-Report-KaoyaSwap-v1.0.pdf",
    "project_info": {
        "url": "https://github.com/kaoya1125/contracts/tree/fe8c070e8bf62145ae96b54960e7cc5eea9a880c",
        "commit_hash": "fe8c070e8bf62145ae96b54960e7cc5eea9a880c",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-188"
                ]
            },
            "title": "Implicit Assumption Enforcement In AddLiquidity()",
            "description": "In the `KaoyaSwap` protocol, the `addLiquidity()` routine is provided to add `amountADesired` amount of `tokenA` and `amountBDesired` amount of `tokenB` into the pool as liquidity via the `UniswapV2Router02::addLiquidity()` routine.",
            "severity": "Low",
            "contract": "UniswapV2Router02",
            "function": "_addLiquidity()",
            "lineNumber": "481-497"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-665"
                ],
                "3": [
                    "CWE-908"
                ],
                "4": [
                    "CWE-457"
                ]
            },
            "title": "Revisited Logic Of Staking::clearUserDepositTime()",
            "description": "The `clearUserDepositTime()` routine has an improper implementation where the `result` variable is defined as `memory` rather than `storage`, resulting in the failure of the deposit time reset, allowing users to claim airdrop rewards repeatedly.",
            "severity": "High",
            "contract": "Staking",
            "function": "clearUserDepositTime()",
            "lineNumber": "420"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-684"
                ],
                "3": [
                    "CWE-440"
                ]
            },
            "title": "Potential Reentrancy Risk In MasterChef::deposit()",
            "description": "The deposit() function in the MasterChef contract has a potential reentrancy risk due to non-adherence to the checks-effects-interactions principle, which can lead to a malicious contract re-entering the vulnerable contract in a nested manner.",
            "severity": "Low",
            "contract": "MasterChef",
            "function": "deposit()",
            "lineNumber": "203"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Timely massUpdatePools During Pool Weight Changes",
            "description": "The reward pools can be dynamically added via `add()` and the weights of the supported pools can be adjusted via `set()`. When analyzing the pool weight update routine `set()`, we notice the need of timely invoking `massUpdatePools()` to update the reward distribution before the new pool weight becomes effective.",
            "severity": "Medium",
            "contract": "MasterChef",
            "function": "set()",
            "lineNumber": "117-123"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Incompatibility With Deflationary/Rebasing Tokens",
            "description": "The `MasterChef` contract does not handle deflationary/rebasing tokens properly, which may cause inconsistent asset balances.",
            "severity": "Low",
            "contract": "MasterChef",
            "function": "deposit()",
            "lineNumber": "195-200"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Duplicate Pool Detection And Prevention",
            "description": "The `MasterChef` contract does not perform necessary sanity checks to prevent a new pool with a duplicate token from being added.",
            "severity": "Low",
            "contract": "MasterChef",
            "function": "add()",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Trust Issue Of Admin Keys",
            "description": "Privileged `owner` account has critical role in governing and regulating protocol-wide operations, potentially allowing compromised account to modify sensitive system parameters.",
            "severity": "Medium",
            "contract": "Multiple Contracts",
            "function": [
                "setVault()",
                "take(token, amount)",
                "mint(uint256 amount)"
            ],
            "lineNumber": [
                "30-38",
                "40-47",
                "508"
            ]
        }
    ]
}