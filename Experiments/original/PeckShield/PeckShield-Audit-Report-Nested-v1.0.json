{
    "path": "./Audit_Reports_2024/PeckShield/PeckShield-Audit-Report-Nested-v1.0.pdf",
    "project_info": {
        "url": "https://github.com/NestedFinance/nested-token/tree/4179fdd",
        "commit_hash": "4179fdd",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-287"
                ]
            },
            "title": "Confused Spender Allowance In revokeGrant()",
            "description": "The `revokeGrant()` function may incorrectly give the grantor a wrong allowance due to authentication with `require` `(msg.sender == owner()|| msg.sender == grant.grantor)`.",
            "severity": "Medium",
            "contract": "ERC20Vestable",
            "function": "revokeGrant()",
            "lineNumber": "428"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Vesting Bypass With transferFrom()",
            "description": "The vesting schedule can be bypassed by allowing an approved spender to spend granted tokens without being subject to the vesting schedule.",
            "severity": "Medium",
            "contract": "ERC20Vestable",
            "function": "transferFrom()",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-237"
                ],
                "4": [
                    "CWE-238"
                ]
            },
            "title": "Accommodation Of Possible Non-Compliant ERC20 Tokens",
            "description": "The `approve()` and `transfer()` routines may not strictly follow the ERC-20 specification or have additional functionalities beyond the specification, causing issues if not handled properly.",
            "severity": "Low",
            "contract": "NestedFactory",
            "function": [
                "destroyForERC20()",
                "setMaxAllowance()"
            ],
            "lineNumber": "500-501"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Improved Sanity Checks For System/Function Parameters",
            "description": "DeFi protocols have system-wide parameters that can be dynamically configured and require rigorous sanity checks to avoid undesirable consequences.",
            "severity": "Low",
            "contract": "NestedBuybacker",
            "function": "setFeeSplitter,setBurnPart",
            "lineNumber": "56-58,64-65"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Possible Claim of Fee By Unrelated Entities",
            "description": "The `FeeSplitter` contract has a permissionless function `sendFeesWithRoyalties()` that allows anyone to add themselves as a share recipient and claim fees, potentially covering the cost of addition.",
            "severity": "Low",
            "contract": "FeeSplitter",
            "function": "sendFeesWithRoyalties()",
            "lineNumber": "153-157"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Possible Royalty OverCollection In sendFeesWithRoyalties()",
            "description": "The current fee collection logic can be improved as it does not take into account the VIP discount when collecting the _royaltiesTarget share, which may make internal accounting inaccurate.",
            "severity": "Medium",
            "contract": "NestedFactory",
            "function": "sendFeesWithRoyalties()",
            "lineNumber": "153-157"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Trust Issue of Admin Keys",
            "description": "In the `Nested` protocol, there is a privileged `owner` account that plays a critical role in governing and regulating the protocol-wide operations.",
            "severity": "Medium",
            "contract": "FeeSplitter",
            "function": "setShareholders()",
            "lineNumber": "282-289"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "Possible Drained Reserve From exchangeAndStoreTokens()",
            "description": "The `exchangeAndStoreTokens()` function allows users to provide arbitrary `callData` which can be exploited to transfer all funds out of the current reserve.",
            "severity": "Critical",
            "contract": "NestedFactory",
            "function": "exchangeAndStoreTokens()",
            "lineNumber": "211, 215"
        }
    ]
}