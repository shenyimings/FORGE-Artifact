{
    "path": "./Audit_Reports_2024/PeckShield/PeckShield-Audit-Report-Ribbon-v1.0.pdf",
    "project_info": {
        "url": "https://github.com/ribbon-finance/audit/tree/3254263",
        "commit_hash": "3254263",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Possible Costly Pool Tokens From Improper Initialization",
            "description": "The issue occurs when the pool is being initialized under the assumption that the current pool is empty, which may unnecessarily make the pool token extremely expensive and bring hurdles (or even causes loss) for later depositors.",
            "severity": "Medium",
            "contract": "RibbonCoveredCall",
            "function": "_deposit()",
            "lineNumber": "182-187"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Asset Consistency Check Between Instrument And Option",
            "description": "Inconsistency check between instrument and option assets in RibbonCoveredCall contract's setNextOption() function, which may lead to incorrect linking of options with instruments.",
            "severity": "Informational",
            "contract": "RibbonCoveredCall",
            "function": "setNextOption()",
            "lineNumber": "244-247"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Improved Sanity Checks For System Parameters",
            "description": "The update logic on fee parameters can be improved by applying more rigorous sanity checks to prevent undesirable consequences such as locking down user assets in the contract.",
            "severity": "Low",
            "contract": "RibbonCoveredCall/BaseVault",
            "function": "setWithdrawalFee()",
            "lineNumber": "154-156"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Possible Sandwich/MEV Attacks To Collect Most Profits",
            "description": "The `GammaAdapter` implementation has a `swapExercisedProfitsToUnderlying()` routine that is part of `exercise()` function, which can be vulnerable to sandwich/MEV attacks to collect most profits.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Hardcoded Decimal Assumption in purchaseWithZeroEx()",
            "description": "The function `purchaseWithZeroEx()` makes an implicit assumption about the decimal of `sellTokenAddress` being 6, which may not always hold.",
            "severity": "Low",
            "contract": "GammaAdapter",
            "function": "purchaseWithZeroEx()",
            "lineNumber": "230-232"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-179"
                ],
                "4": [
                    "CWE-180"
                ]
            },
            "title": "Accommodation of approve() Idiosyncrasies",
            "description": "The finding highlights a potential issue with the approve() function where it may not follow the standardized ERC-20 specification, leading to possible idiosyncrasies from current widely-used token contracts. It suggests following the convention of applying the approve() call twice to ensure smooth operation.",
            "severity": "Low",
            "contract": "GammaAdapter",
            "function": "approve()",
            "lineNumber": "N/A"
        }
    ]
}