{"path": "./Audit_Reports_2024/PeckShield/PeckShield-Audit-Report-Handle-v1.0.pdf", "project_info": {"url": "N/A", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Accommodation of Non-ERC20-Compliant Tokens", "description": "The finding examines the `approve()` routine and possible idiosyncrasies from current widely-used token contracts, highlighting the need to mitigate the known `approve()/transferFrom()` race condition.", "severity": "Low", "contract": "Multiple Contracts", "function": "approve()", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-682"]}, "title": "Improved Logic in Handle::removeFxToken()", "description": "The `removeFxToken()` function has a straightforward logic but can be improved in three aspects: unnecessary operation, incorrect removal of last element, and identical event emission.", "severity": "Medium", "contract": "Handle", "function": "removeFxToken()", "lineNumber": "119-141"}, {"id": 2, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Improved Sanity Checks For System/Function Parameters", "description": "The update logic on system-wide parameters can be improved by applying more rigorous sanity checks to prevent undesirable consequences such as unreasonably high fees.", "severity": "Low", "contract": "Handle", "function": "setFees()", "lineNumber": "294-305"}, {"id": 3, "category": {"1": ["CWE-284"], "2": ["CWE-269"]}, "title": "Trust Issue of Admin Keys", "description": "The admin account has critical roles in governing and regulating system-wide operations but lacks a DAO-like governance structure, making it vulnerable to compromise and potential fund theft.", "severity": "Medium", "contract": "Handle", "function": "setComponents()", "lineNumber": "184-208"}, {"id": 4, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1288"]}, "title": "Lack Of Duplicate Checks To Add The Same FxToken", "description": "The `setFxToken()` function does not validate whether the given `fxToken` may exist in the current list of `validFxTokens`, which can result in a duplicate `fxToken` being added into the list.", "severity": "Low", "contract": "Handle", "function": "setFxToken()", "lineNumber": "113-117"}, {"id": 5, "category": {"1": ["CWE-682"]}, "title": "Timely charge() Right Before Interest Rate Changes", "description": "The interest rate update function does not timely accumulate due interest with the previous interest rate before applying the new interest rate, which may lead to inaccurate interest calculation.", "severity": "Low", "contract": "Handle", "function": "updateRates()", "lineNumber": "143-146"}, {"id": 6, "category": {"1": ["CWE-682"]}, "title": "Incorrect Calculation of getNewMinimumRatio()", "description": "The function `getNewMinimumRatio()` has a flawed implementation when there is a collateral withdraw, which can result in reverting the execution due to the `SafeMath` operation on `uint256`. ", "severity": "High", "contract": "VaultLibrary", "function": "getNewMinimumRatio()", "lineNumber": "522-534"}, {"id": 7, "category": {"1": ["CWE-682"]}, "title": "Improved Arithmetic Calculation", "description": "Precision loss due to mixed multiplication and division operations in fee calculation and getMinimumRatio() function, recommended to calculate multiplication before division.", "severity": "Low", "contract": "Multiple Contracts", "function": "burn() and getMinimumRatio()", "lineNumber": "337-344, 373-379"}, {"id": 8, "category": {"1": ["CWE-691"], "2": ["CWE-1265"]}, "title": "Strengthened Reentrancy Prevention in Comptroller", "description": "The adherence of `checks-effects-interactions` principle is violated in `_withdrawCollateralRewardFrom()` function, making it vulnerable to re-entrancy attacks.", "severity": "Undetermined", "contract": "Multiple Contracts", "function": "_withdrawCollateralRewardFrom()", "lineNumber": "N/A"}, {"id": 9, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-394"]}, "title": "Proper Debt Absorb in absorbDebt()", "description": "Within the `handle.fi` protocol, there is a scalable pool that is designed to collectively fund liquidations. The pool holders share potential loss from the liquidation and are also potentially rewarded with liquidated collaterals. While examining the current debt-socializing logic, we notice the current implementation can be improved.", "severity": "Medium", "contract": "fxKeeperPool", "function": "absorbDebt()", "lineNumber": "358-363"}, {"id": 10, "category": {"1": ["CWE-682"]}, "title": "Inconsistent Deposit Fee Calculation And Collection", "description": "The `_mintAndDeposit()` function calculates `feeCollateral` using `depositFeePerMille`, but there is an unnecessary inconsistency in its usage.", "severity": "Low", "contract": "Comptroller", "function": "_mintAndDeposit()", "lineNumber": "176-177"}]}