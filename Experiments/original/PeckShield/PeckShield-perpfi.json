{
    "path": "./Audit_Reports_2024/PeckShield/PeckShield-perpfi.pdf",
    "project_info": {
        "url": "https://github.com/perpetual-protocol/perp-monorepo",
        "commit_hash": "N/A",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Incompatibility With Deflationary Tokens in ClearingHouse::addMargin()",
            "description": "The `addMargin()` function in the `ClearingHouse` contract does not properly handle deflationary tokens when transferring assets, which may cause inconsistent internal asset balances.",
            "severity": "Low",
            "contract": "ClearingHouse",
            "function": "addMargin()",
            "lineNumber": "211, 217"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Redundant ERC20 Transfers in ClearingHouse::transferFee()",
            "description": "In the `ClearingHouse` contract, the internal function `transferFee()` is invoked by `openPositioin()` and `closePosition()` for collecting the fee from the trader. While reviewing the logic of fee transfers, we identified that the current implementation could be improved by reducing one `transferFrom()` call, which would reduce gas consumption.",
            "severity": "Informational",
            "contract": "ClearingHouse",
            "function": "transferFee()",
            "lineNumber": "878-891"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-755"
                ],
                "3": [
                    "CWE-460"
                ]
            },
            "title": "Missed Events and Error Handling in InsuranceFund",
            "description": "In the `InsuranceFund` contract, error handling logic is missed in the `addToken()` and `removeToken()` functions.",
            "severity": "Informational",
            "contract": "InsuranceFund.sol",
            "function": [
                "addToken()",
                "removeToken()"
            ],
            "lineNumber": [
                "887"
            ]
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Business Logic Error in InsuranceFund::getTokenWithMaxValue()",
            "description": "The business logic to choose the `outputToken` has some flaws such that the smallest quoteToken cannot be selected correctly.",
            "severity": "Medium",
            "contract": "InsuranceFund",
            "function": "getTokenWithMaxValue()",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Business Logic Error in RewardsDistribution::distributeRewards()",
            "description": "In the `RewardsDistribution` contract, the `distributeRewards()` function distributes `perpToken` to the addresses in the `distributions[]` array with incorrect sanity checks.",
            "severity": "Informational",
            "contract": "RewardsDistribution.sol",
            "function": "distributeRewards()",
            "lineNumber": "69-85"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Gas Optimization in RewardsDistribution::removeRewardsDistribution()",
            "description": "Optimize gas consumption in removeRewardsDistribution function by replacing the element to be removed with the last element and popping the last element out.",
            "severity": "Informational",
            "contract": "RewardsDistribution.sol",
            "function": "removeRewardsDistribution()",
            "lineNumber": "121-127, 124"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Missed initializer Modifiers",
            "description": "The initialize() function lacks the initializer modifier, allowing bad actors to call it again and set critical system parameters.",
            "severity": "Informational",
            "contract": "InflationMonitor.sol, SupplySchedule",
            "function": "initialize()",
            "lineNumber": "37-42"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-693"
                ]
            },
            "title": "Reentrancy Risk in ClearingHouse::settlePosition()",
            "description": "In the `ClearingHouse` contract, a reentrancy risk exists where a bad actor could settle a position but leave a batch of quote assets inside the `ClearingHouse` without book-keeping records.",
            "severity": "High",
            "contract": "ClearingHouse",
            "function": "settlePosition()",
            "lineNumber": "217"
        }
    ]
}