{
    "path": "./Audit_Reports_2024/HAECHI_AUDIT/Scroll_zkEVM_-_Audit_Report.pdf",
    "project_info": {
        "url": "https://github.com/scroll-tech/poseidon-circuit/tree/912f5ed2c6cacd64a0006e868e3cb4b624acc019",
        "commit_hash": "912f5ed2c6cacd64a0006e868e3cb4b624acc019",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Non-trivial rotation incorrectly handled in ComparatorChip",
            "description": "The expr function returns an incorrect Expression<F> for non-trivial rotation due to the eq_chip result not handling rotation, leading to incorrect results.",
            "severity": "Medium",
            "contract": "ComparatorChip",
            "function": "expr",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-697"
                ],
                "2": [
                    "CWE-1024"
                ]
            },
            "title": "Field representation dependent implementation in LtChip",
            "description": "The assignment logic in LtChip returns a little-endian representation, but it is documented that the endianness is implementation specific, which may cause issues with fields or field implementations that return big-endian bytes.",
            "severity": "Informational",
            "contract": "LtChip",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Notes on the Poseidon Hash",
            "description": "The Poseidon hash function is used with 8 full rounds and 57 partial rounds as a security margin, but further research is recommended to ensure its implementation meets specifications.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-229"
                ],
                "4": [
                    "CWE-230"
                ]
            },
            "title": "Selected Proofs & Notes for the Poseidon Circuit",
            "description": "The audit report discusses the implementation of the Poseidon permutation and hash table, noting that some specification details are missing but do not affect soundness. The report also explains how the circuit ensures soundness by constraining the sponge absorb process and hash inputs.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-707"
                ]
            },
            "title": "Selected Proofs & Notes for the Bytecode Circuit",
            "description": "The finding describes the structure and constraints of the bytecode table, including columns such as q_enable, q_first, q_last, push_data_left, push_data_size, push_table, length, value_rlc, code_hash, tag, index, is_code, and value. It also outlines rules for different row types (First and Last Row, Header Row, Byte Row, Header to Header Row, Header to Byte Row, and Byte to Byte Row).",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Poseidon Hash\u2019s outputs are taken from capacity",
            "description": "The implementation of Poseidon hash function takes the output from the capacity (last c = 1 element) instead of from the rate (first r elements), which does not match the definition of the sponge-based hash construction.",
            "severity": "Informational",
            "contract": "Poseidon Circuit",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "mpt_only being true leads to overconstrained circuits",
            "description": "Incorrect ordering of logic in Poseidon Circuit's SpongeChip causes custom gate to be enabled on offset 1 when mpt_only is true, leading to overconstrained circuits and potential failure of ZKP verification.",
            "severity": "High",
            "contract": "Poseidon Circuit",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "padding_shift is underconstrained in the bytecode circuit",
            "description": "The padding_shift variable in the bytecode circuit is not properly constrained, leading to potential vulnerabilities when applying the Poseidon hash to the bytecode.",
            "severity": "Critical",
            "contract": "zkevm-circuits",
            "function": "to_poseidon_hash.rs",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Missing range checks in MulAdd chip",
            "description": "The MulAdd chip lacks range checks on individual elements used in the calculation, allowing values beyond the intended range to pass constraints with incorrect values.",
            "severity": "High",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Incorrect calculation of overflow value in MulAdd chip",
            "description": "The MulAdd chip has an incorrect implementation of the formula to calculate the overflow value, which may cause correctness issues in the future.",
            "severity": "Low",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "ExpCircuit has a under-constrained exponentiation algorithm",
            "description": "The ExpCircuit uses an under-constrained exponentiation algorithm which can allow a malicious prover to prove the calculation of an incorrect exponentiation.",
            "severity": "High",
            "contract": "ExpCircuit",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Bytecode Tag should be constrained to a boolean in BytecodeCircuit",
            "description": "The tag value in the BytecodeTable is used to determine whether a byte is a header or code. This tag is used in selectors such as is_header and is_byte, which make use of boolean expressions that require inputs to be either 0 or 1. If the tag value is not constrained to a boolean, it can lead to unintended results.",
            "severity": "Low",
            "contract": "Bytecode Circuit",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Redundant boolean constraint in Batched IsZero",
            "description": "The BatchedIsZero chip has a redundant boolean constraint that checks if is_zero is 0 or 1, which can be removed as it's implicitly checked by other constraints.",
            "severity": "Informational",
            "contract": "BatchedIsZeroChip",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Redundant boolean constraint in Exponentiation Circuit",
            "description": "There is a redundant boolean constraint in ExpCircuit which ensures that the columns is_step is always boolean and can be removed.",
            "severity": "Informational",
            "contract": "ExpCircuit",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}