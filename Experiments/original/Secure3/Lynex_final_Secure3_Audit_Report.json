{"path": "./Audit_Reports_2024/Secure3/Lynex_final_Secure3_Audit_Report.pdf", "project_info": {"url": "https://github.com/Lynexfi/lynex-contracts/", "commit_hash": "585e4a6c21f246fbf936e2ff55f680f1f2947177", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"], "2": ["CWE-369"]}, "title": "LNX-46: Division by zero not prevented", "description": "In Solidity, transactions are reverted with the 'division by zero' error message when a division by zero is attempted. Consider actively preventing divisions by zero with appropriate 'revert' statements that have informative and user-friendly error messages.", "severity": "Informational", "contract": ["GaugeExtraRewarder", "MinterUpgradeable", "VoterV3", "VotingEscrow"], "function": ["N/A", "N/A", "N/A", "N/A"], "lineNumber": ["102, 156", "173", "448", "607, 703, 1128"]}, {"id": 1, "category": {"1": ["CWE-682"]}, "title": "LNX-31:Missing array length equality checks may lead to incorrect or undefined behavior", "description": "If the length of the arrays are not required to be of the same length, user operations may not be fully executed due to a mismatch in the number of items iterated over, versus the number of items provided in the second array.", "severity": "Low", "contract": ["MinterUpgradeable", "BribeFactoryV3", "VoterV3"], "function": ["_initialize", "addRewardsToBribes", "_vote", "claimBribes"], "lineNumber": ["81-97", "128-138", "427-468", "478-L483"]}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "LNX-32:Proper amount validation in `MinterUpgradeable::_initialize()` function", "description": "Validate that max is always equal to sum of elements value in amounts.", "severity": "Low", "contract": "MinterUpgradeable", "function": "_initialize()", "lineNumber": "81-L97"}, {"id": 3, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "LNX-33:ABI encodePacked Collision risk", "description": "There is a risk of collision due to dynamic type usages in `abi.encodePacked`. This can lead to unintended behavior and potentially allow an attacker to associate their Ethereum address with actions performed by a different user.", "severity": "Low", "contract": ["PairFactoryUpgradeable", "VotingEscrow"], "function": ["createPair", "delegateBySig"], "lineNumber": ["116-130", "1387-1428"]}, {"id": 4, "category": {"1": ["CWE-703"]}, "title": "LNX-34:Revert when token is not attached or detached form gauge", "description": "In `VoterV3` `attachTokenToGauge()` and `detachTokenToGauge()` functions, consider reverting in the case of a failed operation to prevent event from emitting, saving gas and to better convey the failure to the user.", "severity": "Low", "contract": "VoterV3", "function": "attachTokenToGauge() and detachTokenFromGauge()", "lineNumber": "615"}, {"id": 5, "category": {"1": ["CWE-284"], "2": ["CWE-269"], "3": ["CWE-266"]}, "title": "LNX-35:Compromised or malicious owner can siphon rewards from the Voter contract", "description": "A compromised or malicious owner can siphon rewards from the Voter contract.", "severity": "Low", "contract": "VoterV3", "function": "N/A", "lineNumber": "598"}, {"id": 6, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-391"]}, "title": "LNX-36:Missing emit events", "description": "The update of key state, especially for key roles like minter, should emit corresponding events.", "severity": "Informational", "contract": ["Lynex", "BribeFactoryV3", "PairFactoryUpgradeable", "GaugeV2_CL", "GaugeExtraRewarder", "MinterUpgradeable"], "function": ["setMinter", "allPairsLength", "pairs", "setPause", "setFeeManager", "N/A", "N/A", "N/A", "N/A", "N/A", "N/A", "N/A", "N/A", "N/A"], "lineNumber": ["28-31", "51-91", "61-65", "64-66", "94-102", "104-108", "118-134", "125-129", "131-135", "137-141", "143-146", "166-182"]}, {"id": 7, "category": {"1": ["CWE-435"], "2": ["CWE-436"], "3": ["CWE-437"]}, "title": "LNX-37: Inconsistent between balanceOfNFT, balanceOfNFTAt and _balanceOfNFT functions", "description": "The balanceOfNFT function implements a flash-loan protection that returns zero voting balance if ownership_change[_tokenId] == block.number. However, this was not consistently applied to the balanceOfNFTAt and _balanceOfNFT functions.", "severity": "Informational", "contract": "VotingEscrow", "function": ["balanceOfNFT", "balanceOfNFTAt"], "lineNumber": "903-910"}, {"id": 8, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "LNX-38:Meaningless `require` function of `GaugeV2_CL.setInternalBribe()`", "description": "The `require` function `require(_int >= address(0), \"zero\");` is useless and will always hold true.", "severity": "Informational", "contract": "GaugeV2_CL", "function": "setInternalBribe()", "lineNumber": "126"}, {"id": 9, "category": {"1": ["CWE-710"], "2": ["CWE-1164"]}, "title": "LNX-39:Comments from the original project have not been modified", "description": "The code of this project is a fork of the thena project. The project team has modified many key codes and keywords, but some comments have not been modified. The information of the original thena project is still retained.", "severity": "Informational", "contract": "VoterV3", "function": "N/A", "lineNumber": "597"}, {"id": 10, "category": {"1": ["CWE-703"]}, "title": "LNX-40:Use require() instead of assert()", "description": "Contracts use assert() instead of require() in multiple places, causing a Panic error on failure and preventing the use of error strings.", "severity": "Informational", "contract": "VotingEscrow", "function": "N/A", "lineNumber": "242, 252, 428, 445, 488, 731, 798, 802, 812, 828, 844, 920, 974"}, {"id": 11, "category": {"1": ["CWE-710"], "2": ["CWE-1041"]}, "title": "LNX-41:Redundant code", "description": "The finding reports redundant code in the contracts Bribes.sol and GaugeV2_CL.sol.", "severity": "Informational", "contract": ["Bribes", "GaugeV2_CL"], "function": ["N/A", "claimFees()"], "lineNumber": ["35, 38, 57", "352-354, 808"]}, {"id": 12, "category": {"1": ["CWE-703"]}, "title": "LNX-42:Missing Error Messages in require Statements", "description": "The 'require' statements are missing error messages.", "severity": "Informational", "contract": "GaugeExtraRewarder,VotingEscrow", "function": "N/A", "lineNumber": "130,1395,1396"}, {"id": 13, "category": {"1": ["CWE-682"]}, "title": "Logical risk in `MinterUpgradeable::update_period()` function", "description": "The finding does not provide a detailed description.", "severity": "Informational", "contract": "MinterUpgradeable", "function": "update_period()", "lineNumber": "192-228"}, {"id": 14, "category": {"1": ["CWE-707"], "2": ["CWE-116"], "3": ["CWE-838"]}, "title": "LNX-44:Events are missing sender information", "description": "The events emitted do not include sender information.", "severity": "Informational", "contract": ["PairFactoryUpgradeable", "VoterV3", "Bribes", "VotingEscrow"], "function": ["N/A"], "lineNumber": ["128", "158", "176", "235", "240", "252", "259", "260", "269", "275", "276", "304", "321", "332", "342", "348", "850"]}, {"id": 15, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "LNX-45:Unsafe to use floating pragma", "description": "Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.", "severity": "Informational", "contract": "BribeFactoryV3", "function": "N/A", "lineNumber": "2"}, {"id": 16, "category": {"1": ["CWE-682"]}, "title": "Using wrong supply variable in MinterUpgradeable::circulating_supply() function", "description": "The function circulating_supply() uses the wrong supply variable, exposing the minter contract to minting disproportionate tokens to the wrong group when calculating weekly emissions.", "severity": "Informational", "contract": "MinterUpgradeable", "function": "circulating_supply()", "lineNumber": "148-151"}, {"id": 17, "category": {"1": ["CWE-697"]}, "title": "Remove same error massages from inverse operations", "description": "Instead of a generic 'emergency' message, provide a clearer feedback to the caller about the state of the contract.", "severity": "Informational", "contract": "GaugeV2_CL.sol", "function": "activateEmergencyMode() and stopEmergencyMode()", "lineNumber": "130-140"}, {"id": 18, "category": {"1": ["CWE-682"]}, "title": "LNX-49:Gas Optimization", "description": "Optimize gas usage by moving comparison out of the 'for' loop and storing and reading the result of the condition.", "severity": "Informational", "contract": "VoterV3", "function": "_reset", "lineNumber": "363-396"}, {"id": 19, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "LNX-50:VoterV3::Voting() emits Abstained event", "description": "Both `Voted` and `Abstained` events are emitted when a user votes. This could result in off-chain indexers computing the protocol state incorrectly or misleading external applications and cause **Inconsistency**.", "severity": "Informational", "contract": "VoterV3", "function": "vote()", "lineNumber": "419"}, {"id": 20, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "LNX-51:Lack of tokens validation", "description": "The function _claimFees() does not validate the tokens before performing operations.", "severity": "Informational", "contract": "GaugeV2_CL", "function": "_claimFees()", "lineNumber": "356-381"}]}