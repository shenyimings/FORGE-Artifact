{"path": "./Audit_Reports_2024/Secure3/DegenReborn_final_Secure3_Audit_Report.pdf", "project_info": {"url": "https://github.com/NirvanaLabHQ/contracts", "commit_hash": "d96eac7783059c434c9562c7e0e9b9b540e084e0", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-284"], "2": ["CWE-269"], "3": ["CWE-266"]}, "title": "Centralization risk in rewardDistributor contract withdraw function", "description": "The owner can withdraw pending funds to be distributed in the contract at any time via the withdraw function, leading to an excessive risk of owner privileges and potential losses to users.", "severity": "Low", "contract": "RewardDistributor", "function": "withdraw()", "lineNumber": "94-98"}, {"id": 1, "category": {"1": ["CWE-682"], "2": ["CWE-369"]}, "title": "DoS risk of divided by 0 due to 0 totalAmount value", "description": "In the RebornPortal contract, `_dropReborn` and `_dropNative` functions are used to update accPerShare to the top 100 tvl pool, which will divide `pool.totalAmount` when calculating accPerShare. However, users can stake $REBORN tokens to other pools through the `switchPool` function, so `pool.totalAmount` may become 0, causing a division by zero error and resulting in reward distribution DoS.", "severity": "Critical", "contract": "RebornPortal", "function": "_dropReborn/_dropNative", "lineNumber": "389-390,414-418"}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "Duplicate rank key issue", "description": "When the value passed to _enter function is 0, it will clear the corresponding rank through the _exit function but continues to execute the _rank.add operation, causing the same tokenId to exist in the rank tree at the same time.", "severity": "Critical", "contract": "RankUpgradeable", "function": "_enter", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-391"]}, "title": "Missing event record", "description": "In the RebornPortal contract, the owner can set the vault address through the setVault function, but the event is not recorded.", "severity": "Informational", "contract": "RebornPortal", "function": "setVault", "lineNumber": "199"}, {"id": 4, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "No check for existing state", "description": "The updateMinter and updateSigners functions do not check if the addresses to add or remove already exist in the minters or signers mapping.", "severity": "Informational", "contract": "RBT.sol, RebornPortal.sol", "function": "updateMinter(), updateSigners()", "lineNumber": "49-61, 215-227"}, {"id": 5, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "Redundant reward distribution issue", "description": "In the RebornPortal contract, the `_vaultRewardToRefs` and `_sendRewardToRefs` functions are used to distribute rewards to the referrer, but they have not checked whether the referrer address returned by `_calculateReferReward` is 0 address, if it is 0 address, continuing to execute the reward distribution logic will be in vain consumes unnecessary gas.", "severity": "Informational", "contract": "RebornPortal", "function": "_vaultRewardToRefs and _sendRewardToRefs", "lineNumber": "474-478, 503-507"}, {"id": 6, "category": {"1": ["CWE-435"], "2": ["CWE-436"], "3": ["CWE-437"]}, "title": "Reentrancy risk in the engrave function of the RebornPortal contract", "description": "The `_safeMint()` function will call `_safeMint()` in the ERC721 contract, thereby calling the `_checkOnERC721Received()` function of the transferred address. If the `onERC721Received()` of the forwarded address contains malicious code, the attack can be carried out.", "severity": "Low", "contract": "RebornPortal", "function": "engrave()", "lineNumber": "L88"}, {"id": 7, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "Risk of incorrectly setting rebornToken", "description": "The rebornToken address is set in the initialize function of the RebornPortal contract without checking whether the passed-in address is non-zero. If a zero address is passed, it will make the contract unavailable.", "severity": "Low", "contract": "RebornPortal", "function": "initialize()", "lineNumber": "37"}, {"id": 8, "category": {"1": ["CWE-691"], "2": ["CWE-841"]}, "title": "The performUpkeep operation can be called ahead of time", "description": "The performUpkeep operation can be called ahead of time due to incorrect logic in RebornPortal contract.", "severity": "Low", "contract": "RebornPortal", "function": "performUpkeep()", "lineNumber": "378, 394, 404, 422"}, {"id": 9, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Users are able to avoid paying burn fees", "description": "When user calls `switchPool()` function, it calls `_increaseToPool()` function to burn 5% RBT amount as fee. However, user can avoid paying burn fees by setting the amount less than 19.", "severity": "Medium", "contract": "RebornPortal.sol", "function": "_increaseToPool()", "lineNumber": "550"}, {"id": 10, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "RebornPortal and RBT cache array length outside loop", "description": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.", "severity": "Low", "contract": ["RBT", "RebornPortal"], "function": ["N/A"], "lineNumber": ["53", "57", "157", "219", "223"]}, {"id": 11, "category": {"1": ["CWE-710"], "2": ["CWE-1041"]}, "title": "RewardVault.rebornToken can be defined as immutable", "description": "The `rebornToken` variable is only assigned in the constructor and can reduce gas cost by being defined as `immutable`.", "severity": "Informational", "contract": "RewardVault", "function": "constructor()", "lineNumber": "13"}, {"id": 12, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "performUpkeep cannot airdrop native token", "description": "The performUpkeep function can only airdrop the RBT in if..else if code segment and could not airdrop the native token.", "severity": "Critical", "contract": "RebornPortal", "function": "performUpkeep()", "lineNumber": "L173-182"}, {"id": 13, "category": {"1": ["CWE-682"], "2": ["CWE-1339"]}, "title": "Precision Loss in Division and Multiplication", "description": "The formula of calculating pool.accNativePerShare is divided first and then multiplied, resulting in loss of accuracy of the result.", "severity": "Low", "contract": "RebornPortal", "function": "_dropNative()", "lineNumber": "414-418"}]}