{"path": "./Audit_Reports_2024/Secure3/UniWhale_final_Secure3_Audit_Report.pdf", "project_info": {"url": "https://github.com/uniwhale-io/uniwhale-v1", "commit_hash": "58e7ed410d7252f926e92194dc70bafd7049fbd6", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "APPROVED_ROLE is able to remove margin from user's order in TradingCore", "description": "APPROVED_ROLE is allowed to removeMargin on behalf of user, which puts users' order in risk of forced liquidation. Meanwhile, the emitted event still records this operation by user.", "severity": "Medium", "contract": "TradingCore", "function": "removeMargin", "lineNumber": "219-222"}, {"id": 1, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-732"]}, "title": "Access control on view function is unnecessary", "description": "Function `createTrade` is a view function and adding access control to it does not make sense as contract code and storage on blockchain are public.", "severity": "Informational", "contract": "TradingCore", "function": "createTrade()", "lineNumber": "102"}, {"id": 2, "category": {"1": ["CWE-284"], "2": ["CWE-269"]}, "title": "Centralized risk", "description": "Privileged accounts of various roles in the contract require multi-signature protection to mitigate centralization risk.", "severity": "Informational", "contract": "RegistryCore, OracleAggregator, LiquidityPool, TradingCore", "function": "N/A", "lineNumber": "7, 11, 15, 18"}, {"id": 3, "category": {"1": ["CWE-703"], "2": ["CWE-393"]}, "title": "Check the return value of ERC20 token operations", "description": "The return value of the external call is not stored, and it is impossible to determine whether the authorization was successful.", "severity": "Low", "contract": "iQuidityPool", "function": "N/A", "lineNumber": "84, 147"}, {"id": 4, "category": {"1": ["CWE-682"]}, "title": "Fee-On-Transfer tokens not supported", "description": "Fee-on-transfer tokens lead to problems in mint", "severity": "Informational", "contract": "LiquidityPool", "function": "mint()", "lineNumber": "83-84"}, {"id": 5, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "LiquidityPool can be broken by first depositor", "description": "Initial value of LP token can be manipulated by the first depositor, so that users may not receive shares for their deposit of baseToken.", "severity": "Medium", "contract": "iLiquidityPool", "function": "mint()", "lineNumber": "99-101"}, {"id": 6, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "LiquidityPool cannot be unpause", "description": "LiquidityPool only implements `pause()` but not `unpause()` function, meaning it will be locked forever if paused.", "severity": "Low", "contract": "LiquidityPool", "function": "pause()", "lineNumber": "207-209"}, {"id": 7, "category": {"1": ["CWE-682"]}, "title": "Runtime deadline calculation allow pending transactions to be maliciously executed", "description": "The SwapRouter contract sets the Uniswap deadline as `block.timestamp` instead of an off-chain parameter given by the user, which enables pending transactions to be maliciously executed at a later point.", "severity": "Low", "contract": "SwapRouter", "function": "N/A", "lineNumber": "65, 106"}, {"id": 8, "category": {"1": ["CWE-682"]}, "title": "UniWhale - Token compatibility causes program errors", "description": "Token compatibility causes program errors in LiquidityPool contract", "severity": "Informational", "contract": "LiquidityPool", "function": "mint()", "lineNumber": "70-104"}, {"id": 9, "category": {"1": ["CWE-682"]}, "title": "AbstractRegistry::_updateImbalancePerPriceId computation error when called twice in one block", "description": "If there are two consecutive calls to `_updateImbalancePerPriceId` in the same block, the net effect should be the same as only the second call is invoked. Otherwise, the funding fee may be higher than expected.", "severity": "Medium", "contract": "AbstractRegistry", "function": "_updateImbalancePerPriceId()", "lineNumber": "L353-L358"}, {"id": 10, "category": {"1": ["CWE-682"]}, "title": "AbstractRegistry::setFundingFee PerPriceId computation error when called twice in one block", "description": "If there're two consecutive calls to setFundingFeePerPriceId in the same block, the net affect should be the same as only the second call is invoked. Otherwise the user may be charged more fees than expected.", "severity": "Low", "contract": "AbstractRegistry", "function": "setFundingFeePerPriceId", "lineNumber": "288-293"}, {"id": 11, "category": {"1": ["CWE-284"], "2": ["CWE-269"], "3": ["CWE-266"]}, "title": "AbstractRegistry Set fee limit", "description": "Owners can set a very high `_fee` value, resulting in users having to pay a very high cost.", "severity": "Low", "contract": "AbstractRegistry", "function": "setFee", "lineNumber": "260-264"}, {"id": 12, "category": {"1": ["CWE-707"], "2": ["CWE-116"], "3": ["CWE-838"]}, "title": "LiquidityPool::mint Use safeTransferFrom", "description": "The transferFrom() method is used instead of safeTransferFrom(), which is discouraged by OpenZeppelin's documentation and may lead to compatibility issues.", "severity": "Informational", "contract": "LiquidityPool", "function": "mint", "lineNumber": "83"}]}