{"path": "./Audit_Reports_2024/Secure3/Nesten_final_Secure3_Audit_Report.pdf", "project_info": {"url": "https://github.com/Nesten-Inc/contracts", "commit_hash": "916a99e96702e3e6d228c8973703a8ae097addc4", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-394"]}, "title": "Attacker can Dos lockedOf[_account] to prevent withdraw tokens", "description": "An attacker can deposit 0 amount multiple times for a user, making the `lockedOf[_account]` array large enough to cause a gas limit DoS, preventing the user from withdrawing their tokens.", "severity": "Low", "contract": "Lock.sol", "function": "withdrawOf()", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-354"]}, "title": "Unlocked Pragma Version", "description": "The pragma solidity version number has a caret (^) which means the compiler will use the specified version or above. It's recommended to use specific solidity versions to know compiler bug fixes and optimisations were enabled at the time of compiling the contract.", "severity": "Informational", "contract": "DWIN.sol, Lock.sol, base.sol", "function": "N/A", "lineNumber": "L2"}, {"id": 2, "category": {"1": ["CWE-710"], "2": ["CWE-1061"], "3": ["CWE-766"]}, "title": "Functions not used internally could be marked external", "description": "The `readyToWithdrawOf()` function has public visibility but is not used internally within the contract. It's a best practice to mark such functions as external.", "severity": "Informational", "contract": "Lock.sol", "function": "readyToWithdrawOf(address _account)", "lineNumber": "L30-L33"}, {"id": 3, "category": {"1": ["CWE-682"]}, "title": "Gas Optimization - Cache array length outside of loop", "description": "The solidity compiler will always read the length of the array during each iteration if not cached, resulting in extra gas operations.", "severity": "Informational", "contract": "Lock", "function": "readyToWithdrawOf() and withdrawOf()", "lineNumber": "36, 52"}, {"id": 4, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "Miss Zero address check for changing state function", "description": "Zero address check is missing for `_to` in `lockedTransfer()` which can lead to lock tokens due to user error.", "severity": "Low", "contract": "Lock.sol", "function": "lockedTransfer()", "lineNumber": "L19"}, {"id": 5, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-391"]}, "title": "Missing Event Emission in Lock contract lockedTransfer function", "description": "The lockedTransfer function implements a 'transfer with lock' logic and changes state variables but does not emit an event to pass the changes out of chain.", "severity": "Informational", "contract": "Lock", "function": "lockedTransfer(address,uint,uint)", "lineNumber": "19-26"}, {"id": 6, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-391"]}, "title": "Missing Event Emission in Lock contract withdrawOf function", "description": "The withdrawOf function does not emit events to pass state changes out of chain.", "severity": "Informational", "contract": "Lock", "function": "withdrawOf()", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-682"]}, "title": "totalLocked() returns wrong amount", "description": "The totalLocked() function returns the total balance of the contract instead of the actual locked tokens, which can lead to incorrect calculations if someone transfers tokens directly to the Lock.sol contract.", "severity": "Informational", "contract": "Lock.sol", "function": "totalLocked()", "lineNumber": "L75-L80"}, {"id": 8, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "unhandled return values of ERC20 transfers", "description": "ERC20 implementations are not always consistent and some may return false on failure instead of reverting. It is safer to wrap such calls into require() statements to handle these failures.", "severity": "Low", "contract": "Lock.sol", "function": "N/A", "lineNumber": "25, 63"}]}