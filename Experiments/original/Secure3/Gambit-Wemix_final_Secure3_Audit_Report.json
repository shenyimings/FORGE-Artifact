{
    "path": "./Audit_Reports_2024/Secure3/Gambit-Wemix_final_Secure3_Audit_Report.pdf",
    "project_info": {
        "url": "https://github.com/changerio/changer-futures-contracts-public/tree/dev/0.1.0",
        "commit_hash": "c18a975fe77652c8dbdd1241f9d7984867f403de",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Potential rounding down issue",
            "description": "The contract GambitStakingV1 supports two types of rewards, USDC and DAI. When distributing USDC rewards, it is possible to encounter a rounding-down issue when calculating the accUsdcPerToken.",
            "severity": "Critical",
            "contract": "GambitStakingV1",
            "function": "distributeRewardUsdc()",
            "lineNumber": "83"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Use safeTransfer instead of transfer in TokenDistributor contract distribute function",
            "description": "Using 'transfer' instead of 'safeTransfer' in the distribute function of the TokenDistributor contract may lead to potential issues.",
            "severity": "Medium",
            "contract": "TokenDistributor",
            "function": "distribute()",
            "lineNumber": "15"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Rewards will be locked in the contract when there are no stakers",
            "description": "When there are no stakers in the contract, rewards will not be accumulated and remain stranded within the contract as there is no function to withdraw them.",
            "severity": "Medium",
            "contract": "GambitStakingV1",
            "function": "distributeRewardUsdc()",
            "lineNumber": "77-88"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Oracle Manipulation: Wrong Price Used if Chainlink Returns Outside Min/Max Range",
            "description": "The price oracle will use the wrong price if the Chainlink returns price outside min/max range in the updatePrice function of GambitPriceAggregatorV1 contract.",
            "severity": "Low",
            "contract": "GambitPriceAggregatorV1",
            "function": "updatePrice",
            "lineNumber": "347-350"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-354"
                ]
            },
            "title": "Should follow CEI pattern",
            "description": "State changes after token transfer which is an obvious reentrancy exploit design pattern. The Checks-Effects-Interactions pattern is not being followed in 'stakeTokens' function.",
            "severity": "Low",
            "contract": "GambitTradingStorageV1",
            "function": "handleTokens",
            "lineNumber": "842-848"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Lack of address check",
            "description": "The function replaceOwner doesn't check the newOwner, allowing the owner to be set as address(0).",
            "severity": "Low",
            "contract": "GnosisMultiSigWallet",
            "function": "replaceOwner()",
            "lineNumber": "151-164"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-703"
                ]
            },
            "title": "Use SafeERC20 to approve tokens",
            "description": "The return value of the `transferFrom()` call is not checked and some ERC-20 tokens return no values or a bool value. It's recommended to use OpenZeppelin's SafeERC20 versions with the safeTransfer functions that handle the return value check as well as non-standard-compliant tokens.",
            "severity": "Medium",
            "contract": "TokenDistributor",
            "function": "distribute()",
            "lineNumber": "15"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-665"
                ],
                "3": [
                    "CWE-908"
                ],
                "4": [
                    "CWE-457"
                ]
            },
            "title": "Use getPrice instead of getPriceUnsafe",
            "description": "In contract `GTokenOpenPnlFeed`, the function `fulfill` calls `getPriceUnsafe` to get price from the pyth network, which may return a price from arbitrarily far in the past.",
            "severity": "Low",
            "contract": "GTokenOpenPnlFeed",
            "function": "fulfill",
            "lineNumber": "299-309"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-354"
                ]
            },
            "title": "Using vulnerable dependency of OpenZeppelin",
            "description": "The project uses outdated versions of @openzeppelin/contracts and @openzeppelin/contracts-upgradeable which have multiple known vulnerabilities.",
            "severity": "Low",
            "contract": [
                "GambitPriceAggregatorV1",
                "GambitTradingCallbacksV1",
                "GambitPairInfosV1",
                "GambitNftRewardsV1",
                "GambitStakingV1",
                "GambitTradingStorageV1",
                "GambitReferralsV1",
                "GambitTradingV1",
                "TokenDistributor"
            ],
            "function": "N/A",
            "lineNumber": [
                "L4",
                "L4-L6",
                "L3-L4",
                "L4",
                "L4-L5",
                "L4-L6",
                "L4-L6",
                "L4-L5",
                "L2"
            ]
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Lack of a double-step transferOwnership() pattern",
            "description": "The current ownership transfer process involves the current owner calling the transferOwnership() function, which can lead to accidentally transferring ownership to an uncontrolled account, losing access to all functions with the onlyOwner modifier.",
            "severity": "Low",
            "contract": "SimpleGToken",
            "function": "N/A",
            "lineNumber": "730-734, 739-743"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Wrong gap layout in GambitNftRewardsV1.sol contract",
            "description": "The storage layout of this contract is spaced by 64 slots. Before the `_gap1` variable, only one slot was occupied by `storageT`, so `gap1` should be 63.",
            "severity": "Low",
            "contract": "GambitNftRewardsV1.sol",
            "function": "N/A",
            "lineNumber": "12-14"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-862"
                ]
            },
            "title": "Access Control: TokenDistributor.distribute() can be called by anyone",
            "description": "The distribute function of TokenDistributor contract can be called by anyone.",
            "severity": "Low",
            "contract": "TokenDistributor",
            "function": "distribute()",
            "lineNumber": "11"
        }
    ]
}