{"path": "./Audit_Reports_2024/Secure3/Ender_Fund_Deposition_final_Secure3_Audit_Report.pdf", "project_info": {"url": "https://github.com/enderprotocol/depositContract", "commit_hash": "ed4136ed9091dfc565af5d3666e0b53fec28cca8", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"]}, "title": "deposit() reward accounting issue with stETH rebase and token", "description": "The deposit function has a logical issue where totalStaked is updated for both Lido and other tokens, but calculatingSForReward only accounts for stEth balance from Lido. Additionally, it assumes 1e18 decimals for token, which can cause issues.", "severity": "Medium", "contract": "EnderBondLiquidityDeposit", "function": "deposit()", "lineNumber": "157"}, {"id": 1, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "Use safeTransferFrom instead of transferFrom", "description": "The return value of ERC20 transferFrom is not checked and it could be failure. It's recommended to use `safeTransferFrom` to make sure the transfer is successful before making contract accounting state changes.", "severity": "Medium", "contract": "N/A", "function": "deposit()", "lineNumber": "184"}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "deposit() issue with transfer-on-fee/deflationary tokens", "description": "In the deposit() function, using principal directly for accounting can introduce an error if the token is a transfer-on-fee/deflationary token.", "severity": "Medium", "contract": "EnderBondLiquidityDeposit", "function": "deposit()", "lineNumber": "184"}, {"id": 3, "category": {"1": ["CWE-682"]}, "title": "totalStaked will be reset to stEth's balance when user deposit", "description": "In the deposit() function, totalStaked is updated based on IERC20(stEth).balanceOf(address(this)) - totalStaked, which means if a user deposits another bondable token apart from stEth, totalStaked will be overridden and cause unexpected results.", "severity": "Medium", "contract": "EnderBondLiquidityDeposit", "function": "deposit()", "lineNumber": "172-176"}, {"id": 4, "category": {"1": ["CWE-284"], "2": ["CWE-269"]}, "title": "Use disableInitializers to prevent any future reinitialization", "description": "The EnderPreLounchDeposit contract serves as an implementation contract for the TakerUpgradeableProxy proxy. It can be initialized by any address, which is not a security problem in the sense that it impacts the system directly, but taking ownership of implementation contracts can open other attack vectors like social engineer or phishing attacks.", "severity": "Low", "contract": "EnderBondLiquidityDeposit.sol", "function": "initialize()", "lineNumber": "67"}, {"id": 5, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "Redundant logic in calculatingSForReward()", "description": "The `calculatingSForReward()` function has redundant logic because it checks `reward > 0` again after already checking it in the `deposit()` function.", "severity": "Medium", "contract": "EnderBondLiquidityDeposit", "function": "deposit()", "lineNumber": "172-173"}, {"id": 6, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "Missing __ReentrancyGuard_init()", "description": "The inherited base classes do not get initialized which may lead to undefined behavior. The upgradeable variants of OpenZipplin contracts should be initialized by calling the __***_init() function in the initializer function.", "severity": "Informational", "contract": "EnderBondLiquidityDeposit", "function": "initialize()", "lineNumber": "67"}, {"id": 7, "category": {"1": ["CWE-707"], "2": ["CWE-116"], "3": ["CWE-117"]}, "title": "Redundant code with hardhat console in production deployment", "description": "console.log should be removed from the production deployment", "severity": "Informational", "contract": "EnderBondLiquidityDeposit", "function": "N/A", "lineNumber": "9, 168-170, 198"}]}