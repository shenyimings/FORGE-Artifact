{"path": "./Audit_Reports_2024/Solidified/Solidified-kirobo_[22.06.2021].pdf", "project_info": {"url": "https://github.com/kiroboio/ki-eth-contracts/", "commit_hash": "d32468e521760af8d75a87c651a6cc2adc2aa903", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "RecoveryWallet.sol: TransferFrom does not work as intended", "description": "The methods `transferFrom721()`, `safeTransferFrom721()` and `safeTransferFrom721wdData()` do not make use of the `from` address passed as a parameter, transferring any asset from the current account rather than the intended `from` account. The methods including `ERC20` transfer do not validate or return the result of the call.", "severity": "High", "contract": "RecoveryWallet.sol", "function": ["transferFrom721()", "safeTransferFrom721()", "safeTransferFrom721wdData()"], "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Anyone can call setLocalEns() and set local ENS to an incorrect value", "description": "This could either result in `FactoryProxy.sol` calling a different than expected target if ENS resolution is not checked or transactions would fail due to the unexpected ENS resolution value.", "severity": "Major", "contract": "FactoryProxy.sol", "function": "_ensToAddress()", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "FactoryProxy.sol: Invalid casting", "description": "The methods `batchTransfer()` and `batchTransferPacked()` use `uint32` to calculate `beforeTS`, whereas the value expected is `uint40`. This can result in incorrect transaction expiry time and will prevent the transaction from execution.", "severity": "Minor", "contract": "FactoryProxy.sol", "function": "batchTransfer() and batchTransferPacked()", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-664"], "2": ["CWE-404"], "3": ["CWE-772"], "4": ["CWE-401"]}, "title": "Oracle.sol & RecoverOracle.sol: Locked ether", "description": "The function `update20()` accepts ether but does not contain any method to withdraw the same from the contract, resulting in permanently locked ether.", "severity": "Minor", "contract": "Oracle.sol & RecoverOracle.sol", "function": "update20()", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-284"]}, "title": "Factory.sol: Function batchMultiSigCallPacked() allows address(0)", "description": "The function `batchMultiSigCallPacked()` allows `address(0)` as target address in `mcalls.mcall[j].to`.", "severity": "Minor", "contract": "Factory.sol", "function": "batchMultiSigCallPacked()", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-682"]}, "title": "RecoveryWallet.sol: Function sendEther() can potentially fail if ETH is being sent to a smart contract", "description": "The function `sendEther()` calls `transfer()` when sending ETH to the `to` address, which only forwards 2300 gas. In cases where `to` is a smart contract whose fallback function consumes more than 2300 gas, the call will always fail.", "severity": "Minor", "contract": "RecoveryWallet.sol", "function": "sendEther()", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "The contract can only be as safe as the input provided", "description": "The contracts act as a giant proxy which redirects transactions based on the input parameters, making it prone to accidental invalid transactions and potential loss of funds.", "severity": "High", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-703"]}, "title": "Unaudited code", "description": "The source repository does not contain the code for the interface `ICreator` and is not audited. The wallet bytecode in the contract Wallet.sol and the related LLL codes were not audited.", "severity": "Warning", "contract": "Wallet.sol, ICreator", "function": "N/A", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1173"]}, "title": "Use of reserved words in the smart contract", "description": "The function `staticcall()` and `call()` uses reserved names as the function names which is not recommended.", "severity": "Informational", "contract": "Proxy.sol", "function": "staticcall() and call()", "lineNumber": "N/A"}, {"id": 9, "category": {"1": ["CWE-703"], "2": ["CWE-228"], "3": ["CWE-229"], "4": ["CWE-230"]}, "title": "Functions' implementations are missing", "description": "Consider providing missing implementation.", "severity": "Informational", "contract": "FactoryClaimable.sol and FactoryOwnable.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 10, "category": {"1": ["CWE-703"]}, "title": "Unchecked ERC20 Transfer Result", "description": "Functions transfer20() and transferFrom20() do not check the result of ERC20 transfer, which can lead to unexpected behavior if the transfer fails but returns false instead of reverting.", "severity": "Informational", "contract": "RecoveryWallet.sol", "function": "transfer20(), transferFrom20()", "lineNumber": "N/A"}, {"id": 11, "category": {"1": ["CWE-284"]}, "title": "Add `address(0)` validations throughout the contracts to prevent any accidental transfers", "description": "Accidental transfers can occur without proper validation of address(0) throughout the contracts.", "severity": "Informational", "contract": "N/A", "function": "Factory.addWalletBackup()", "lineNumber": "N/A"}, {"id": 12, "category": {"1": ["CWE-284"], "2": ["CWE-287"]}, "title": "Insecure msg.sender Validation", "description": "The msg.sender validation should be moved to the beginning of the method and outside the loop in Wallet.sol to prevent potential security issues.", "severity": "Informational", "contract": "Wallet.sol", "function": "N/A", "lineNumber": "N/A"}]}