{
    "path": "./Audit_Reports_2024/Solidified/Solidified-NIFTEX__[04.03.2021].pdf",
    "project_info": {
        "url": "https://github.com/metalithio/niftex-v2-contracts",
        "commit_hash": "76d1407ff5a6dc0d2593dc76dcd33208a9b82b2a",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-436"
                ],
                "3": [
                    "CWE-437"
                ]
            },
            "title": "External calls before state change in closeBuyout()",
            "description": "This function deletes internal data-structures after the ETH value is sent out. If the receiver is a smart contract unexpected side effects might occur through the receiver interacting with the protocol before the state is changed.",
            "severity": "Minor",
            "contract": "BuyoutModule.sol",
            "function": "closeBuyout()",
            "lineNumber": "69"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Missing zero checks in mintWallet()",
            "description": "There are no pre-conditions checks to ensure essential parameters are not `address(0)`. This may lead to incorrect or ownerless wallets.",
            "severity": "Minor",
            "contract": "ShardedWalletFactory.sol",
            "function": "mintWallet()",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ],
                "3": [
                    "CWE-680"
                ]
            },
            "title": "Bonding curve potentially vulnerable to flashloans if used with incorrect parameters",
            "description": "The bonding curve can be griefable via flash loans if used with incorrect parameters, allowing an attacker to take out a flash loan, buy/sell shards, and profit from scalping the vault contract.",
            "severity": "Minor",
            "contract": "BondingCurve3.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Tautologies in pre-condition checks supplyShards() and supplyEther()",
            "description": "The function performs tautological checks in pre-condition checks supplyShards() and supplyEther(), which are correct but confusing due to the use of safeMath ensuring the desired effect of preventing underflows.",
            "severity": "Minor",
            "contract": "BondingCurve.sol",
            "function": "supplyShards() and supplyEther()",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-393"
                ]
            },
            "title": "Ignored return value of external call in moduleExecute()",
            "description": "The return value of `Address.functionCallWithValue()` is ignored in the moduleExecute() function.",
            "severity": "Minor",
            "contract": "ShardeWallet.sol",
            "function": "moduleExecute()",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Unused modifier",
            "description": "The modifier `onlyAuthorize()` is never used and instead each module implements its own version of access control.",
            "severity": "Minor",
            "contract": "ModuleBase.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1120"
                ],
                "3": [
                    "CWE-1064"
                ]
            },
            "title": "ActionModule.sol: Consider declaring functions schedule() & execute() as external instead of public",
            "description": "Declaring functions schedule() and execute() as external instead of public could save a significant amount of gas by allowing array arguments to be directly read from calldata instead of being copied to memory first.",
            "severity": "Minor",
            "contract": "ActionModule.sol",
            "function": "schedule() & execute()",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-703"
                ]
            },
            "title": "Consider providing require error messages",
            "description": "Provide `require` error messages for a better smart contract user experience when a transaction reverts.",
            "severity": "Note",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}