{
    "path": "./Audit_Reports_2024/Solidified/Solidified-Stakehouse_[16.11.2021].pdf",
    "project_info": {
        "url": "https://github.com/bsn-eng/Stakehouse-Solidified",
        "commit_hash": "8a9c43659995f4132d751bdcbf1ebd39291b0035",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Unreset StakeHouseMemberQueue",
            "description": "The function `_addDepositToQueue()` does not reset the value of `stakeHouseMemberQueue[_stakeHouse][_publicKey]` after depositing ETH to `DepositContract`, allowing an attacker to repetitively buy SLOTs with ETH they did not deposit.",
            "severity": "Critical",
            "contract": "TransactionManager.sol",
            "function": "_addDepositToQueue()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Arithmetic Overflow/Underflow Errors Not Returned",
            "description": "CarefulMath.sol, Exponential.sol and ExponentialNoError.sol will not return arithmetic overflow/underflow errors as intended due to differences in Solidity compiler versions.",
            "severity": "Minor",
            "contract": "CarefulMath.sol, Exponential.sol, ExponentialNoError.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Pseudo Random Outcome Generation in skLootItemClaim()",
            "description": "The function skLootItemClaim() contains pseudo random outcome generation, allowing a smart contract to predict the outcome and choose whether to join StakeHouse and claim the item or wait for a more favorable outcome.",
            "severity": "Informational",
            "contract": "skLOOTFactory.sol",
            "function": "skLootItemClaim()",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Code Cleanup",
            "description": "Contract declares unused constant: `BATCH_MINT_AMOUNT`. Recommendation: Consider removing.",
            "severity": "Minor",
            "contract": "dETH.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}