{"path": "./Audit_Reports_2024/Solidified/Solidified-Origin_Governance.pdf", "project_info": {"url": "N/A", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"]}, "title": "Excess ETH for minting is not refunded", "description": "The function `mint()` accepts payment in ETH for the minting of an NFT. However, the users may overpay and no refund/change is given.", "severity": "Minor", "contract": "OriginERC721a_v1.sol", "function": "mint()", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Harvester: Harvester.sol: Swap and harvest might fail if the number of strategies and reward addresses grow very large", "description": "The functions `harvest()` and `swap()` cause nested iterations over dynamic data structures. These data structures might grow too large if too many strategy and reward accounts are added, causing the iterations to hit the block gas limit and revert.", "severity": "Minor", "contract": "Harvester.sol", "function": ["harvest()", "swap()"], "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-693"], "2": ["CWE-345"], "3": ["CWE-353"]}, "title": "Minter signatures can be replayed several times by user", "description": "The function `mint()` requires a signature by a minter admin to be submitted. However, there is no nonce to make messages unique, meaning that users can re-submit signatures several times.", "severity": "Minor", "contract": "OriginERC721a_v1.sol", "function": "mint()", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1173"]}, "title": "Consider using ERC-712 for signatures", "description": "The function `mint()` requires a signature by the minter to be submitted and resolved. Using ERC-712 would allow for human readable signature messages and simplify the signature validation code due to existing reference implementations.", "severity": "Note", "contract": "OriginERC721a_v1.sol", "function": "mint()", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "Governance: VoteLockerCurve.sol: Users can lock up 0 tokens", "description": "The contract allows users to lock up 0 tokens, which has no impact on security but may create undesired data entries and event emissions.", "severity": "Minor", "contract": "VoteLockerCurve", "function": "N/A", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1287"]}, "title": "Harvester: Harvester.sol: Unused Variable and unnecessary external call", "description": "The function `_harvest()` makes an unnecessary call to `strategy.getRewardTokenAddresses()` to initialize an unused variable `rewardTokenAddresses`.", "severity": "Minor", "contract": "Harvester", "function": "_harvest()", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-682"]}, "title": "Harvester: Harvester.sol: Comments for harvesting do not match implementation", "description": "The comment for function `harvest()` states that this function should be callable by the vault, but the implementation uses the `onlyGovernor` modifier instead of the intended `onlyVaultOrGovenor` modifier.", "severity": "Minor", "contract": "Harvester.sol", "function": "harvest()", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-682"]}, "title": "Dripper: Dripper.sol: Unnecessary cast", "description": "The cast to `uint192` in line 91 is unnecessary as `dripDuration` is of type `uint256`.", "severity": "Minor", "contract": "Dripper", "function": "N/A", "lineNumber": "91"}, {"id": 8, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Dripper: Dripper.sol: Unnecessary external call", "description": "The call on line 92 for an external call to `collect()` could be replaced by a call to the internal `_collect()`.", "severity": "Minor", "contract": "Dripper", "function": "N/A", "lineNumber": "92"}]}