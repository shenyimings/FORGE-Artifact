{"path": "./Audit_Reports_2024/Solidified/Audit Report - Dfyn.pdf", "project_info": {"url": "https://github.com/dfyn/V2-Contracts", "commit_hash": "c22ca5c998b5bf4098f8d8c05ceaf909dadeba99", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-284"], "2": ["CWE-269"]}, "title": "ConcentratedLiquidityPool.sol: Function initialize() can be called multiple times", "description": "The function `initialize()` can be called an unlimited number of times by the owner, potentially compromising several of the contract\u2019s immutables such as `masterDeployer` and `vault`.", "severity": "Major", "contract": "ConcentratedLiquidityPool.sol", "function": "initialize()", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-682"]}, "title": "Vault.sol: An incorrect data.balance is being maintained for vault strategy", "description": "In the harvest() function, when a strategy makes a profit, the data.balance variable is never updated to reflect this. The data.balance variable is then used later in the function to determine whether to further invest if (data.balance < targetBalance) or divest else if (data.balance > targetBalance) in the strategy.", "severity": "Major", "contract": "Vault.sol", "function": "harvest()", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "ConcentratedLiquidityPool.sol: Function collectLimitOrderFee() breaks reserves invariant leading to reverts in mint() and createLimitOrder()", "description": "The function collectLimitOrderFee() breaks the reserves invariant, causing reverts in mint() and createLimitOrder(). The left hand side of the invariant is too large by an amount equal to token1LimitOrderFee - token1Rebate.", "severity": "Major", "contract": "ConcentratedLiquidityPool.sol", "function": "collectLimitOrderFee()", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-664"], "2": ["CWE-1329"]}, "title": "The protocol risks permanently losing access to its collected fees", "description": "In case the keys for `dfynFeeTo` are ever lost, there is no way to update its value in the contract, thus rendering the protocol fees permanently inaccessible.", "severity": "Minor", "contract": "MasterDeployer.sol/ConcentratedLiquidityPool.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-682"]}, "title": "MasterDeployer.sol: Function setDfynFee() emits the incorrect event when limitOrderFee is set", "description": "The function `setDfynFee()` incorrectly emits the `DfynFeeUpdated` event when `limitOrderFee` is set.", "severity": "Minor", "contract": "MasterDeployer.sol", "function": "setDfynFee()", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-703"], "2": ["CWE-228"], "3": ["CWE-229"], "4": ["CWE-231"]}, "title": "Farm.sol: Function subscribe() does not validate the given array lengths", "description": "The function `subscribe()` does not validate that `positionIds` and `incentiveIds` are of the same length, which can lead to unintended input mistakes.", "severity": "Minor", "contract": "Farm.sol", "function": "subscribe()", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-664"], "2": ["CWE-404"], "3": ["CWE-772"], "4": ["CWE-401"]}, "title": "LimitOrderManager.sol: Function createLimitOrder() does not refund any extra ETH sent", "description": "The function `createLimitOrder()` does not refund any extra ETH sent by mistake, resulting in the funds being stuck in the contract.", "severity": "Minor", "contract": "LimitOrderManager.sol", "function": "createLimitOrder()", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "DfynLPToken.sol: Unsafe minting in mint() function", "description": "The _mint() function does not check if the recipient is a smart contract that implements the ERC721Receiver interface, which could result in an NFT being lost in a contract.", "severity": "Minor", "contract": "DfynLPToken.sol", "function": "mint()", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-682"], "2": ["CWE-191"]}, "title": "Possible underflow in casting from int256 to uint256", "description": "A user can enter a positive number for both amount0Delta and amount1Delta parameters which will result in an underflow of the uint256 cast on line 127 returning an extremely large value for amountReceived.", "severity": "Minor", "contract": "MixedRouteQuoterV1.sol", "function": "uniswapV3SwapCallback()", "lineNumber": "127"}, {"id": 9, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"], "4": ["CWE-690"]}, "title": "ConcentratedLiquidityPoolFactory.sol: Possible zero address", "description": "In the deployPool() function, there is no check to ensure that tokenA and tokenB are valid addresses.", "severity": "Minor", "contract": "ConcentratedLiquidityPoolFactory", "function": "deployPool()", "lineNumber": "24, 44"}, {"id": 10, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "ConcentratedLiquidityPoolHelper.sol: Possible invalid limitTick value", "description": "The check on line 63 does not ensure that the limitTick value is within the range TickMath.MIN_TICK to TickMath.MAX_TICK, allowing a user to enter a value for limitTick that can be smaller than TickMath.MIN_TICK or larger than TickMath.MAX_TICK.", "severity": "Minor", "contract": "ConcentratedLiquidityPoolHelper.sol", "function": "getLowerOldAndUpperOldLimit()", "lineNumber": "63"}, {"id": 11, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "Unused amountOut parameter in function swapCallBack()", "description": "The swapCallBack() function passes in an amountOut parameter, but the parameter is never used within the function.", "severity": "Minor", "contract": "DfynRouterV2.sol", "function": "swapCallBack()", "lineNumber": "N/A"}, {"id": 12, "category": {"1": ["CWE-682"]}, "title": "TickCounter.sol: Incorrect while statement in function countTicks()", "description": "In the countTicks() function, if tickBefore is greater than tickAfter, then count will always return zero due to an incorrect while statement.", "severity": "Minor", "contract": "TickCounter.sol", "function": "countTicks()", "lineNumber": "N/A"}, {"id": 13, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "MasterDeployer.sol: limitOrderFee is not validated in constructor", "description": "There is no check to ensure that limitOrderFee <= MAX_FEE in the constructor.", "severity": "Minor", "contract": "MasterDeployer.sol", "function": "constructor()", "lineNumber": "N/A"}, {"id": 14, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Admin can set limitOrderCharge to arbitrarily large numbers", "description": "There is no maximum value that parameter `_fee` can be when parameter `_isRebate == false` for function `LimitOrderManager.setLimitOrderCharge()`, which can lead to arbitrarily high charges being forced upon creators of limit orders.", "severity": "Minor", "contract": "LimitOrderManager.sol", "function": "setLimitOrderCharge()", "lineNumber": "N/A"}, {"id": 15, "category": {"1": ["CWE-682"]}, "title": "Fees are not added for most common case of zero-for-one exact output swaps", "description": "The function `_swapExactOut()` is missing the addition of fees for the case of zero-for-one exact output swaps that don\u2019t cross ticks, resulting in substantial loss of income for the Dfyn protocol and enabling profiting from arbitrage with smaller price differences.", "severity": "Minor", "contract": "SwapExcecuter.sol", "function": "_swapExactOut()", "lineNumber": "66-67"}, {"id": 16, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "MasterDeployer.sol: Function setDfynFee() can lower limitOrderFee so it is lower than LimitOrderManager.rebateRate for pool", "description": "A call to MasterDeployer.setDynFee() can lower the global limitOrderFee, and a subsequent call to function updateProtocolFee() on the pool can set its limitOrderFee to a value lower than the corresponding rebateRate[pool] value, resulting in insufficient fees collected to pay for the rebates when limit orders are claimed.", "severity": "Minor", "contract": "MasterDeployer.sol", "function": "setDfynFee()", "lineNumber": "N/A"}, {"id": 17, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Unvalidated Constructor Inputs", "description": "The Farm.sol contract constructor does not validate if _vault and _poolManager have valid values.", "severity": "Minor", "contract": "Farm", "function": "Constructor", "lineNumber": "N/A"}, {"id": 18, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "Incorrect documentation comment for MIN_FEE", "description": "The documentation comment for `MIN_FEE` seems to belong to `MAX_FEE`. Consider providing the correct documentation for the minimum fee value.", "severity": "Minor", "contract": "ConcentratedLiquidityPool.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 19, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Unnecessary Payable Function Declaration", "description": "The sweep() function in DfynRouter.sol is unnecessarily declared as payable, which may lead to unintended behavior.", "severity": "Minor", "contract": "DfynRouter", "function": "sweep()", "lineNumber": "N/A"}, {"id": 20, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-391"]}, "title": "Function setLimitOrderCharge() does not emit an event", "description": "The function setLimitOrderCharge() in LimitOrderManager.sol contract does not emit an event.", "severity": "Minor", "contract": "LimitOrderManager.sol", "function": "setLimitOrderCharge()", "lineNumber": "N/A"}, {"id": 21, "category": {"1": ["CWE-710"], "2": ["CWE-1120"], "3": ["CWE-1060"]}, "title": "Gas Optimization in subscribe() Function", "description": "Declaring the parameter `positionIds` as `calldata` instead of `memory` can potentially save on gas, since the array values would be directly read from `calldata` instead of being copied to `memory` first.", "severity": "Minor", "contract": "Farm.sol", "function": "subscribe()", "lineNumber": "N/A"}, {"id": 22, "category": {"1": ["CWE-703"]}, "title": "MixedRoutedQuoterV1.sol: Unnecessary use of require statement", "description": "N/A", "severity": "Minor", "contract": "MixedRouteQuoterV1", "function": "uniswapV3SwapCallback()", "lineNumber": "127"}, {"id": 23, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "LimitOrderManager.sol: Unnecessary use of return statement", "description": "The claimLimitOrder() function has an unnecessary if (amount == 0) return statement on line 165 because it is preceded by require(amount > 0) on the previous line, making the if statement irrelevant.", "severity": "Minor", "contract": "LimitOrderManager.sol", "function": "claimLimitOrder()", "lineNumber": "165"}, {"id": 24, "category": {"1": ["CWE-682"]}, "title": "LimitOrderManager.sol: Use of confusing function name", "description": "The getLimitOrderTokenBalance() function returns the owner address of a specific token id instead of a numerical balance as indicated by its name.", "severity": "Minor", "contract": "LimitOrderManager.sol", "function": "getLimitOrderTokenBalance()", "lineNumber": "N/A"}]}