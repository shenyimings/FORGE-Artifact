{
    "path": "./Audit_Reports_2024/Solidified/Solidified-Paraswap_[01.09.2021].pdf",
    "project_info": {
        "url": "https://github.com/BlockzeroLabs/vortex-contracts",
        "commit_hash": "82c7cc84df342948532a4af8009dec1dd5e10b13",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-610"
                ]
            },
            "title": "Staking rewards are entirely dependent on funds being transferred to the contract regularly",
            "description": "The contract depends on external sources for the rewards. Should Paraswap fail to feed additional PSP tokens into the contract, no rewards will be available on unstaking.",
            "severity": "Warning",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Initial rewards are assigned entirely to first staker",
            "description": "The way PSPs-PSP ratio is calculated when staking means that any PSP rewards seeded in the contract before staking commences are automatically assigned to the first staker.",
            "severity": "Major Issue",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Contract rewards are susceptible to front running and/or MEV (Miner Extractable Value)",
            "description": "The contract's reward distribution mechanism allows anyone to leverage MEV or front running to mint new sPSP tokens right before the rewards are distributed, claiming the reward meant for the original staker.",
            "severity": "Major",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "ERC-20 return values ignored",
            "description": "The contract ignores the return values of ERC-20 calls which can cause issues with tokens that do not revert on error and return false instead.",
            "severity": "Minor",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "User indexes and withdrawal index can be unsigned integers",
            "description": "The indexes used for keeping track of staking and withdrawal indexes per user are of type `int256`, which halves the number of available indexes and is less intuitive.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Consider providing a function for retrieving unlocked IDs",
            "description": "After calling `leave()`, users have no way to know their current pending unlocked withdrawal IDs except by checking all the `Unstaked()` logs that were emitted.",
            "severity": "Minor",
            "contract": "N/A",
            "function": "leave()",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Miscellaneous notes",
            "description": "The validation `require(request.status == WITHDRAW_STATUS.UNUSED, \"Invalid id\")` will always return true and can be removed.",
            "severity": "Note",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}