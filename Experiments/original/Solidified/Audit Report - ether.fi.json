{
    "path": "./Audit_Reports_2024/Solidified/Audit Report - ether.fi.pdf",
    "project_info": {
        "url": "https://github.com/GadzeFinance/dappContracts",
        "commit_hash": "56c67eff7d313d389ff612c0f0b2c41ae60e9b7a",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "MembershipManager.addNewTier uses the wrong length",
            "description": "The function `addNewTier` in `MembershipManager` performs a length check against `tierDeposits.length` instead of `tierData.length`, which is never modified in the function.",
            "severity": "Minor",
            "contract": "MembershipManager",
            "function": "addNewTier",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-436"
                ],
                "3": [
                    "CWE-115"
                ]
            },
            "title": "MembershipManager functions use LiquidityPool\u2019s eETH deposit flow",
            "description": "The `MembershipManager` \u2019s functions `wrapEthForEap` and `topUpDepositWithEth` incorrectly use `LiquidityPool` \u2019s deposit function intended for `eETH` staking flow, resulting in misleading events and bypassing the whitelist for users.",
            "severity": "Minor",
            "contract": "MembershipManager",
            "function": "wrapEthForEap, topUpDepositWithEth",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Misleading SourceOfFunds emitted in events",
            "description": "The withdraw function attempts to distinguish the `SourceOfFunds` and emit the information by using `msg.sender` to see if it is the `MembershipManager` or the `WithdrawRequestNFT` contract. However, since all withdrawals are handled via `WithdrawRequestNFT`, `SourceOfFunds.EETH` is always emitted.",
            "severity": "Minor",
            "contract": "LiquidityPool",
            "function": "withdraw()",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "numPendingDeposits is not updated on unsuccessful deposits",
            "description": "In `LiquidityPool.batchDepositAsBnftHolder`, `numPendingDeposits` is increased by `_numberOfValidators`, but if not all validators get deposited successfully, the variable is not modified to reflect the actual number of successful deposits awaiting registration.",
            "severity": "Minor",
            "contract": "LiquidityPool",
            "function": "batchDepositAsBnftHolder",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ]
            },
            "title": "Centralization Issues",
            "description": "Many aspects of the protocol are centralized and subject to the discretion of the EtherFi team.",
            "severity": "Minor",
            "contract": [
                "MembershipManager",
                "EtherFiOracle",
                "LiquidityPool",
                "WithdrawRequestNFT",
                "MembershipNFT"
            ],
            "function": [
                "withdrawFees",
                "setQuorumSize",
                "N/A",
                "N/A",
                "N/A"
            ],
            "lineNumber": [
                "N/A",
                "N/A",
                "N/A",
                "N/A",
                "N/A"
            ]
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Non exit penalty daily rate cannot be updated to a value greater than 1%",
            "description": "The setter function `setNonExitPenaltyDailyRate` within `EtherFiNodesManager` still enforces a maximum value of 100, which is now 1%, preventing updates to rates above 1%.",
            "severity": "Minor",
            "contract": "EtherFiNodesManager",
            "function": "setNonExitPenaltyDailyRate",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "EtherFiNodesManager does not verify that staking rewards split sums up to 100%",
            "description": "The function setStakingRewardsSplit does not check if the staking rewards split sums up to 100%, which can lead to loss of funds or failing withdrawals.",
            "severity": "Minor",
            "contract": "EtherFiNodesManager",
            "function": "setStakingRewardsSplit",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Burn fees from MembershipManager.unwrapForEEthAndBurn stay in the MembershipManager contract decreasing rewards for EtherFan holders.",
            "description": "The function `unwrapForEETHAndBurn` burns an `EtherFan` NFT, but the burn fee is left as an excess in the `MembershipManager`, which accumulates rewards. During rebase, this surplus of `eETH` decreases the amount distributed to each vault and subsequently NFT holders' boosted rewards.",
            "severity": "Minor",
            "contract": "MembershipManager",
            "function": "unwrapForEEthAndBurn",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-435"
                ]
            },
            "title": "console.sol is imported in various files",
            "description": "The file console.sol is imported in multiple contracts including MembershipNFT.sol, MembershipManager.sol, EtherFiAdmin.sol, EtherFiOracle.sol, LiquidityPool.sol, and GlobalIndexLibrary.sol.",
            "severity": "Informational",
            "contract": "Multiple Contracts (MembershipNFT.sol, MembershipManager.sol, EtherFiAdmin.sol, EtherFiOracle.sol, LiquidityPool.sol, GlobalIndexLibrary.sol)",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-703"
                ]
            },
            "title": "N/A",
            "description": "N/A",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "LiquidityPool.requestWithdraw checks against wrong upper limit",
            "description": "The function `requestWithdraw` in `LiquidityPool` contract performs an incorrect check by comparing `amount` to `type(uint128).max`, but then casts it to `uint96`. This could lead to problems if the user has an `eETH` balance larger than `type(uint96).max`.",
            "severity": "Minor",
            "contract": "LiquidityPool",
            "function": "requestWithdraw",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Incorrect report finalization check in EtherFiOracle.verifyReport",
            "description": "The comment in line 130 of EtherFiOracle.sol specifies that a report is considered finalized at current_epoch - 2. However, the check in line 134 is require(reportEpoch + 2 < currentEpoch), which means that a report is finalized while it is less than current_epoch - 2 and not finalized when it equals current_epoch - 2, contradicting the comment.",
            "severity": "Minor",
            "contract": "EtherFiOracle",
            "function": "verifyReport()",
            "lineNumber": "130, 134"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Any LiquidityPool admin could increase ethAmountLockedForWithdrawal",
            "description": "The function `LiquidityPool.addEthAmountLockedForWithdrawal` can be called by any admin, allowing them to inflate the amount of ETH locked for withdrawals.",
            "severity": "Note",
            "contract": "LiquidityPool",
            "function": "addEthAmountLockedForWithdrawal",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-862"
                ]
            },
            "title": "Anyone can call StakingManager.batchCancelDepositAsBnftHolder to cancel a deposit",
            "description": "The function `StakingManager.batchCancelDepositAsBnftHolder` lacks access control, allowing any user to call it and pass in the address of the corresponding BNFT holder, leading to a loss of funds for the BNFT holder.",
            "severity": "Critical",
            "contract": "StakingManager",
            "function": "batchCancelDepositAsBnftHolder",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "A BNFT Holder can cancel a deposit by bypassing the liquidity pool and receive the entire stake",
            "description": "A BNFT holder can bypass the LiquidityPool contract and call StakingManager.batchCancelDeposit to receive the full stake, including the amount provided by the LiquidityPool.",
            "severity": "Critical",
            "contract": "StakingManager",
            "function": "batchCancelDeposit",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-404"
                ],
                "3": [
                    "CWE-772"
                ],
                "4": [
                    "CWE-401"
                ]
            },
            "title": "Funds of recycled EtherFiNodes can be stolen",
            "description": "When a node is fully withdrawn using `EtherFiNodesManager.fullWithdraw`, the `EtherFiNode` is recycled but does not reset `etherfiNodeAddress[_validatorId]` to `address(0)`. This allows an attacker to partially withdraw rewards or fully withdraw the node's balance upon exit, distributing funds to previous BNFT & TNFT holders and node operator instead of legitimate owners.",
            "severity": "Critical",
            "contract": "EtherFiNodesManager",
            "function": "fullWithdraw()",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-358"
                ]
            },
            "title": "EtherFiOracle will not be able to reach consensus under some circumstances",
            "description": "The function `EtherFiOracle.submitReport` checks if the condition `consenState.support == quorumSize` is true whenever a report is submitted. However, the value of `quorumSize` can be modified by an owner with the function `setQuorumSize`. This can become very problematic when the quorum size is reduced and set to a value that is smaller than the current number of votes.",
            "severity": "Major",
            "contract": "EtherFiOracle",
            "function": "submitReport",
            "lineNumber": "N/A"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "The liquidity pool owner can redeem fully withdrawn, or slashed TNFTs for 30 ether",
            "description": "The function `LiquidityPool.swapTnftForEth` allows the owner of the liquidity pool to swap any TNFT for `30 ether`, regardless of its principal value or if it has been fully withdrawn and the TNFT holder already received back their stake.",
            "severity": "Major",
            "contract": "LiquidityPool",
            "function": "swapTnftForEth()",
            "lineNumber": "N/A"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Dust of eETH could be stuck in the WithdrawRequestNFT contract",
            "description": "Excess eETH can get stuck in the WithdrawRequestNFT contract if its value changes between withdrawal request and claim due to recalculation and rounding up of shares.",
            "severity": "Minor",
            "contract": "WithdrawRequestNFT",
            "function": "claimWithdraw",
            "lineNumber": "N/A"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Reliance on hard-coded gas number for ETH transfers can be problematic",
            "description": "The function `EtherFiNode.withdrawFunds` has a hard-coded gas limit of 2300 for ETH transfers to users, which may be too low for smart contracts that emit events or access state when receiving ETH.",
            "severity": "Minor",
            "contract": "EtherFiNode",
            "function": "withdrawFunds()",
            "lineNumber": "N/A"
        },
        {
            "id": 20,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "LiquidityPool\u2019s TNFT rewards and principal could be redirected to the treasury",
            "description": "Withdrawing a node's balance that belongs to a TNFT in the liquidity pool might revert due to underflow in `LiquidityPool`'s `receive` function, redirecting funds to the treasury and disadvantaging `eETH` and `EtherFan` holders.",
            "severity": "Minor",
            "contract": "LiquidityPool",
            "function": "receive()",
            "lineNumber": "N/A"
        },
        {
            "id": 21,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Partial withdrawals can be avoided by malicious users",
            "description": "The `EtherFiNodesManager.partialWithdrawBatchGroupByOperator` function does not set any limits when sending ether to different roles, allowing a malicious actor to prevent partial withdrawals by using up all remaining gas.",
            "severity": "Minor",
            "contract": "EtherFiNodesManager",
            "function": "partialWithdrawBatchGroupByOperator()",
            "lineNumber": "N/A"
        },
        {
            "id": 22,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Error in WithdrawRequestNFT.requestWithdraw validation logic",
            "description": "The function `requestWithdraw` has an off-by-one error in its validation logic, where it checks if `tokenId <= nextRequestId`. However, when `tokenId` is equal to `nextRequestId`, this check should also fail.",
            "severity": "Minor",
            "contract": "WithdrawRequestNFT",
            "function": "requestWithdraw()",
            "lineNumber": "N/A"
        },
        {
            "id": 23,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "EtherFiOracle.numActiveCommitteeMembers can return wrong values",
            "description": "The variable `numActiveCommitteeMembers` does not decrement when an active committee member is removed using `removeCommitteeMember`, leading to incorrect values.",
            "severity": "Minor",
            "contract": "EtherFiOracle",
            "function": "removeCommitteeMember",
            "lineNumber": "N/A"
        },
        {
            "id": 24,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Any MembershipManager admin could rebase using an arbitrary amount of accrued rewards.",
            "description": "The function `MembershipManager.rebase` can be called by any admin with an arbitrary amount of accrued rewards, potentially compromising the integrity of `eETH` value.",
            "severity": "Minor",
            "contract": "MembershipManager",
            "function": "rebase()",
            "lineNumber": "N/A"
        }
    ]
}