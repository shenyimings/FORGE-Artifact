{
    "path": "./Audit_Reports_2024/Solidified/Audit Report - Poseidon DAO [09.12.2022].pdf",
    "project_info": {
        "url": "https://github.com/Poseidon-DAO/poseidon-token",
        "commit_hash": "520bf1e4c19788285d78ec0db183fb75dd24dd88",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Inconsistent decimals for amount parameter",
            "description": "Some functions expect an amount with the token\u2019s decimals while others multiply by `10 ** _decimals`, leading to confusion and potential errors.",
            "severity": "Minor",
            "contract": "N/A",
            "function": [
                "initialize",
                "runAirdrop",
                "burnAndReceiveNFT",
                "addVest",
                "airdropVest"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "ERC20_PDN.sol: Function deleteVest does not remove vest amounts from ownerLock",
            "description": "The function `deleteVest` does not subtract the deleted vests' amounts from the `ownerLock` storage variable, which may cause tokens to be locked forever.",
            "severity": "Critical",
            "contract": "ERC20_PDN.sol",
            "function": "deleteVest",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Inconsistent Scaling of Airdrop Amount with Decimals",
            "description": "The runAirdrop function scales the amount to transfer with _decimals but does not do so when subtracting from availableOwnerBalance, resulting in an incorrect balance. The require statement for INSUFFICIENT_OWNER_BALANCE also does not scale it.",
            "severity": "High",
            "contract": "ERC20_PDN.sol",
            "function": "runAirdrop",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "ERC20_PDN.sol: The burn functionality is missing ownerLock checks",
            "description": "The burn and burnAndReceiveNFT functions do not check if the owner's balance will be less than ownerLock after transfer, which can result in the owner having a balance that is less than ownerLock.",
            "severity": "Major",
            "contract": "ERC20_PDN.sol",
            "function": [
                "burn",
                "burnAndReceiveNFT"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-697"
                ]
            },
            "title": "Incorrect Balance Comparison",
            "description": "The `burnAndReceive` function does not scale down the `msg.sender` balance before comparison, leading to an incorrect check.",
            "severity": "Minor",
            "contract": "ERC20_PDN.sol",
            "function": "burnAndReceive",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Vested unclaimed amounts can be deleted",
            "description": "The function `deleteVest` can be used to delete entries in `vestList` that are already claimable but were not claimed yet by the user. This may be undesirable because vesting usually implies that a user is guaranteed to get the tokens after the expiration date has expired.",
            "severity": "Minor",
            "contract": "ERC20_PDN.sol",
            "function": "deleteVest",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-1288"
                ]
            },
            "title": "Unused Event DAOConnectionEvent",
            "description": "The event `DAOConnectionEvent` is not used anywhere, it is just declared.",
            "severity": "Informational",
            "contract": "ERC20-PDN.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "ERC20-PDN.sol: Function burn has a wrong comment",
            "description": "The NatSpec of `burn` says it emits `OwnerChangeEvent` which is incorrect, such event is not emitted in the function.",
            "severity": "Minor",
            "contract": "ERC20-PDN.sol",
            "function": "burn",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Unnecessary Use of SafeMathUpgradeable",
            "description": "The project is using SafeMathUpgradeable but it's not needed since Solidity compiler version 0.8.0 introduced built-in math checks.",
            "severity": "Minor",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-697"
                ]
            },
            "title": "Valid ERC1155 ID 0 not accepted in setERC1155",
            "description": "The function setERC1155 does not accept ID 0 as a valid ERC1155 token ID, which may be too restrictive.",
            "severity": "Minor",
            "contract": "N/A",
            "function": "setERC1155()",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "airdropVest does not use the constant SECURITY_DELAY",
            "description": "Instead of using the constant `SECURITY_DELAY`, the function `airdropVest` uses the value 5760 directly. This can be error-prone, because the value needs to be changed in multiple cases if the delay is changed at some point in the future.",
            "severity": "Minor",
            "contract": "N/A",
            "function": "airdropVest",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Inconsistent Duration Unit",
            "description": "The `_duration` parameter in `addVest` function of ERC20_PDN.sol is not a duration in seconds but an amount of blocks, which can lead to errors and unintuitive behavior.",
            "severity": "Minor",
            "contract": "ERC20_PDN",
            "function": "addVest",
            "lineNumber": "N/A"
        }
    ]
}