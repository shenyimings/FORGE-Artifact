{
    "path": "./Audit_Reports_2024/Hacken/Eesee_SC-Audit-Report_02022024_SA-2010.pdf",
    "project_info": {
        "url": "https://gitlab.com/eesee.io/network/eesee-contracts",
        "commit_hash": "8564a3153162b97fa3b107c3bd8342e67cf6867e",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Potential Risk of Inconsistent Financial Calculations due to Unchecked Arithmetic Operations and Inconsistent Integer Usage",
            "description": "Miscalculations in reward distribution and fund management. Casting errors affecting user balances and transaction accuracy. Inconsistent or erroneous updates of contract state variables.",
            "severity": "High",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Absence of Reentrancy Guard in Eesee Ecosystem Contracts Handling Multiple Asset Types",
            "description": "The Eesee ecosystem contracts lack a reentrancy guard mechanism despite adhering to the Checks-Effects-Interactions (CEI) pattern, presenting a latent risk when managing multiple asset types and complex custom implementations.",
            "severity": "Medium",
            "contract": "Eesee Ecosystem Contracts",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Duplicate Winner Determination Logic in Eesee Contract Functions",
            "description": "The audit report finding I06 indicates the presence of duplicate winner determination logic within Eesee contract functions.",
            "severity": "N/A",
            "contract": "Eesee",
            "function": "N/A",
            "lineNumber": "39"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Inefficient Double Loop in mintDrops() Function",
            "description": "Leading to Gas Overhead",
            "severity": "Medium",
            "contract": "EeseeDrops",
            "function": "mintDrops()",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "I08. Lack of Bounds Checking for Lot Array Access in Multiple Functions of Eesee.sol",
            "description": "Several functions including receiveAssets, receiveTokens, reclaimAssets, reclaimTokens, and _buyTickets access the lots array without proper bounds checking leading to a runtime error if called with an index that does not exist in the lots array.",
            "severity": "N/A",
            "contract": "Eesee.sol",
            "function": "receiveAssets(), receiveTokens(), reclaimAssets(), reclaimTokens(), _buyTickets()",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "I09. Inefficient Minting Process in ESE Token _beforeTokenTransfer()",
            "description": "The _beforeTokenTransfer function of the ESE token contract has an inefficient minting process, resulting in unnecessary minting calls and gas consumption when releasableAmount is zero.",
            "severity": "Medium",
            "contract": "ESE",
            "function": "_beforeTokenTransfer()",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "C01. Reusable msg.value Allows Multiple Lot Creation with Single Payment in multicall() Function",
            "description": "The multicall function does not account for the cumulative msg.value when processing multiple delegate calls to the createLots function, allowing a malicious actor to create multiple lots while only paying for one.",
            "severity": "Critical",
            "contract": "Eesee.sol and Multicall.sol",
            "function": "createLots(), createLotsAndBuyTickets() and multicall()",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "C02. Premature Asset Claim in receiveAssets() Function due to Missing Closure Check",
            "description": "The receiveAssets function lacks necessary validation, allowing claims before closure and going against fair and complete participation logic.",
            "severity": "High",
            "contract": "Eesee",
            "function": "receiveAssets()",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-354"
                ]
            },
            "title": "C03. Inadequate msg.value Validation in createLots() Allows Multiple Lot Creation with Single Payment",
            "description": "The createLots function lacks proper validation of msg.value, enabling malicious actors to create multiple lots with a single payment.",
            "severity": "Critical",
            "contract": "N/A",
            "function": "createLots()",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "H01. Incorrect Calculation of maxESE Due to Bitwise XOR Operator Misapplication Instead of Exponentiation Operator",
            "description": "The caret symbol (^) is mistakenly used instead of the double asterisk (**) which is the correct operator for exponentiation in Solidity, resulting in an incorrect maxESE value.",
            "severity": "Medium",
            "contract": "Eesee",
            "function": "_createLot()",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "H02. Fixed Fee Calculation in EeseeRaribleRouter Incompatible with Rarible's Dynamic Fee Structure",
            "description": "In the purchaseAsset function of EeseeRaribleRouter, the fixed fee calculation is incompatible with Rarible's dynamic fee structure, which varies based on the USD price of the NFT at the time of sale.",
            "severity": "Medium",
            "contract": "EeseeRaribleRouter",
            "function": "purchaseAsset()",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "H03. Front-Running and Indiscriminate Lock-Up Extensions Due to Untracked Deposit Durations in Staking Contract",
            "description": "The staking contract fails to separately track lock-up durations associated with individual deposits, leading to front-running exposure and indiscriminate lock-up extensions when an admin increases the lock-up duration, breaching expected terms and constituting a form of transaction order manipulation.",
            "severity": "Critical",
            "contract": "Staking Contract",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-369"
                ]
            },
            "title": "M01. Zero Reward Rate Setting in updateRewardRates() Function Can Nullify Staking Yields",
            "description": "The lack of validation against setting a reward rate to zero within the updateRewardRates function can halt the reward accumulation process, leading to scenarios where stakers do not receive any rewards.",
            "severity": "Critical",
            "contract": "EeseeStaking",
            "function": "updateRewardRates()",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "M02. ESE Token Supply Cap Inconsistency with Tokenomics",
            "description": "In the ESE token contract, there is a potential inconsistency with the project tokenomics that stipulates a maximum supply cap of 1,000,000,000 (one billion) ESE tokens. The current implementation allows the total supply to potentially exceed this cap.",
            "severity": "High",
            "contract": "./contracts/token/ESE.sol",
            "function": "addVestingBeneficiaries()",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Immutable callbackGasLimit in Chainlink VRF Consumer Restricts Adaptability to Gas Fluctuations",
            "description": "The EeseeRandom contract has an immutable private variable callbackGasLimit that sets the Gas limit for Chainlink VRF callbacks, restricting adaptability to fluctuating Gas prices on the Ethereum network.",
            "severity": "Medium",
            "contract": "EeseeRandom",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "L01. Immutable Payee Information in EeseeFeeSplitter Contract May Lead to Funds Misallocation",
            "description": "The EeseeFeeSplitter smart contract lacks functionality to update payee information post-deployment, leading to potential funds misallocation due to changes in business structure or payee addresses.",
            "severity": "Medium",
            "contract": "EeseeFeeSplitter",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-693"
                ]
            },
            "title": "L02. Absence of Pausable Mechanisms in Eesee Contracts Risks Uncontrolled Exposure to External Vulnerabilities",
            "description": "The Eesee ecosystem lacks emergency halting mechanisms or circuit breakers, presenting a significant risk as these contracts interact with external and potentially upgradable platforms.",
            "severity": "Medium",
            "contract": "EeseeOpenseaRouter, EeseeRaribleRouter, EeseeSwap, EeseePeriphery",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-362"
                ]
            },
            "title": "L03. Potential Front-Run with changeFee() for Eesee.sol and EeseeDrops.sol",
            "description": "There exists a potential race condition in both the Eesee.sol and EeseeDrops.sol smart contracts, allowing an authorized admin to change the fee percentage before user transactions, leading to unpredictable and possibly unfair costs for users.",
            "severity": "Medium",
            "contract": "Eesee.sol, EeseeDrops.sol",
            "function": "createLots(), listDrop(), changeFee()",
            "lineNumber": "N/A"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "I01. Style Guide Violation",
            "description": "The code does not align with the DRY principle and needs to be streamlined.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Optimization for Gas Efficiency and Logical Ordering in claimRewards() Function",
            "description": "Inefficient ordering of operations in claimRewards function, causing potential gas inefficiency.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "claimRewards()",
            "lineNumber": "N/A"
        },
        {
            "id": 20,
            "category": {
                "1": [
                    "CWE-703"
                ]
            },
            "title": "Potential Silent Failures in Volume Updating Calls in Eesee and",
            "description": "The Eesee and EeseeDrops contracts implement a function (buyTickets and mintDrops, respectively) that include a call to staking.addVolume within a try-catch block. However, the catch block is empty, potentially leading to silent failures.",
            "severity": "N/A",
            "contract": "Eesee and EeseeDrops",
            "function": "buyTickets() and mintDrops()",
            "lineNumber": "./contracts/marketplace/Eesee.sol : buyTickets()\n./contracts/marketplace/EeseeDrops.sol : mintDrops()\n./contracts/rewards/EeseeStaking.sol : addVolume()"
        }
    ]
}