{
    "path": "./Audit_Reports_2024/Hacken/Paydece_SC-Audit-Report_02112023_SA-1881.pdf",
    "project_info": {
        "url": "https://github.com/PayDece/paydece-contracts/tree/v4",
        "commit_hash": "be0b8ce8b7a381dd89add981ba1dc32c6587ba0b",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "The maker fee is locked inside the contract when escrow is canceled or refunded",
            "description": "When an escrow is canceled or refunded, the maker fee is permanently locked in the contract instead of being returned to the maker.",
            "severity": "Critical",
            "contract": "PaydeceEscrow.sol",
            "function": [
                "CancelMaker()",
                "CancelMakerOwner()",
                "CancelTaker()",
                "CancelTakerOwner()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Missing functionality for cancellation of escrow holding native tokens",
            "description": "The contract lacks a mechanism to cancel escrows denominated in native tokens (wei).",
            "severity": "High",
            "contract": "PaydeceEscrow.sol",
            "function": "CancelMaker(), CancelMakerOwner()",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "H02. Users funds could be locked due to incorrect escrow status check",
            "description": "Users' funds can be locked due to an incorrect escrow status check.",
            "severity": "High",
            "contract": "PaydeceEscrow.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Owner can drain users\u2019 funds from contract with refund mechanism",
            "description": "The contract owner has the authority to initiate refunds to escrow creators when disputes arise, but lacks a formal dispute resolution mechanism and proper status checks, allowing the owner to drain users' funds.",
            "severity": "High",
            "contract": "N/A",
            "function": "refundMaker(uint _orderId)",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "M01. Lack of strict validation of msg.value can lead to funds lock",
            "description": "Due to the lack of precise validation of msg.value, there is a risk of locking funds inside the contract.",
            "severity": "Medium",
            "contract": "PaydeceEscrow.sol",
            "function": "createEscrowNativeCoin()",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "L01. Zero-valued escrows",
            "description": "It is recommended to implement conditional checks for the zero-valued transaction for createEscrow() and createEscrowNativeCoin() functions.",
            "severity": "Low",
            "contract": "PaydeceEscrow",
            "function": "createEscrow(), createEscrowNativeCoin()",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "L02. Missing zero address check",
            "description": "There is a possibility to set a zero address for the taker in creating the escrow process, which could not be completed (only canceled), as ERC20 transfer function in escrow release checks if the recipient address is not 0.",
            "severity": "Low",
            "contract": "PaydeceEscrow",
            "function": [
                "createEscrow()",
                "createEscrowNativeCoin()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "L03. Optimizing variable assignment in the constructor",
            "description": "Within the constructor(), there is a redundant assignment of a value of 0 to both the feeTaker and feeMaker variables. This redundancy is unnecessary since, for variables of type uint256, the default value is inherently set to 0, making the explicit assignment superfluous.",
            "severity": "Medium",
            "contract": "PaydeceEscrow.sol",
            "function": "constructor()",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-391"
                ]
            },
            "title": "L04. Missing event for critical value updation",
            "description": "The functions setFeeTaker(), setFeeMaker(), setTimeProcess(), addStablesAddresses(), and delStablesAddresses() do not emit events when important values change, which can lead to a significant drawback as users and external systems may be unable to subscribe to events to monitor and track important changes in the project.",
            "severity": "Low",
            "contract": "PaydeceEscrow.sol",
            "function": "setFeeTaker(), setFeeMaker(), setTimeProcess(), addStablesAddresses() and delStablesAddresses()",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "L05. Fee on transfer tokens can break contract logic",
            "description": "Fees on transfer tokens could break escrow flow due to incorrect accounting, potentially causing funds to become locked in the contract.",
            "severity": "Low",
            "contract": "PaydeceEscrow.sol",
            "function": "N/A",
            "lineNumber": "*"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "L06. Makers can omit fee payment",
            "description": "Makers can potentially avoid fees, regardless of their premium status by manipulating the _maker_premium and _taker_premium parameters.",
            "severity": "High",
            "contract": "PaydeceEscrow.sol",
            "function": "createEscrow() and createEscrowNativeCoin()",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ],
                "3": [
                    "CWE-680"
                ]
            },
            "title": "L07. Usage of built-in transfer",
            "description": "The built-in transfer() and send() functions process a hard-coded amount of Gas. In case the receiver is a contract with receive or fallback function, the transfer may fail due to the \u201cout of Gas\u201d exception.",
            "severity": "Low",
            "contract": "PaydeceEscrow.sol",
            "function": "cancelTakerNative();",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-477"
                ]
            },
            "title": "I01. Outdated Solidity version",
            "description": "The contract uses an outdated Solidity version, which can lead to security vulnerabilities.",
            "severity": "High",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-710"
                ]
            },
            "title": "I02. Style guide violation",
            "description": "Naming conventions were changed according to the Solidity Style Guide.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Functions that can be declared external",
            "description": "Public functions that are never called in the contract should be declared as external to make code easier to understand.",
            "severity": "N/A",
            "contract": "PaydeceEscrow.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1164"
                ],
                "3": [
                    "CWE-561"
                ]
            },
            "title": "I04. Unused escrowStatus enum values",
            "description": "The contract implements Escrow statuses named ACTIVE, DELETED, APPEALED, and RELEASE but never uses them, leading to increasing Gas needed for deployment and decreasing code quality.",
            "severity": "Informational",
            "contract": "PaydeceEscrow",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-710"
                ]
            },
            "title": "I05. Solidity style guide violation - naming conventions",
            "description": "Naming conventions were changed according to the Solidity Style Guide.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "I06. State variables default visibility",
            "description": "Variable whitelistedStablesAddresses visibility is not specified, which can lead to incorrect assumptions about who can access the variable and decrease code quality.",
            "severity": "N/A",
            "contract": "PaydeceEscrow.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Variables can be downcasted to smaller size",
            "description": "Variables feeTaker and feeMaker can be downcasted from uint256 to uint16 type, and variable timeProcess can be downcasted from uint256 to uint64 type to save memory slots.",
            "severity": "N/A",
            "contract": "PaydeceEscrow.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1061"
                ]
            },
            "title": "I08. NatSpec and error messages are written in 2 languages",
            "description": "NatSpec comments and error messages are written in two languages, decreasing code quality and contract readability.",
            "severity": "N/A",
            "contract": "PaydeceEscrow.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 20,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "I09. Unfinalized code",
            "description": "The implementation contains commented code and duplicated code segments.",
            "severity": "Medium",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 21,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "I10. Code duplication",
            "description": "Refactor the duplicated code segments into reusable functions or employ appropriate design patterns to eliminate code duplication.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 22,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "I11. Blacklisted addresses in USDC",
            "description": "The Paydence Escrow contract uses the USDC stablecoin which includes a blacklist feature for both transfer sender and receiver, designed to prevent blacklisted users from utilizing the stablecoin. If a blacklisted taker is defined in the escrow process, it becomes impossible to complete the escrow flow and collect maker and taker fees.",
            "severity": "Informational",
            "contract": "PaydeceEscrow.sol",
            "function": "N/A",
            "lineNumber": "*"
        },
        {
            "id": 23,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "I12. Redundant calculation",
            "description": "N/A",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 24,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "I13. Redundant check",
            "description": "Redundant conditional checks within Solidity smart contracts refer to situations where multiple conditional statements exist to validate the same condition, resulting in unnecessary complexity and potential confusion.",
            "severity": "N/A",
            "contract": "PaydeceEscrow",
            "function": "createEscrow()",
            "lineNumber": "./contracts/PaydeceEscrow.sol: createEscrow()"
        },
        {
            "id": 25,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1120"
                ],
                "3": [
                    "CWE-1060"
                ]
            },
            "title": "I14. Use custom errors instead of error strings to save Gas",
            "description": "Using custom errors can save approximately 50 Gas each time they are hit because they avoid the need to allocate and store revert strings, resulting in cost savings.",
            "severity": "Medium",
            "contract": "PaydeceEscrow.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}