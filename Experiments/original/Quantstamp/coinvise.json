{"path": "./Audit_Reports_2024/Quantstamp/coinvise.pdf", "project_info": {"url": "https://github.com/coinvise-contracts", "commit_hash": "d0c58fc", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-703"]}, "title": "N/A", "description": "N/A", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Signer Address Exploit", "description": "In NFTAirdrop.claim and Coinvise.claim following the r s , and v inputs, the signer address result can be manipulated to be the 0x0 address. If for any reason trustedAddress is set to zero by the owner or if the address is not correctly initialized, attackers may claim all NFTs available from any campaign.", "severity": "Medium", "contract": "NFTAirdrop.sol, Coinvise.sol", "function": "claim()", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-284"], "2": ["CWE-269"]}, "title": "ERC721Token Not Enforcing onlyOwner", "description": "ERC721Token inherits from Ownable but does not enforce ownership on specific functions, allowing anyone to mint NFTs of the collection created by the owner.", "severity": "Medium Risk", "contract": "Erc721Token.sol", "function": "mintTo() and mint()", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1287"]}, "title": "Duplicated Names and Symbols Allowed", "description": "Validation of a listing in NFTMarketplace.sol may not be correct in buyNftInEth() and buyNftInErc20Tokens() because the same NFT can be listed multiple times for ETH or ERC20s under different IDs. Also, unlisting only clears the entry in _listedNftTokenIds EnumerableSet.Uintset and does not clear the nftListingById mapping. The same NFT can occupy multiple nftListingById mapping if it gets listed after being delisted. Meanwhile, contract TokenDeployer allows any users to deploy ERC20Token but there is no check for duplicated names or symbols.", "severity": "Medium Risk", "contract": "NFTMarketplace.sol, TokenDeployer.sol", "function": "buyNftInEth(), buyNftInErc20Tokens()", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-284"]}, "title": "Reentrancy and Arbitrary Token Contracts", "description": "NFTAirdrop.createCampaign() is external view and has no restriction on the input contract _tokenAddress or msg.sender, making it an easy target for reentrancy attacks. Similar issues exist in NFTMarketplace.listNftInEth(), Distribution.sol, and Marketplace.sol.", "severity": "Medium Risk", "contract": "NFTAirdrop, NFTMarketplace, Distribution, Marketplace", "function": "createCampaign(), listNftInEth()", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Integer Overflow of Financial Variables", "description": "Integer overflow/underflow occurs when an integer hits its bit-size limit and may cause many unexpected kinds of behavior.", "severity": "Medium Risk", "contract": "EthPool.sol, NFTAirdrop.sol", "function": "receiveMaticEquivalent(), createCampaign()", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-682"]}, "title": "Truncation Error in Coinvise.depositToken", "description": "The formula implemented in Coinvise.depositToken to calculate the user's deposit fees truncates _amount when dividing it by decimalsZeros , this error will lead users to pay less or no fees.", "severity": "Medium Risk", "contract": "Coinvise.sol", "function": "depositToken()", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-664"], "2": ["CWE-404"], "3": ["CWE-772"], "4": ["CWE-775"]}, "title": "Unwithdrawable Unsold Deposit", "description": "In Coinvise contract all unsold deposits cannot be withdrawn. There is no function in the contract to allow owners of deposits to withdraw their funds.", "severity": "Medium Risk", "contract": "Coinvise.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Denial-of-Service (DoS)", "description": "A Denial-of-Service (DoS) attack is a situation in which an attacker renders a smart contract unusable. Contract NFTMarketplace allows any user to list more NFTs, with an identifier recorded on L222 as _listedNftTokenIds.add(nftListing.listingId); . For usability, you have to view the state of the current market with getCurrentNftListingIds() . The later function eventually will revert if a malicious user or any user adds enough NFTs to consume the gas limit of transactions.", "severity": "Low", "contract": "NFTMarketplace.sol", "function": "getCurrentNftListingIds()", "lineNumber": "L222"}, {"id": 9, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Dusting", "description": "Possible dusting on Coinvise.sol if _amountPerLink is not specified properly by the campaign manager in createCampaign().", "severity": "Low Risk", "contract": "Coinvise.sol", "function": "createCampaign()", "lineNumber": "N/A"}, {"id": 10, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Price Checks Missing", "description": "Lack of minimal price checks can lead to a seller incorrectly specifying a very low or very high listing price on NFTMarketplace.sol.", "severity": "Low Risk", "contract": "NFTMarketplace.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 11, "category": {"1": ["CWE-284"], "2": ["CWE-282"], "3": ["CWE-708"]}, "title": "Privileged Roles and Ownership", "description": "Smart contracts will often have owner variables to designate the person with special privileges to make modifications to the smart contract.", "severity": "Low Risk", "contract": "Coinvise.sol, NFTMarketplace.sol, EthPool.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 12, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Gas Consumption Concerns for Unbounded Structures", "description": "Gas usage issues may prevent the contract from providing services entirely due to unbounded structures such as arrays requiring too much gas to exit.", "severity": "Low Risk", "contract": ["NFTAirdrop.sol", "Distribution.sol"], "function": ["getCampaignIdsFromManager()", "getCampaign()"], "lineNumber": "N/A"}, {"id": 13, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-253"]}, "title": "ERC20 Might Be Unpausable", "description": "In case there is no explicit _minter != address(0) in ERC20Token _mint == (address(0) ), then pause() and unpause() will fail.", "severity": "Low Risk", "contract": "ERC20Token.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 14, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Missing Input Validations", "description": "Checking inputs in smart contracts will allow the avoidance of invalid internal states or spending gas in generating invalid instances that are not useful.", "severity": "Low Risk", "contract": ["ERC20Token", "Erc721Token", "NFTAirdrop", "Coinvise", "NFTMarketPlace"], "function": ["constructor()", "_mint()", "mintTo()", "initialize()"], "lineNumber": "N/A"}, {"id": 15, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-732"]}, "title": "Fee Deposit", "description": "Coinvise.createCampaignMeta allows creation of campaigns without ETH deposit as opposed to Coinvise.createCampaign. The same issue is applicable for multisend.", "severity": "Low Risk", "contract": "Coinvise.sol", "function": "createCampaignMeta()", "lineNumber": "N/A"}, {"id": 16, "category": {"1": ["CWE-682"]}, "title": "Truncation Error in NFTMarketPlace._calculateCut", "description": "The formula implemented in NFTMarketPlace._calculateCut to calculate the fees truncates _amount when dividing it by (10**(premiumPercentageDecimals.add(2))) .", "severity": "Low Risk", "contract": "NFTMarketPlace", "function": "_calculateCut", "lineNumber": "N/A"}, {"id": 17, "category": {"1": ["CWE-682"]}, "title": "Uncommon Pattern for Fees", "description": "The contracts specify < 1% fee in a non-standard way using premiumPercentage and premiumPercentageDecimals instead of basis points.", "severity": "Informational", "contract": "Coinvise.sol, NFTMarketplace.sol", "function": "N/A", "lineNumber": "460-465"}, {"id": 18, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-394"]}, "title": "Unlocked Pragma", "description": "Every Solidity file specifies a version number with an unlocked pragma, which means the compiler will use the specified version and above, potentially leading to unexpected behavior.", "severity": "Informational", "contract": "Multiple (EthPool.sol, NFTAirdrop.sol, TokenDeployer.sol, MaticToken.sol, etc.)", "function": "N/A", "lineNumber": "N/A"}, {"id": 19, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Missing Gasless ecrecover Checks", "description": "The function executeMetaTransaction() calls verify() on EIP712MetaTransaction that invokes ecrecover without safety checks on _v, _r, and _s, which may allow for signature malleability.", "severity": "Informational", "contract": ["EIP712MetaTransaction", "NFTAirdrop"], "function": ["executeMetaTransaction()", "claim()"], "lineNumber": "N/A"}, {"id": 20, "category": {"1": ["CWE-693"], "2": ["CWE-807"]}, "title": "Allowance Double-Spend Exploit", "description": "The contract is vulnerable to the allowance double-spend exploit as with other ERC20 tokens.", "severity": "Informational", "contract": "Erc20Token.sol", "function": "transferFrom()", "lineNumber": "N/A"}]}