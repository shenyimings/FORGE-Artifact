{
    "path": "./Audit_Reports_2024/Quantstamp/capsule-nft.pdf",
    "project_info": {
        "url": "https://github.com/curveballdaniel/capsule/tree/master",
        "commit_hash": "master",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Access control vulnerability in CapsuleFactory.updateCapsuleCollectionOwner(...)",
            "description": "The function updateCapsuleCollectionOwner(...) has external visibility and no access control, allowing the owner of one capsule to transfer ownership of another capsule without consent.",
            "severity": "High Risk",
            "contract": "CapsuleFactory",
            "function": "updateCapsuleCollectionOwner(...)",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "CapsuleMinter does not check whether pre- and post-deposit ERC20 amounts are the same",
            "description": "In functions mintSingleERC20Capsule(...) and mintMultiERC20Capsule(...), there are no checks to determine whether the pre- and post-deposit ERC20 amounts are the same, which can be an issue when special, deflationary ERC20 contracts burn some percentage of the tokens in every token transfer.",
            "severity": "High",
            "contract": "CapsuleMinter.sol",
            "function": [
                "mintSingleERC20Capsule(...)",
                "mintMultiERC20Capsule(...)"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "Anyone can call initialize",
            "description": "The initialize function has no access control, allowing anyone to call it.",
            "severity": "High",
            "contract": "N/A",
            "function": "initialize()",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Collection tax and mint tax can be set to any value",
            "description": "The functions CapsuleFactory.updateCapsuleCollectionTax(...) and CapsuleMinter.updateCapsuleMintTax(...) can set arbitrary values for the collection tax and mint tax, respectively. This can lead to reduced gains or fund losses for users.",
            "severity": "Informational",
            "contract": [
                "contracts/CapsuleFactory.sol",
                "contracts/CapsuleMinter.sol"
            ],
            "function": [
                "updateCapsuleCollectionTax(...)",
                "updateCapsuleMintTax(...)"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Consider the use of _safeMint(...) instead of _mint(...)",
            "description": "The function `Capsule.mint(...)` calls `IERC721._mint(...)` instead of `IERC721._safeMint(...)` . However, OpenZeppelin discourages the use of  `IERC721._mint(...)` . The `_safeMint(...)` flavor of minting causes the recipient of the tokens, if it is a smart contract, to react upon receipt of the tokens.",
            "severity": "Informational",
            "contract": "Capsule",
            "function": "mint(...)",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-282"
                ],
                "3": [
                    "CWE-708"
                ]
            },
            "title": "Ownership can be renounced",
            "description": "The Ownable.sol has a function renounceOwnership() which can leave the contract without an owner, compromising critical operations such as adding/removing users, creating new Capsules, defining minting entities, collecting taxes/fees, and minting new tokens.",
            "severity": "Informational",
            "contract": "all ownable contracts",
            "function": "renounceOwnership()",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Some functions not sanitizing input addresses",
            "description": "Some functions receiving input addresses do not check if they are different from `address(0x0)`, nor that the given addresses refer to a contract (when applicable). Setting addresses incorrectly can lead to incorrect setups that will prevent contracts from working as expected.",
            "severity": "Informational",
            "contract": "CapsuleFactory",
            "function": "mintSimpleCapsule, mintSingleERC20Capsule, mintSingleERC721Capsule, mintMultiERC20Capsule, mintMultiERC721Capsule",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-391"
                ]
            },
            "title": "Missing the emission of events for important state transitions",
            "description": "Ideally, every important state change should be recorded by emitting events describing the past and the new state.",
            "severity": "Informational",
            "contract": "CapsuleFactory.sol, Capsule.sol, CapsuleMinter.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Arbitrary number of tokens in a single collection",
            "description": "The function `Capsule.lockCollectionCount(...)` does not provide an upper bound on the number of tokens that each collection can have. This can lead to gas concerns in use cases where the application has to go over the entire collection.",
            "severity": "Informational",
            "contract": "contracts/Capsule.sol",
            "function": "lockCollectionCount(...)",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-237"
                ],
                "4": [
                    "CWE-239"
                ]
            },
            "title": "Incorrect inheritance",
            "description": "Contracts inherit from interfaces but do not implement any functions, which can lead to calls to not-implemented functions.",
            "severity": "Informational",
            "contract": "CapsuleFactoryStorage, CapsuleMinterStorage",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Clone-and-Own",
            "description": "The clone-and-own approach involves copying and adjusting open source code at one's own discretion, which may involve risks such as not following best practices, containing security vulnerabilities, or including intentionally or unintentionally modified upstream libraries.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1164"
                ],
                "3": [
                    "CWE-561"
                ]
            },
            "title": "Unused blacklist functionality",
            "description": "Functions to manage the `blacklist` are implemented in the codebase but are not used in the audited contracts.",
            "severity": "Informational",
            "contract": "CapsuleFactory, CapsuleFactoryStorage, ICapsuleFactory, Errors",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-282"
                ],
                "3": [
                    "CWE-708"
                ]
            },
            "title": "Privileged roles and ownership",
            "description": "Smart contracts will often have `owner` variables to designate the person with special privileges to make modifications to the smart contract.",
            "severity": "Informational",
            "contract": "contracts/*",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Possibility of minting more than one NFT having the same URI",
            "description": "The function `Capsule.mint(...)` does not validate the input parameters `_account` and `_uri`. Thus, it is possible to mint more than one NFT having the same URI, and it is also possible to mint NFTs for `address(0x0)`. Finally, it is also possible to mint NFTs having empty URIs.",
            "severity": "Informational",
            "contract": "Capsule",
            "function": "mint(...)",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-436"
                ],
                "3": [
                    "CWE-115"
                ]
            },
            "title": "The same address can be at the whitelist and the blacklist simultaneously",
            "description": "An address can be added to both the whitelist and blacklist simultaneously, which may lead to unclear behavior and potential damage to users having funds locked in a Capsule.",
            "severity": "Informational",
            "contract": "CapsuleFactory.sol",
            "function": "addToWhitelist(...) and addToBlacklist(...)",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Users in minting whitelist can send Ether",
            "description": "All payable functions using `checkStatus` modifier allow whitelisted users in `mintWhitelist` to send ether.",
            "severity": "Informational",
            "contract": "CapsuleMinter.sol",
            "function": "[mintSimpleCapsule(...), mintSingleERC20Capsule(...), mintSingleERC721Capsule(...), mintMultiERC20Capsule(...), mintMultiERC721Capsule(...)]",
            "lineNumber": "N/A"
        }
    ]
}