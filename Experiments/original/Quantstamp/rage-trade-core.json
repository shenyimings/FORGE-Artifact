{
    "path": "./Audit_Reports_2024/Quantstamp/rage-trade-core.pdf",
    "project_info": {
        "url": "https://github.com/RageTrade/core/tree/ea881f6204f1bf7f065bd9a4b11ee792592c7230",
        "commit_hash": "ea881f6204f1bf7f065bd9a4b11ee792592c7230",
        "address": "0xFfefE40b54a0Eb3B35ee345ed356670B5AE50F5a",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Funds Drainable to teamMultisig()",
            "description": "Function ClearingHouse.withdrawProtocolFee() accepts an arbitrary list of addresses and transfers accumulated protocol.settlementToken from that contract to teamMultisig(), allowing an attacker to drain funds by deploying a smart contract with a function collectAccruedProtocolFee() that returns an arbitrary amount.",
            "severity": "High Risk",
            "contract": "ClearingHouse.sol",
            "function": "withdrawProtocolFee()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "No Guarantee that the Global Funding State for All Pools Will Be Updated on pause() unpause()",
            "description": "The global funding state must be updated for all pools during pause/unpause operation, but the list of pools to update is supplied as an argument, introducing a manual error risk.",
            "severity": "High Risk",
            "contract": "ClearingHouse.sol",
            "function": "pause() and unpause()",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "fixFee Not Reflected in Liquidation Related Operations",
            "description": "Liquidation related mechanisms in the protocol can have an additional fee called fixFee that are paid to keepers, in addition to the keeper fee. However, the internal functions that handle the liquidation mechanisms (ClearingHouse._removeLimitOrder(), ClearingHouse._liquidateLiquidityPositions(), and ClearingHouse._liquidateTokenPosition()) all pass 0 as the fixFee argument, instead of referencing the _getFixFee() function.",
            "severity": "Medium Risk",
            "contract": "ClearingHouse",
            "function": "_removeLimitOrder(), _liquidateLiquidityPositions(), _liquidateTokenPosition()",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Multicall Cannot Be Used by Keepers to Liquidate",
            "description": "When users call liquidation related functions in ClearingHouse.multicallWithSingleMarginCheck(), the accountId variable is always passed as the liquidation target. However, ClearingHouse.multicallWithSingleMarginCheck() always enforces the check ClearingHouse._getAccountAndCheckOwner() to ensure that msg.sender and the variable accountId are the same, meaning that the keeper cannot liquidate another account.",
            "severity": "Medium Risk",
            "contract": "ClearingHouse",
            "function": "multicallWithSingleMarginCheck()",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-282"
                ],
                "3": [
                    "CWE-708"
                ]
            },
            "title": "Privileged Roles and Ownership",
            "description": "Smart contracts will often have owner variables to designate the person with special privileges to make modifications to the smart contract.",
            "severity": "Low Risk",
            "contract": "ClearingHouse.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Use of Unsafe Casts",
            "description": "Primitive cast operations (int256(...)) are used, which are prone to over-/underflows.",
            "severity": "Low Risk",
            "contract": "Protocol.sol",
            "function": "N/A",
            "lineNumber": "L118"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Inverted Sign in the Funding Rate Calculation",
            "description": "The funding rate calculation in FundingPayment.getFundingRate() has an inverted sign because the funding rate is computed with the numerator int256(realPriceX128) - int256(virtualPriceX128), as opposed to the usual formula int256(virtualPriceX128) - int256(realPriceX128).",
            "severity": "Low Risk",
            "contract": "FundingPayment.sol, LiquidityPosition.sol, VTokenPosition.sol",
            "function": "getFundingRate(), unrealizedFundingPayment(), unrealizeFundingPaymment()",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Governance and Team Multisig Address Transfer Is Finalized Without Requiring Confirmation from the New Governance/Multisig Address",
            "description": "The governance or team multisig privileges can be transferred to another address simply by calling Governable.transferGovernance() or transferTeamMultisig() functions respectively, without requiring confirmation from the new governance/multisig address.",
            "severity": "Low Risk",
            "contract": "Governable.sol",
            "function": "transferGovernance() and transferTeamMultisig()",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-862"
                ]
            },
            "title": "VToken.setVPoolWrapper() Can Be Called by Anyone",
            "description": "The VToken contract has a function setVPoolWrapper() without permission check, allowing it to be called by anyone after deployment.",
            "severity": "Low Risk",
            "contract": "contracts/protocol/tokens/VToken.sol",
            "function": "setVPoolWrapper()",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Lack of Input Validations",
            "description": "There are no checks on whether the values being supplied on collateral, pool, or protocol parameter changes are reasonable or not.",
            "severity": "Low Risk",
            "contract": "ClearingHouse",
            "function": [
                "updateCollateralSettings()",
                "updatePoolSettings()",
                "updateProtocolSettings()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-354"
                ]
            },
            "title": "Unlocked Pragma",
            "description": "Every Solidity file specifies in the header a version number of the format pragma solidity (^)0.8.* . The caret ( ^ ) before the version number implies an unlocked pragma, meaning that the compiler will use the specified version and above.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Settlement Token Oracle Always Returning 1",
            "description": "The settlement token oracle function SettlementTokenOracle.getTwapPriceX128() always returns 1 (X128), as a healthy stablecoin value is assumed.",
            "severity": "Informational",
            "contract": "SettlementTokenOracle",
            "function": "getTwapPriceX128()",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Removed LiquidityPosition Is Still Calculated in maxNetPosition",
            "description": "LiquidityPositionSet.maxNetPosition does not stop even when encountering a removed/uninitialized LiquidityPosition.",
            "severity": "Undetermined",
            "contract": "LiquidityPositionSet.sol",
            "function": "maxNetPosition",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Removed LiquidityPosition Is Still Calculated in longSideRisk",
            "description": "LiquidityPositionSet.longSideRisk does not stop even when encountering a removed/uninitialized LiquidityPosition.",
            "severity": "Undetermined",
            "contract": "LiquidityPositionSet.sol",
            "function": "longSideRisk",
            "lineNumber": "N/A"
        }
    ]
}