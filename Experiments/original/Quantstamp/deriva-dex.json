{
    "path": "./Audit_Reports_2024/Quantstamp/deriva-dex.pdf",
    "project_info": {
        "url": "https://github.com/apalepu23/derivadex_v1/tree/master",
        "commit_hash": "master",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Aave accrued interest model may be gamed by users staking toward the end of an interval",
            "description": "The Aave accrued interest model can be exploited by users who stake a high amount of Aave tokens before the end of an interval, allowing them to gain more interest at the expense of other stakers.",
            "severity": "Medium Risk",
            "contract": "InsuranceFund.sol",
            "function": "transferTokensAave()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ]
            },
            "title": "Ignored exception cases in transfer functions",
            "description": "In `transferTokensAave()` and `transferTokensCompound()`, it is not clear why exceptions are ignored. If the transfer fails the transaction won't get reverted.",
            "severity": "Low Risk",
            "contract": "InsuranceFund.sol",
            "function": "transferTokensAave(), transferTokensCompound()",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Unable to remove collateral types in InsuranceFund",
            "description": "While new collateral types can be added, there is no way of removing an insurance fund collateral. If something goes wrong, it would stay in the contract forever, and could make loops over `collateralNames` more expensive.",
            "severity": "Low Risk",
            "contract": "InsuranceFund.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-749"
                ]
            },
            "title": "External tokens should be added cautiously to InsuranceFund",
            "description": "The function `addInsuranceFundCollateral()` allows the admin (governance) to admit new collateral types, which could be arbitrary tokens or contracts.",
            "severity": "Informational",
            "contract": "InsuranceFund.sol",
            "function": "addInsuranceFundCollateral()",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "DDX reward computation dependent on USD-pegged stable coins",
            "description": "The DDX reward computation is dependent on USD-pegged stable coins and can lead to unfair rewards if tokens with different face values are staked.",
            "severity": "Low",
            "contract": "InsuranceFund.sol",
            "function": "N/A",
            "lineNumber": "541-548"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-670"
                ],
                "3": [
                    "CWE-483"
                ]
            },
            "title": "Unclear if-case in claimDDXFromInsuranceMining()",
            "description": "On L678, it is not clear why `(stakeCollateral.flavor == InsuranceFundDefs.Flavor.Vanilla)` is mentioned, since the only case handled in the code is for Aave, due to the if-statement on L680.",
            "severity": "Undetermined",
            "contract": "InsuranceFund.sol",
            "function": "claimDDXFromInsuranceMining()",
            "lineNumber": "678-680"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-841"
                ]
            },
            "title": "Contract will not pause if multiple diamond facet upgrade transactions occur",
            "description": "If during an upgrade `diamondCut()` is called multiple times, this situation can create issues since the fallback function does not pause, meaning that the users will be exposed to upgraded functions and old functions waiting to be upgraded at the same time.",
            "severity": "Informational",
            "contract": "DiamondFacet.sol",
            "function": "fallback()",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Storage data packing can be optimized",
            "description": "All data packing for `DiamondStorageContract` is done manually when structures can be used instead.",
            "severity": "Informational",
            "contract": "DiamondFacet.sol, DiamondStorageContract.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Variable type inconsistency",
            "description": "Inconsistency in variable types where `facets` stores `address facet`, `uint32 slotIndex`, and `uint64 slotsIndex` in a single storage slot but loads them as `uint128`. This may lead to overflow, although the possibility is low.",
            "severity": "Informational",
            "contract": "DiamondStorageContract.sol, DiamondFacet.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "Allowance Double-Spend Exploit",
            "description": "The contract is vulnerable to the allowance double-spend exploit as with other ERC20 tokens.",
            "severity": "Informational",
            "contract": "DDX.sol, HDUMToken.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Gas Usage / for Loop Concerns",
            "description": "High gas costs may prevent users from wanting to use the smart contract and even prevent the contract from providing services entirely due to excessive gas usage in 'for' loops.",
            "severity": "Medium Risk",
            "contract": "InsuranceFund.sol",
            "function": [
                "advanceInsuranceMineInterval()",
                "claimDDXFromInsuranceMining()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "permit() does not validate ECDSA parameters",
            "description": "The function does not validate either of the `s` and `v` values.",
            "severity": "Medium Risk",
            "contract": "DDX.sol, DIFundToken.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Staking may result in loss of funds when different multipliers are used",
            "description": "When staking, users with higher multiplier values can get a higher collateral amount withdrawal than their initial deposit, and vice versa.",
            "severity": "Medium Risk",
            "contract": "InsuranceFund.sol",
            "function": "stakeToInsuranceFund() and withdrawFromInsuranceFund()",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "Flashloan Vote",
            "description": "Using getCurrentVotes() may make the system vulnerable to a flashloans vote, since it includes the user last CheckPoints even if it was created in the same block.",
            "severity": "Informational",
            "contract": "DDX.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}