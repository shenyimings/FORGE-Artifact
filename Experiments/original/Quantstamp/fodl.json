{"path": "./Audit_Reports_2024/Quantstamp/fodl.pdf", "project_info": {"url": "https://github.com/fodl", "commit_hash": "c0fe12b", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"], "2": ["CWE-1339"]}, "title": "Multiplication on the result of a division", "description": "Potential precision loss due to multiplication on the result of a division in the withdraw function.", "severity": "N/A", "contract": "FundsManager", "function": "withdraw(uint256,uint256)", "lineNumber": "41, 46"}, {"id": 1, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "Approvals are not reset to 0", "description": "Approvals are not reset to 0 after swaps in `exchange()`, `swapFromExact()`, and `swapToExact()`.", "severity": "Low Risk", "contract": "UniswapExchangerAdapter", "function": "exchange(), swapFromExact(), swapToExact()", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "createAccount() may fail if existing NFT is transferred", "description": "When creating a new account, the create2 salt is defined as uint256(keccak256(abi.encodePacked(msg.sender, fodlNFT.balanceOf(msg.sender)))), which may cause the createAccount() function to fail if an existing NFT is transferred.", "severity": "Low Risk", "contract": "FoldingRegistry.sol", "function": "createAccount()", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Uniswap exchanger does not allow multi-step paths", "description": "The function `exchange()` constructs a routing path between the `fromToken` and the `toToken`, however not all token pairs have a direct routing path in Uniswap. In such cases, it is often sufficient to create a routing path that first converts `fromToken` to ETH, and then from ETH to the `toToken`. The same issue exists for all functions that construct a routing path in the contract.", "severity": "Low Risk", "contract": "SushiswapExchangerAdapter", "function": "exchange()", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-703"]}, "title": "N/A", "description": "N/A", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-693"], "2": ["CWE-807"]}, "title": "Allowance Double-Spend Exploit", "description": "The contract is vulnerable to the allowance double-spend exploit as with other ERC20 tokens.", "severity": "Informational", "contract": "FodlToken/FodlToken.sol", "function": "approve() and transferFrom()", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-435"]}, "title": "Interaction with External Contracts", "description": "The protocol relies on functionalities of external contracts, which may be vulnerable to market manipulation, computational errors, etc.", "severity": "Informational", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-284"], "2": ["CWE-282"], "3": ["CWE-708"]}, "title": "Privileged Roles and Ownership", "description": "The contracts use the diamond pattern, which allows the owner to change implementations arbitrarily. The FundsManager implements a tax on withdrawals without a limit on the tax percentage.", "severity": "Informational", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-682"]}, "title": "Inaccurate BLOCKS_PER_YEAR", "description": "The constant `BLOCKS_PER_YEAR = 365 * 24 * 60 * 4` suggests 15 second block times, which does not reflect the typical block times for the past year of around 13 seconds. This will inflate the calculated supply and borrow APRs.", "severity": "Informational", "contract": "CompoundForksLendingAdapter.sol, AaveLendingAdapter.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 9, "category": {"1": ["CWE-682"]}, "title": "Constraints do not match inline comments", "description": "Constraints defined in the code do not match the corresponding inline comments.", "severity": "Informational", "contract": "SimplePositionStopLossConnector, StopLossStorage", "function": "N/A", "lineNumber": "N/A"}, {"id": 10, "category": {"1": ["CWE-710"], "2": ["CWE-1177"]}, "title": "Clone-and-Own", "description": "The clone-and-own approach involves copying and adjusting open source code at one's own discretion, which may involve security risks such as not following best practices or containing vulnerabilities.", "severity": "Informational", "contract": "UniswapV3Utils.sol, IWETH.sol, IERC20WithMetadata.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 11, "category": {"1": ["CWE-682"]}, "title": "Unclear use of create2 opcode", "description": "The `create2` opcode is used in the context where there is a need to predict the contract address before deploying it without proper documentation.", "severity": "Undetermined", "contract": "FoldingRegistry.sol", "function": "createAccount()", "lineNumber": "N/A"}]}