{
    "path": "./Audit_Reports_2024/Quantstamp/neo-swap.pdf",
    "project_info": {
        "url": "https://github.com/neoswap-ai/solana-multiway-swap",
        "commit_hash": "5d14610",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ]
            },
            "title": "Sol Deposit Can only Be Cancelled/Claimed by the Initializer",
            "description": "The cancel_sol() and claim_sol() functions check that the signer is the initializer of the swap. This means users cannot retrieve their funds themselves and require the admin to cancel/retrieve the deposit for them.",
            "severity": "Medium Risk",
            "contract": "N/A",
            "function": [
                "cancel_sol()",
                "claim_sol()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "validate_initialize() Does Not Check Expected Item Count",
            "description": "The validate_initialize() function does not check the expected number of items.",
            "severity": "Medium Risk",
            "contract": "N/A",
            "function": "validate_initialize()",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Instructions Can Inaccurately Return Success on Failure",
            "description": "Many functions iterate over swap data items and only perform an action if a specific condition is met. These functions use a transferred boolean to make sure the action is taken only once per function call, but the check will never be true, resulting in the functions returning Ok(()) despite failing.",
            "severity": "Low Risk",
            "contract": "lib.rs",
            "function": [
                "deposit_nft()",
                "deposit_sol()",
                "claim_sol()",
                "claim_nft()",
                "cancel_sol()",
                "cancel_nft()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-229"
                ],
                "4": [
                    "CWE-230"
                ]
            },
            "title": "Not Documenting Unchecked Accounts",
            "description": "Properly verifying the input accounts is one of the most important steps when trying to secure a Solana program. Anchor enforces this by requiring a /// CHECK: annotation with the reason for why an account does not use a checked type.",
            "severity": "Low Risk",
            "contract": "lib.rs",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Automatically Closing Associated Token Accounts Never Works",
            "description": "The functions claim_nft() and cancel_nft() contain code that checks whether the swap's associated token account no longer contains any tokens and can be closed. However, this check will always fail because the transfer happens in the same instruction without reloading the account data in-between.",
            "severity": "Low Risk",
            "contract": "lib.rs",
            "function": "claim_nft() and cancel_nft()",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-862"
                ]
            },
            "title": "Anybody Can Retrieve Rent Exemption Amount From Cancelled Swaps",
            "description": "The validate_cancel() function can be called by anybody to close swap data accounts after a swap has been cancelled and all items have been returned, allowing them to receive the Sol for rent exemption.",
            "severity": "Low Risk",
            "contract": "N/A",
            "function": "validate_cancel()",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Swap Status Not Always Changed to Cancelled when Cancelling an NFT",
            "description": "In the function cancel_nft(), the swap status is updated to Cancelled only in the second case of the main if condition (else if block). As a result, if an item falls into the first",
            "severity": "Low Risk",
            "contract": "N/A",
            "function": "cancel_nft()",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Missing Input Validation",
            "description": "It is important to validate inputs, even if they only come from trusted addresses, to avoid human error.",
            "severity": "Low Risk",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-697"
                ],
                "2": [
                    "CWE-1024"
                ]
            },
            "title": "Confusing TradeStatus Enum Usage",
            "description": "The TradeStatus enum is used for both the swap data status and the status of the items contained in the swap data, leading to confusion.",
            "severity": "Low Risk",
            "contract": "lib.rs",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1061"
                ]
            },
            "title": "Mixing Anchor Constrains and Manual Checks",
            "description": "Many functions perform checks at the start that could be performed using anchor annotations instead. Mixing manual checks and anchor annotations makes it harder to reason about the security of the implementation since the checks are done in more than one place.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-697"
                ]
            },
            "title": "Wrong Equality Check for Sol Amount",
            "description": "The functions claim_sol() and cancel_sol() both use an incorrect if statement to check that an account has sufficient balance, which may cause issues due to accounts storing some amount of Sol for rent exemption.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "claim_sol(), cancel_sol()",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-697"
                ],
                "2": [
                    "CWE-1025"
                ]
            },
            "title": "Comparing Hardcoded Value Instead of Enum",
            "description": "The functions deposit_sol(), claim_nft(), and cancel_nft() perform checks against the status of items using hardcoded values. In case the code gets updated and enum values change, these instances might be missed and lead to incorrect results.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "deposit_sol(), claim_nft(), and cancel_nft()",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-1288"
                ]
            },
            "title": "Redundant Sol Transfer",
            "description": "The functions validate_claimed() and validate_cancel() contain redundant code to transfer remaining Sol to the signer, as anchor already sends any remaining Sol to the signer.",
            "severity": "Informational",
            "contract": "lib.rs",
            "function": "validate_claimed(), validate_cancel()",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Possible Overflow when Calculating the Size of SwapData",
            "description": "The size of the object SwapData is calculated using a formula that can cause an overflow for unusually high values of the variable nb_items.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Error Descriptions Not Aligned with the Emission Context",
            "description": "In the function claim_sol(), an error can be raised with a message that does not describe the situation accurately. Additionally, the error messages of SumNotNull and NotReady are also not aligned with the emission context.",
            "severity": "Informational",
            "contract": "lib.rs",
            "function": "claim_sol()",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-710"
                ]
            },
            "title": "Improper Indentation of if Blocks",
            "description": "The code does not consistently indent if blocks, which can lead to confusion and potential errors.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Incorrect ATA Input for Swap PDA",
            "description": "When depositing NFTs on Solana, it is recommended to use get_associated_token_address instead of relying on user input for the ATA of the swap PDA to prevent potential errors.",
            "severity": "Medium",
            "contract": "N/A",
            "function": "deposit_nft()",
            "lineNumber": "N/A"
        }
    ]
}