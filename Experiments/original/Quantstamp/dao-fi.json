{"path": "./Audit_Reports_2024/Quantstamp/dao-fi.pdf", "project_info": {"url": "N/A", "commit_hash": "69e5b8d", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"]}, "title": "Incorrect Conversion", "description": "In the function `DAOfoV1Pair._convert()` , when dividing `amount` by `factor` , if `amount` is lower than factor, the input `amount` is not converted (probably to avoid truncation). The function will return the unconverted amount without any information regarding if it was converted or not.", "severity": "High Risk", "contract": "DAOfoV1Pair.sol", "function": "_convert()", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-703"], "2": ["CWE-228"], "3": ["CWE-229"]}, "title": "Poorly documented logic", "description": "The pool logic is poorly documented in the code, which impairs external auditing. Furthermore, the implemented logic lacks proper specification.", "severity": "High Risk", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "Swap at fixed price", "description": "In the function `getQuoteOut()` if `amountBaseIn` is equal to or higher than `supply`, the function returns the value of `amountQuoteOut` equal to `quoteReserve` meaning that the token swap is be calculated without any slippage (fixed exchange rate) which is contradictory to the implemented bonding curve where the price varies following the amount to be exchanged.", "severity": "High Risk", "contract": "DAOfiV1Pair.sol", "function": "getQuoteOut()", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-697"], "2": ["CWE-1024"]}, "title": "Unintentional swaps", "description": "Unintentional swaps may occur in the functions `swapExactTokensForTokens()` and `swapExactTokensForETH ()` since both take `sp.sender` as an argument instead of using `msg.sender`.", "severity": "High Risk", "contract": "DAOfiV1Router01.sol", "function": ["swapExactTokensForTokens()", "swapExactTokensForETH()"], "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-394"]}, "title": "Denial-of-Service (DoS)", "description": "A Denial-of-Service (DoS) attack is a situation which an attacker renders some functionality unavailable. Specifically the function `createPair()` is prone to a DoS attack through front-running.", "severity": "Medium", "contract": "DAOfiV1Factory.sol, DAOfiV1Router01.sol", "function": "createPair(), addLiquidity(), addLiquidityETH()", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1284"]}, "title": "Incorrect input validation", "description": "When initializing `DAOfiV1Pair` using the function `initialize()` , following the natspec documentation, `_n` value should be between 1 and 3. However, the hardcoded `MAX_N` value is equal to 1 instead of 3 as documented.", "severity": "Medium Risk", "contract": "DAOfiV1Pair.sol", "function": "initialize()", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-703"]}, "title": "N/A", "description": "N/A", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 7, "category": [], "title": "N/A", "description": "N/A", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-284"], "2": ["CWE-282"], "3": ["CWE-708"]}, "title": "Privileged Roles and Ownership", "description": "Smart contracts will often have `owner` variables to designate the person with special privileges to make modifications to the smart contract.", "severity": "Low Risk", "contract": "DAOfiV1Pair.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 9, "category": {"1": ["CWE-691"], "2": ["CWE-362"]}, "title": "Race Conditions / Front-Running", "description": "A miner/attacker can take advantage of block transaction ordering to manipulate the end result of a block by generating and moving transactions in a way that benefits themselves. Specifically, there may be a race condition between transferring tokens to the pair contract and calling the function `swap()`.", "severity": "Low Risk", "contract": "DAOfiV1Pair.sol", "function": "swap()", "lineNumber": "N/A"}, {"id": 10, "category": {"1": ["CWE-284"]}, "title": "Anyone Can Provide Liquidity", "description": "Since the pool is designed to allow only one liquidity provider, only the owner should be able to add and remove liquidity via `addLiquidity()` and `removeLiquidity()`. If another user uses a deployed pair and provides liquidity (through `addLiquidity()` or `addLiquidityETH()`), they will not be able to withdraw their deposit since only the owner is allowed to do so.", "severity": "Low", "contract": "DAOfiV1Router01.sol", "function": "addLiquidity() and removeLiquidity()", "lineNumber": "N/A"}, {"id": 11, "category": {"1": ["CWE-682"]}, "title": "Gas Usage / for Loop Concerns", "description": "Gas usage is a main concern for smart contract developers and users, since high gas costs may prevent users from wanting to use the smart contract. Even worse, some gas usage issues may prevent the contract from providing services entirely.", "severity": "Informational", "contract": "DAOfiV1Pair.sol", "function": "N/A", "lineNumber": "L84"}, {"id": 12, "category": {"1": ["CWE-682"]}, "title": "Rebasing tokens", "description": "DAOfi pair contract computations are incompatible with rebasing tokens.", "severity": "Informational", "contract": "DAOfiV1Pair.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 13, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1173"]}, "title": "Code hash computation", "description": "The L25 contains hardcoded code hash.", "severity": "Informational", "contract": "DAOfiV1Library.sol", "function": "N/A", "lineNumber": "L25"}, {"id": 14, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-732"]}, "title": "Add and remove liquidity design", "description": "The functions deposit() and withdraw() can be called only once by the router contract, meaning that users won't be able to provide liquidity after the initial deposit call. Such implementation will cause higher slippage since there will be less liquidity in the pools (only one user is allowed to deposit, and only the owner is allowed to withdraw).", "severity": "Informational", "contract": "DAOfiV1Pair.sol", "function": "deposit() and withdraw()", "lineNumber": "N/A"}]}