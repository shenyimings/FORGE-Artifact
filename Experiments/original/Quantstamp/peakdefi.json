{
    "path": "./Audit_Reports_2024/Quantstamp/peakdefi.pdf",
    "project_info": {
        "url": "https://github.com/PeakDeFi/peakdefi-token/tree/70ba3dfb7d06639920ece9642f8163365da65f1b",
        "commit_hash": "70ba3dfb7d06639920ece9642f8163365da65f1b",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "PeakDefiFund Migration",
            "description": "When migrating the `PeakDeFiFund` to a new version, `migrateOwnedContractsToNextVersion` function does not transfer the ownership of `peakReferralToken` which will break token deposit and withdrawal.",
            "severity": "High Risk",
            "contract": "PeakDeFiFund.sol",
            "function": "migrateOwnedContractsToNextVersion()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Peak Minting Cap",
            "description": "Peak token cap is fixed to five billions, `_interestRateFactor` function is supposed to return zero rate after 5 billions cap. However, the function will throw instead since `SafeMath.sub` is used.",
            "severity": "Medium Risk",
            "contract": "PeakStaking.sol",
            "function": "_interestRateFactor",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-287"
                ]
            },
            "title": "Signature Execution",
            "description": "External signature won't work since `msg.sender` won't be equal to `address(this)`.",
            "severity": "Medium Risk",
            "contract": "PeakDefiLogic.sol",
            "function": "createInvestmentWithSignature",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Decimals Setter",
            "description": "changeTokenData must not allow to change the decimals value, many third party platform rely on the token decimals value to do sensitive calculation, changing the decimals value will lead to high severity issues.",
            "severity": "Low Risk",
            "contract": "PEAKDEFI_V2.sol",
            "function": "changeTokenData",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Missing Input Validation",
            "description": "Functions should always validate input parameters before using their values.",
            "severity": "Low Risk",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-354"
                ]
            },
            "title": "Unlocked Dependency Version",
            "description": "The version of @openzeppelin/contracts, @uniswap/v2-periphery, and @uniswap/v2-core are not locked in peakdefi-contracts and the version of @openzeppelin/contracts is not locked in PeakDeFi-token.",
            "severity": "Low Risk",
            "contract": "peakdefi-contracts, PeakDeFi-token",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Gas Estimation",
            "description": "Multiple functions in `PeakDeFiLogic3` loop through `cycleNumber`. Depending on the current cycle value the gas consumption can be excessively high with a low risk to reach block gas limit.",
            "severity": "Low",
            "contract": "PeakDeFiLogic3.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "PeakStaking and Specification Discrepancy",
            "description": "As per the specification `PeakStaking._interestRateFactor` does not seem to implement 'Bigger Bonus Daily'.",
            "severity": "Low Risk",
            "contract": "PeakStaking.sol",
            "function": "_interestRateFactor()",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Uniswap Oracle Stale Price",
            "description": "When getting the price average for a token using `UniswapOracle.consult` the price might be stale, meaning that if the oracle stops being updated, the contract calling won't be notified.",
            "severity": "Low Risk",
            "contract": "UniswapOracle.sol",
            "function": "consult()",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Manager Registration (contracts)",
            "description": "If a contract is used to register as a manager using `registerWithETH` or `registerWithToken`, the contract might end by receiving USDC back if the sent balance to register is higher than the maximum allowed.",
            "severity": "Low",
            "contract": "PeakDeFiLogic2.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "Off Chain Message Signature",
            "description": "When users interact with their installed wallet to sign an unstructured message they only see an unreadable bytestring, therefore no useful indication is displayed to allow avoiding phishing attempts or possible replay attacks (when interacting with different EVM capable blockchains).",
            "severity": "Low Risk",
            "contract": "PeakDefiFund.sol",
            "function": "createInvestmentWithSignature(), sellInvestmentWithSignature(), createCompoundOrderWithSignature(), sellCompoundOrderWithSignature(), repayCompoundOrderWithSignature()",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-862"
                ]
            },
            "title": "PeakDefiFund initialization",
            "description": "PeakdefiFactory createFund and all initialisation functions do not implement any authorisation mechanism, allowing an attacker to front run a transaction to set initialisation parameters.",
            "severity": "Low Risk",
            "contract": "PeakdefiFactory.sol",
            "function": "createFund",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Unlocked Pragma",
            "description": "Every Solidity file specifies in the header a version number of the format `pragma solidity (^)0.*.*` . The caret ( `^` ) before the version number implies an unlocked pragma, meaning that the compiler will use the specified version _and above_ , hence the term \"unlocked\".",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "Allowance Double-Spend Exploit",
            "description": "The contract is vulnerable to the allowance double-spend exploit as with other ERC20 tokens.",
            "severity": "Informational",
            "contract": "PEAKDEFI_V1.sol, PEAKDEFI_V2.sol, PeakToken.sol",
            "function": "transferFrom()",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Clone-and-Own",
            "description": "The clone-and-own approach involves copying and adjusting open source code at one's own discretion, which may not follow best practices, contain security vulnerabilities, or include intentionally or unintentionally modified upstream libraries.",
            "severity": "Informational",
            "contract": "Multiple (CloneFactory.sol, MiniMeToken.sol, ERC20.sol, ReentrancyGuard.sol)",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Uniswap Oracle Period",
            "description": "UniswapOracle.update is allowed to be called only once every 24 hrs. Using uniswap as oracle represents some risks since if the cumulative price window is too short the UniswapOracle.consult return value can be subject to manipulation.",
            "severity": "Informational",
            "contract": "UniswapOracle.sol",
            "function": "update()",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-665"
                ],
                "3": [
                    "CWE-909"
                ],
                "4": [
                    "CWE-456"
                ]
            },
            "title": "Compound Token List Initialization",
            "description": "initTokenListings does not check if the listed compound tokens are set in the compound order factory. Adding a token that is not listed may lead to unexpected behaviour.",
            "severity": "Informational",
            "contract": "PeakDefifund.sol",
            "function": "initTokenListings",
            "lineNumber": "N/A"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-282"
                ],
                "3": [
                    "CWE-708"
                ]
            },
            "title": "Privileged Roles and Ownership",
            "description": "Smart contracts will often have `owner` variables to designate the person with special privileges to make modifications to the smart contract. In `PeakDefiLogic2.peakAdminRegisterManager` owner can add manager without any initial donation.",
            "severity": "Informational",
            "contract": "PeakDefiLogic2.sol",
            "function": "peakAdminRegisterManager",
            "lineNumber": "N/A"
        }
    ]
}