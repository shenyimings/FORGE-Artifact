{
    "path": "./Audit_Reports_2024/Quantstamp/ichi.pdf",
    "project_info": {
        "url": "https://github.com/ichifarm/ichi-oneToken/tree/09fca7431a18028779d36427ab3ccdf947e43d40",
        "commit_hash": "09fca7431a18028779d36427ab3ccdf947e43d40",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Minting fee can be avoided if insufficient member tokens are provided",
            "description": "The function `mint` adds a fee to the collateral USD value but does not re-apply it when the `collateralUSDValue` is recomputed based on the amount of member tokens that the user can provide, allowing rational minters to skip paying the fee.",
            "severity": "High Risk",
            "contract": "OneTokenV1.sol",
            "function": "mint()",
            "lineNumber": "L116, L125-130"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-1339"
                ]
            },
            "title": "Wrong precision returned in Oracle.amountRequired",
            "description": "The amountUsd argument of the amountRequired function lacks clear precision specification, leading to incorrect results when used with different tokens and decimals.",
            "severity": "High Risk",
            "contract": "ICHIPeggedOracle, UniswapOracleSimple, OracleCommon",
            "function": "amountRequired",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "OneTokens can be redeemed for profit because of decimal issues",
            "description": "The redeem function takes an amount parameter reflecting oneTokens (18 decimals) to be redeemed, but the collateral token could have a different number of decimals, allowing to withdraw the whole reserve.",
            "severity": "High Risk",
            "contract": "OneTokenV1.sol",
            "function": "redeem()",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "OneTokens can be redeemed 1-to-1 for collateral",
            "description": "The `redeem` function updates the `collateral` oracle price but does not consult it for a price. Instead, collateral is redeemed 1-to-1 but collateral could be off-peg.",
            "severity": "High Risk",
            "contract": "OneTokenV1.sol",
            "function": "redeem",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-282"
                ],
                "3": [
                    "CWE-708"
                ]
            },
            "title": "Privileged Roles and Ownership",
            "description": "Smart contracts have `owner` variables to designate the person with special privileges to make modifications to the smart contract, which can lead to centralization of power.",
            "severity": "Medium Risk",
            "contract": "Arbitrary.sol, OneTokenV1.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Incorrect amountRequired function",
            "description": "The function appears to be copied from ICHIPeggedOracle.sol, however a 1:1 ratio between input and output tokens is not guaranteed in a composite oracle.",
            "severity": "Medium Risk",
            "contract": "ICHICompositeOracle",
            "function": "amountRequired",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-404"
                ],
                "3": [
                    "CWE-772"
                ],
                "4": [
                    "CWE-775"
                ]
            },
            "title": "removeStrategy does not close the strategy's position",
            "description": "There is no call to `closeStrategy(token)` in `removeStrategy`, which may cause tokens to be locked.",
            "severity": "Medium Risk",
            "contract": "OneTokenV1Base.sol",
            "function": "removeStrategy",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Missing pair initializer check in UniswapOracleSimple",
            "description": "UniswapOracleSimple.update does not check if the pair has been initialized and will store wrong prices as the average prices will be computed since 1970.",
            "severity": "Medium Risk",
            "contract": "UniswapOracleSimple",
            "function": "update",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Stub volatility values",
            "description": "The volatility of any Uniswap pair is reported as zero, even though price fluctuations may exist.",
            "severity": "Low Risk",
            "contract": "UniswapOracleSimple.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Setter functions for min and max ratio may break step size invariant",
            "description": "The function `setStepSize` ensures that it 'must be smaller than the difference of min and max'. However, `setMinRatio` and `setMaxRatio` do not have similar checks. If the difference is set too small, this invariant will no longer hold.",
            "severity": "Low Risk",
            "contract": "Incremental.sol",
            "function": "setMinRatio,setMaxRatio",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "updateMintingRatio can be called repeatedly",
            "description": "The function updateMintingRatio can be called repeatedly (even in the same transaction), potentially allowing an arbitrage attack to change the ratio significantly beyond the step size.",
            "severity": "Low Risk",
            "contract": "Incremental.sol",
            "function": "updateMintingRatio",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-436"
                ]
            },
            "title": "Unclear distinction between execute and executeTransaction",
            "description": "Unclear how Arbitrary.executeTransaction relates to OneTokenV1Base.executeStrategy, which invokes IStrategy(strategy).execute();, potentially causing duplicate events emitted.",
            "severity": "Low Risk",
            "contract": "Multiple (StrategyCommon.sol, Arbitrary.sol, OneTokenV1Base.sol)",
            "function": "execute() and executeTransaction()",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "setStrategy ignores allowance parameter",
            "description": "The function always sets the allowance to `INFINITE` regardless of the `allowance` parameter.",
            "severity": "Low Risk",
            "contract": "OneTokenV1Base.sol",
            "function": "setStrategy",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Unchecked function arguments",
            "description": "The following functions should perform additional checks on their arguments:",
            "severity": "Low Risk",
            "contract": "OracleCommon.sol, UniswapOracleSimple.sol, ICHICompositeOracle.sol, ICHIModuleCommon.sol, Incremental.sol, OneTokenV1Base.sol, OneTokenFactory.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "mintingRatio might never reach its bounds",
            "description": "The mintingRatio might never reach its min or max ratio as it is only changed by stepSize and not clamped.",
            "severity": "Low Risk",
            "contract": "Incremental.sol",
            "function": "getMintingRatio4",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-697"
                ],
                "2": [
                    "CWE-1023"
                ]
            },
            "title": "Incremental 's events miss oneToken parameter",
            "description": "Incremental allows changing settings for several oneTokens. However, its events don't indicate the oneToken the settings were changed for which makes it hard for a backend to associate settings changes with the oneToken.",
            "severity": "Low Risk",
            "contract": "Incremental.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-404"
                ],
                "3": [
                    "CWE-772"
                ],
                "4": [
                    "CWE-775"
                ]
            },
            "title": "Approval of old strategy is not revoked",
            "description": "`OneTokenV1Base.closeStrategy` should revoke the approval of an old strategy to shut down vulnerable strategies from causing havoc.",
            "severity": "Low Risk",
            "contract": "OneTokenV1Base.sol",
            "function": "closeStrategy",
            "lineNumber": "N/A"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "setStrategyAllowance misses funds that are currently deployed",
            "description": "The setStrategyAllowance function computes the current holdings as the balance of the strategy contract but does not include the holdings that are already used in a different contract as part of the strategy.",
            "severity": "Low Risk",
            "contract": "OneTokenV1Base.sol",
            "function": "setStrategyAllowance",
            "lineNumber": "N/A"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-241"
                ]
            },
            "title": "Incompatible with non-standard ERC20 tokens",
            "description": "The documentation mentions using stable coins as collateral but some common ERC20 stablecoins, like USDT, do not correctly implement the ERC20 specification as the functions don't return a boolean. This will lead to reverts when interacting with them.",
            "severity": "Low Risk",
            "contract": "OneTokenV1.sol, StrategyCommon.sol",
            "function": "transferFrom, mint",
            "lineNumber": "N/A"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-758"
                ],
                "3": [
                    "CWE-1038"
                ]
            },
            "title": "Clone-and-Own",
            "description": "The clone-and-own approach involves copying and adjusting open source code at one's own discretion, which may involve security risks as the code may not follow best practices or contain vulnerabilities.",
            "severity": "Informational",
            "contract": "_openzeppelin/*, _uniswap/*",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 20,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Unlocked Pragma",
            "description": "Every Solidity file specifies in the header a version number of the format `pragma solidity (^)0.4.*` . The caret ( `^` ) before the version number implies an unlocked pragma, meaning that the compiler will use the specified version _and above_ , hence the term \"unlocked\".",
            "severity": "Informational",
            "contract": "Several files",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 21,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Inconsistent constraints in setMinRatio and setMaxRatio",
            "description": "The function `setMinRatio` has the constraint `minRatio <= p.maxRatio`, whereas `setMaxRatio` uses `maxRatio > p.minRatio`. It is unclear from these two functions whether `maxRatio == p.minRatio` should be allowed.",
            "severity": "Informational",
            "contract": "Incremental.sol",
            "function": [
                "setMinRatio",
                "setMaxRatio"
            ],
            "lineNumber": "N/A"
        }
    ]
}