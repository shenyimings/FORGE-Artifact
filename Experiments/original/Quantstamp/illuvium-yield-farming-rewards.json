{
    "path": "./Audit_Reports_2024/Quantstamp/illuvium-yield-farming-rewards.pdf",
    "project_info": {
        "url": "https://github.com/IlluviumGame/illuvium-contracts/tree/68297e2fda9090586ca2980d01c2a23642833b65",
        "commit_hash": "68297e2fda9090586ca2980d01c2a23642833b65",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "Uniswap Call Susceptible To Price Manipulation Attacks",
            "description": "The function swapEthForIlv uses Uniswap to exchange ETH for ILV tokens and is susceptible to price manipulation attacks due to lack of access control, allowing attackers to manipulate the Uniswap ETH/ILV price.",
            "severity": "High Risk",
            "contract": "IlluviumVault.sol",
            "function": "swapEthForIlv()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "IlluviumFlashPool Does Not Check If Lock Period Has Passed",
            "description": "The IlluviumPoolBase._unstake function (inherited by IlluviumFlashPool) does not check if block.timestamp > lockedUntil of a deposit.",
            "severity": "Low Risk",
            "contract": "IlluviumFlashPool.sol",
            "function": "_unstake",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Unclear ILV Token Bookkeeping For ILV/ETH Pair Pool",
            "description": "The computation of `ilvInPairPool` is unclear due to unclear semantics of `poolTokenReserve` for the pair pool, leading to potential double-counting and inflation of weight associated with the `ILV/ETH Pair` pool.",
            "severity": "Low Risk",
            "contract": "IlluviumCorePool.sol",
            "function": "_stake() and receiveVaultRewards()",
            "lineNumber": "L30, L205"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Potentially Uncounted Rewards",
            "description": "The `IlluviumPoolBase._updateStakeLock` function does not flush rewards before changing the value of `user.totalWeight`. This may lead to incorrect reward amounts subsequently.",
            "severity": "Medium Risk",
            "contract": "IlluviumPoolBase.sol",
            "function": "_updateStakeLock",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Potentially Lost Rewards",
            "description": "The `_processVaultRewards` function inside `IlluviumCorePool` and in `IlluviumLockedPool` will not give users the full amount of the reward they are entitled to, when `pendingVaultClaim > poolTokenReserve`. Moreover, the function will also stop the users from requesting for the missing amount afterward. Hence the users will lose rewards.",
            "severity": "Medium Risk",
            "contract": "IlluviumCorePool, IlluviumLockedPool",
            "function": "_processVaultRewards",
            "lineNumber": "L281, L262"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Total Balances Set Larger Than Intended",
            "description": "The `TokenLocking.setBalances()` function may be called multiple times to allow setting balance to zero in case of accidental addition of the holder. However, due to missing checks/assertions there exists a possibility for human error which could lead to unlocking a total balance larger than intended.",
            "severity": "Low Risk",
            "contract": "TokenLocking.sol",
            "function": "setBalances()",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-691"
                ]
            },
            "title": "Violation Of Check-Effects-Interactions Pattern",
            "description": "The `_stake()` and `_unstake()` functions do not follow the Check-Effects-Interactions pattern because the call to `_processVaultRewards()` function makes a call to the ILV token contract.",
            "severity": "Low Risk",
            "contract": "IlluviumLockedPool.sol",
            "function": "_stake() and _unstake()",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Missing Or Insufficient Input Validation",
            "description": "The following instances of missing or insufficient input validation have been encountered:",
            "severity": "Low Risk",
            "contract": [
                "TokenLocking.sol",
                "IlluviumLockedPool.sol",
                "IlluviumCorePool.sol",
                "IlluviumPoolBase.sol"
            ],
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Missing invariant checks",
            "description": "Assumptions about intermediate values during function processing should be explicitly checked, especially if these values depend on outputs returned by external contract calls.",
            "severity": "Low Risk",
            "contract": "IlluviumPoolBase.sol",
            "function": "_stake()",
            "lineNumber": "L420"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Inconsistent Initialization Steps",
            "description": "According to the inline documentation, step 2 should invoke `setPool`, and step 3 sets balances (through potentially multiple calls to `setBalances`). However, the function `setBalances` requires on L164 that `address(pool) == address(0)`, so step 3 cannot occur after step 2.",
            "severity": "Informational",
            "contract": "TokenLocking.sol",
            "function": "N/A",
            "lineNumber": "L17-20, L126, L149, L164"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "blocksPerUpdate Is Defined In Blocks But Is Expected To Be 2 Weeks",
            "description": "The variable blocksPerUpdate is defined in blocks which have variable mining times instead of using timestamp, making it unclear why timestamp is not used for this variable.",
            "severity": "Informational",
            "contract": "IlluviumPoolFactory.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-282"
                ],
                "3": [
                    "CWE-708"
                ]
            },
            "title": "Privileged Roles and Ownership",
            "description": "The owner of certain contracts has privileged access to perform specific actions, including setting addresses and balances, and creating/registering unlimited pools.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Clone-and-Own",
            "description": "The clone-and-own approach involves copying and adjusting open source code at one's own discretion, which may involve risks such as code not following best practices, containing security vulnerabilities, or including intentionally or unintentionally modified upstream libraries.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Unused Functions",
            "description": "The `now256()` and `blockNumber()` functions declared on L235 and L224 in `IlluviumLockedPool.sol` are never used.",
            "severity": "Informational",
            "contract": "IlluviumLockedPool",
            "function": "N/A",
            "lineNumber": "L224, L235"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Misaligned Code And Comments",
            "description": "In the `IlluviumCorePool.stakeAsPool` function, code comment says `_useSILV` should be `false`, but it's hardcoded to `true` as the 2nd parameter passed to the `_processRewards` function.",
            "severity": "Informational",
            "contract": "IlluviumCorePool.sol",
            "function": "stakeAsPool",
            "lineNumber": "L155, L165"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-703"
                ]
            },
            "title": "swapEthForIlv Reverts On Zero ETH Balance",
            "description": "If the ETH balance of IlluviumVault is zero, the function will revert due to the check 'balance > 0' on L159. A legitimate call to sendIlvRewards could be griefed by any user if they front-run with a call to swapEthForIlv.",
            "severity": "Informational",
            "contract": "IlluviumVault.sol",
            "function": "swapEthForIlv()",
            "lineNumber": "159"
        }
    ]
}