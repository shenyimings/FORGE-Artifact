{"path": "./Audit_Reports_2024/ConsenSys_Diligence/ConsenSys_Diligence-Imbrex_MultiSigAdmin_and_Ownerpool.pdf", "project_info": {"url": "https://github.com/Dappcentral/rexmls-audit-report-master", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-435"], "2": ["CWE-436"]}, "title": "Inconsistencies Between White Paper and Smart Contracts", "description": "Several inconsistencies were found between the provided code and the specifications outlined in the white paper.", "severity": "Minor", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Pragma Not Locked To Specific Compiler Version", "description": "Contracts should be deployed with the same compiler version and flags that they have been tested the most with. Locking the pragma helps ensure that contracts do not accidentally get deployed using, for example, the latest compiler which may have higher risks of undiscovered bugs.", "severity": "Minor", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-710"], "2": ["CWE-1061"], "3": ["CWE-766"]}, "title": "Visibility Not Explicitly Specified", "description": "As a best practice, the visibility of functions and state variables should always be labeled explicitly to catch incorrect assumptions about who can call the function or access the variable.", "severity": "Minor", "contract": "Pseudo", "function": "forward", "lineNumber": "21-24"}, {"id": 3, "category": {"1": ["CWE-682"]}, "title": "Excessive Logic in Forward Function", "description": "The forward function in the contract Pseudo contains quite complicated logic for deducting REXToken when calls are made.", "severity": "Minor", "contract": "Pseudo", "function": "forward(bytes,address,uint256,uint256)", "lineNumber": "76"}, {"id": 4, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-391"]}, "title": "Ineffective Re-Entrancy Mitigation", "description": "The function forward in Pseudo implements a mutex (boolean transferred) that is meant to prevent re-entrancy attacks. However, the implementation is ineffective due to several reasons.", "severity": "Medium", "contract": "Pseudo", "function": "forward", "lineNumber": "66, 68, 84"}, {"id": 5, "category": {"1": ["CWE-710"], "2": ["CWE-1126"]}, "title": "Store Reward Parameters in State Variables", "description": "It's recommended to store reward parameters in state variables that are configurable by the contract owner instead of hardcoding them into the contract.", "severity": "Optimization", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-394"]}, "title": "Complex Fallback Function", "description": "Fallback functions are called when a contract is sent a message with no arguments (or when no function matches). If another contract sends Ether to this contract via send() or transfer(), only a gas stipend of 2,300 gas is available. Complex functionality in the fallback function will cause such transfers to fail.", "severity": "N/A", "contract": "REXToken", "function": "fallback()", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-682"], "2": ["CWE-190"], "3": ["CWE-680"]}, "title": "CALL with gas to dynamic address", "description": "The function call contains a function call to an address provided as a function argument. The available gas is forwarded to the called contract. Make sure that the logic of the calling contract is not adversely affected if the called contract misbehaves (e.g. reentrancy).", "severity": "Warning", "contract": "Enterprize", "function": "addListings(bytes32[],bytes4[])", "lineNumber": "44"}, {"id": 8, "category": {"1": ["CWE-703"]}, "title": "N/A", "description": "N/A", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}]}