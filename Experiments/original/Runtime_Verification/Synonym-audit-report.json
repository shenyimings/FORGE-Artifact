{
    "path": "./Audit_Reports_2024/Runtime_V\u0435rification/Synonym-audit-report.pdf",
    "project_info": {
        "url": "https://github.com/SynonymFinance/smart-contracts",
        "commit_hash": "c84ae1d84ec703a465e225757637f43abc5af37d",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Hub - transferring ownership makes it not possible to register a new Spoke",
            "description": "The function `registerSpoke` has the modifier `onlyOwner` and calls `setRegisteredSender`, but there is no function that allows to change the `registrationOwner` of the `Base` contract. Therefore, if the ownership of the `Hub` changes, the new owner cannot register a new spoke.",
            "severity": "Medium",
            "contract": "Hub",
            "function": "registerSpoke",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Hub - no upper limit on the values for liquidationFee",
            "description": "There is no upper limit on the value being assigned to the `liquidationFee` in the `initialize` and `setLiquidationFee` functions.",
            "severity": "Low",
            "contract": "Hub",
            "function": "initialize, setLiquidationFee",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "BaseInterestRate - reserveFactor does not have upper limit",
            "description": "There is no upper limit on the value being assigned to the `reserveFactor` variable in the `BaseInterestRate` contract.",
            "severity": "Low",
            "contract": "BaseInterestRate",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Denormalization of Amount Inputs",
            "description": "The functions calculateNotionalRepaid and calculateNotionalReceived in the LiquidationCalculator contract denormalize amount inputs, which can lead to incorrect calculations.",
            "severity": "Medium",
            "contract": "LiquidationCalculator",
            "function": "calculateNotionalRepaid and calculateNotionalReceived",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-862"
                ],
                "4": [
                    "CWE-638"
                ],
                "5": [
                    "CWE-424"
                ],
                "6": [
                    "CWE-425"
                ]
            },
            "title": "Hub - no check that depositNative is allowed in userActions",
            "description": "In Hub::userActions, there is no check to ensure that the depositNative action is allowed to be performed, allowing users to depositNative even if conditions are not met.",
            "severity": "Low",
            "contract": "Hub",
            "function": "userActions",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Denormalize Amount Inputs",
            "description": "The `calculateMaxWithdrawableAndBorrowableAmounts` function denormalizes amount inputs again, which are already denormalized.",
            "severity": "Low",
            "contract": "HubHelperViews",
            "function": "calculateMaxWithdrawableAndBorrowableAmounts",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Spoke::registrationOwner can change the hubContractAddress",
            "description": "The registrationOwner of the Spoke can call setRegisteredSender and change the registered sender of the hub chain or register a new sender for another chain, allowing it to process messages from a different chain and contract address than the Hub.",
            "severity": "High",
            "contract": "Spoke",
            "function": "setRegisteredSender",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Spoke - wrong refund chain parameter",
            "description": "The refund chain parameter in `_doAction`, `_sendTokenBridgeMessage`, `_sendTokenBridgeMessageNative` and `_sendUSDCWithPayload` is the `hubChainId()` instead of the `chainId()` of the `Spoke`.",
            "severity": "Medium",
            "contract": "Spoke",
            "function": "_doAction, _sendTokenBridgeMessage, _sendTokenBridgeMessageNative, _sendUSDCWithPayload",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Spoke::depositColatteral and repay do not check that msg.value is enough to pay the relayer",
            "description": "The functions depositCollateral and repay in Spoke contract do not check if msg.value is sufficient to pay the relayer, which can cause the Spoke to pay the relayer even if it holds ETH.",
            "severity": "Medium",
            "contract": "Spoke",
            "function": "depositCollateral, repay",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Hub may be left without an owner losing important functionality",
            "description": "The `owner` can call `renounceOwnership` or can call `transferOwnership` to an invalid address, which leaves the contract without an `owner`, thus removing any functionality that is available only to the `owner`.",
            "severity": "High",
            "contract": "Hub",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Hub - does not check msg.value to refund tokens",
            "description": "The function `Hub::handleTokenTransfer` does not check if `msg.value` is enough to pay the refund to the user when the `shouldRefund` flag is `true`, potentially leading to protocol losses.",
            "severity": "High",
            "contract": "Hub",
            "function": "handleTokenTransfer()",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Hub - refund tokens may revert",
            "description": "The function `Hub::handleTokenTransfer` has an `if` condition where the `else` branch is reached for a valid `Deposit` or `Repay`, but if `msg.value` is less than `getCostForRefundDelivery` then the function reverts, and neither the user gets their tokens back nor the hub state gets updated with their action.",
            "severity": "High",
            "contract": "Hub",
            "function": "handleTokenTransfer()",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Possibility of integer overflow during downcasting",
            "description": "The check in the `HubPriceUtilities::getOraclePrices` function negates and downcasts an integer value provided by the oracle without checking if it's positive, which can result in an unchecked overflow when casting.",
            "severity": "Medium",
            "contract": "HubPriceUtilities",
            "function": "getOraclePrices",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-369"
                ]
            },
            "title": "Transfer to address(0) for burning tokens",
            "description": "The `TokenConverter::_convert` function makes a `safeTransferFrom` call using `address(0)` as destination to burn tokens, which will revert for ERC20 tokens.",
            "severity": "Low",
            "contract": "TokenConverter",
            "function": "_convert",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "It is possible to set unreasonable staking periods",
            "description": "In `tSYNO` contract, the only sanity check being performed for `stakingPeriodStart` and `stakingPeriodLength` values except being 0. Protocol allows setting the staking period start to a far future date or setting -practically- an infinite staking period.",
            "severity": "Low",
            "contract": "tSYNO",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}