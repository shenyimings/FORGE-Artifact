{
    "path": "./Audit_Reports_2024/Runtime_V\u0435rification/Runtime_V\u0435rification-SundaeSwap.pdf",
    "project_info": {
        "url": "https://github.com/SundaeSwap-finance/contracts",
        "commit_hash": "c56dbd7ae2467a0142c8219670e135ab66376e44",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Minting of unlimited number of sundae tokens",
            "description": "Unlimited SUNDAEs can be minted by consuming the treasury token with the `SpendIntoTreasury` redeemer because the `sundaeMintingScript` does not check how many Sundaes have been minted.",
            "severity": "P1",
            "contract": "treasuryContract",
            "function": "SpendIntoTreasury",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Accumulation of rounding errors when exchanging old liquidity tokens for new liquidity tokens",
            "description": "The `scaleInteger` function uses the `round` function to convert Rational values to Integer values, which can cause accumulation of rounding errors leading to users receiving less than expected amounts.",
            "severity": "P1",
            "contract": "_onchain/Sundae/Contracts/Common.hs_",
            "function": "scaleInteger",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Any tokens with the currency symbol as the hash of poolMintingPolicyContract can be minted",
            "description": "The factoryScript only checks that tokens whose currency symbol is the hash of factoryBootMintingScript cannot be minted, but the specification requires that no tokens can be minted in such transactions.",
            "severity": "P1",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Old script hashes shall never be reused when upgrading factory or treasury",
            "description": "The proposal token generated by the governance system is used to upgrade the factoryContract and treasuryContract. However, it is still possible in future upgrades that the governance decides to downgrade to an old version of the contract and decides to reuse the old script hash.",
            "severity": "P2",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "More scooper fees could be collected with multiple scoopers public key hashes",
            "description": "The scooper fee contract does not correctly handle multiple public key hashes, resulting in a smaller amount being paid to the gift contract than intended.",
            "severity": "P1",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Scooper could redeem more than the maximum number of scooper rewards",
            "description": "The pool contract does not check the positivity of `scoopFee` in `EscrowDatum` and pays the sum of all the scoop fee to `scooperFeeContract`. If an escrow input with negative `scoopFee` is included, then much less than the actual scoop fee would be paid to the scooper fee contract and the lesser amount is paid to the scooper directly.",
            "severity": "P1",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Potential unauthorized script upgrade",
            "description": "The proposalContract only checks that the upgrade authentication token is present but does not check how many tokens are in the UTXO, allowing an attacker to achieve an unauthenticated upgrade to the contracts.",
            "severity": "P2",
            "contract": "proposalContract",
            "function": "N/A",
            "lineNumber": "315"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Assets in escrow contract can be stolen when upgrading pool",
            "description": "The UTXOs locked in `escrowContract` can be spent when a pool token is present without any restraint on how the assets in UTXO can be spent, allowing an attacker to steal the assets when upgrading the pool.",
            "severity": "P1",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Scooper fees cannot be redeemed into treasury",
            "description": "The `treasuryContract` only allows Ada and Sundae to be locked together with the treasury token, but an attacker can pay 1 garbage token together with the scooper fee (Ada) into the `giftContract`, making all scooper fees indefinitely locked in the `giftContract`.",
            "severity": "P2",
            "contract": "treasuryContract",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Integer Division Used Multiple Times",
            "description": "The code uses integer division multiple times in computation of token amount, which can cause inaccurate results due to rounding effects.",
            "severity": "P1",
            "contract": "Pool.hs",
            "function": "N/A",
            "lineNumber": "289"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Rounding error is exacerbated in DepositSingle operation in pool contract",
            "description": "In the DepositSingle operation of the pool contract, an integer division and subsequent multiplication leads to a larger number being passed to the square root function due to rounding errors.",
            "severity": "P2",
            "contract": "pool contract",
            "function": "DepositSingle",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Assets in escrow contract can be stolen when redeeming liquidity tokens",
            "description": "The UTXOs locked in `escrowContract` can be spent when a pool token is present. An attacker who holds some old liquidity tokens can also spend the UTXO in `escrowContract` so as to steal the assets when redeeming against the `deadPoolContract`.",
            "severity": "P1",
            "contract": "escrowContract",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Use of If-then-else for the or operator in poolMintingPolicyContract",
            "description": "The boolean operators `&&` and `||` are strict in Plutus; they do not short-circuit, which can lead to resource waste when evaluating a passing transaction against a contract with multiple `||` operators.",
            "severity": "P4",
            "contract": "poolMintingPolicyContract",
            "function": "N/A",
            "lineNumber": "132-134"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-287"
                ]
            },
            "title": "Unconstrained usage of scooper token makes tracing of scoopers hard",
            "description": "A legitimate scooper operator can generate many scooper tokens and send them to anyone. Then the scooper token holder can do scoop operation by falsely declaring that he is scooping on behalf of any legitimate scooper operator by specifying a legitimate scooper operator\u2019s public key.",
            "severity": "P3",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Redundant checks in factory contract",
            "description": "There are redundant checks at the start of the factory contract and later in the code in redeemer 'MakeProposal' and 'IssueScooperLicense'.",
            "severity": "P4",
            "contract": "FactoryContract",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Avoid higher-order functions and extra list traversals",
            "description": "The `mergeListByKey` function traverses its argument twice when only one traversal is needed, and `sansRider` calls `Map.insert`, which is relatively inefficient compared to calling `Map.fromList`.",
            "severity": "P4",
            "contract": "N/A",
            "function": "mergeListByKey, sansRider",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Optimize atLeastOne uses, script address checks, flattenValue in Pool script",
            "description": "Uses of unoptimized native functions `atLeastOne`, `findOwnInput`, and `flattenValue` can be replaced with more efficient custom implementations. Address comparison performance can be improved. Temporary variables can be introduced to avoid redundant computation.",
            "severity": "P4",
            "contract": "Pool",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Avoid redundant computation in doEscrows",
            "description": "`userGives $$ CoinA` is needlessly computed multiple times. fee variables don't need to be strict as they are only used once.",
            "severity": "P4",
            "contract": "N/A",
            "function": "doEscrows()",
            "lineNumber": "N/A"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Rewrite rawDatumOf function",
            "description": "Native function `findDatum` called from `rawDatumOf` incurs unnecessary memory and CPU usage that can be improved by using an explicit loop.",
            "severity": "P4",
            "contract": "_Sundae.Utilities_",
            "function": "rawDatumOf",
            "lineNumber": "N/A"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Less escrow riders are returned when multiple escrows from the same trader",
            "description": "An escrow input must contain the correct amount of tokens regarding the type of the order and a 2 ADA rider. The rider shall be spent back to the trader. However, if multiple escrow inputs (n>=2) from the same trader are scooped in the same transaction, only a single 2 ADA rider is required to be spent back to the trader.",
            "severity": "P1",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}