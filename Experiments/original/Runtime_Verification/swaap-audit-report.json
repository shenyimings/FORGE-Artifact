{"path": "./Audit_Reports_2024/Runtime_V\u0435rification/swaap-audit-report.pdf", "project_info": {"url": "N/A", "commit_hash": "f91cf548fc229ac21badeca4adff67a5dfc06b6d", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"]}, "title": "Pools are vulnerable to deflationary tokens", "description": "Some tokens charge fees on transfers or can possibly do that in the future (e.g. USDT), this means that these tokens don't transfer the entire amount of tokens specified by the caller.", "severity": "High", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Undefined behavior in case of negative oracle prices", "description": "The protocol treats negative oracle prices as zero, which can lead to undefined behavior and potential security issues.", "severity": "Mid", "contract": "N/A", "function": "_getTokenCurrentPrice", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "Incorrect variance calculation in GBM", "description": "The protocol incorrectly calculates the variance parameter of the geometric brownian motion, leading to under-estimation of price history variance and potentially classifying volatile assets as stable, resulting in too low adaptive fees for liquidity providers.", "severity": "Mid", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Pool controller can withdraw deposits from previous pool operators", "description": "A malicious user can steal assets by convincing a pool controller to grant him controlling privileges and then withdrawing initial supplies.", "severity": "High", "contract": "N/A", "function": "setOperator()", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-435"], "2": ["CWE-436"], "3": ["CWE-437"]}, "title": "Tokens with multiple addresses can be used to create corrupted pools", "description": "Some proxied tokens have multiple addresses, and state-changes made to one address are immediately replicated on the other addresses. That makes it possible for a controller to bind the same token more than once to a pool.", "severity": "High", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Malicious pool controllers can manipulate swap fees on public pools", "description": "A malicious pool controller can change the swap fees arbitrarily on non-finalized pools, allowing operators to exploit this situation and arbitrage slippage.", "severity": "High", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-435"]}, "title": "Unsafe token transfer in Factory.collect", "description": "The Factory.collect() function does not integrate properly with arbitrary ERC20 tokens, which can cause accumulated exit fees to be permanently locked into the factory contract if the underlying asset token does not return a boolean value on transfer-calls.", "severity": "Informative", "contract": "Factory", "function": "collect(Pool pool)", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "Confusing variable name and type in Factory.collect", "description": "The parameter name and type of the `Factory.collect` function is confusing as it suggests that this function can only be used to withdraw pool share tokens but can actually be used to withdraw exit fees paid in underlying asset tokens as well.", "severity": "Informative", "contract": "Factory", "function": "collect()", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-682"]}, "title": "Inconsistent NatSpec comments", "description": "The NatSpec comment of Chainlink.getTokenRelativePrice is self-contradictory and the return-value description seems to be the correct one. Similarly, the NatSpec comment of Chainlink.getPreviousPrice confuses some parameter names.", "severity": "Informative", "contract": "Chainlink", "function": "getTokenRelativePrice,getPreviousPrice", "lineNumber": "N/A"}, {"id": 9, "category": {"1": ["CWE-710"], "2": ["CWE-1061"]}, "title": "Factory lacks IPausableFactory-interface inheritance", "description": "The Factory-contract implements the IPausableFactory-interface but lacks the appropriate inheritance specifier, which might confuse programmers coming from traditional programming languages and makes the code less future-proof.", "severity": "Informative", "contract": "Factory", "function": "N/A", "lineNumber": "N/A"}, {"id": 10, "category": {"1": ["CWE-682"]}, "title": "Discrepancy between code comment and implementation in Math.calcSingleInGivenPoolOut", "description": "There is a discrepancy between the code comment and implementation of the Math.calcSingleInGivenPoolOut function.", "severity": "Informative", "contract": "Math.sol", "function": "calcSingleInGivenPoolOut()", "lineNumber": "194-203"}, {"id": 11, "category": {"1": ["CWE-682"]}, "title": "Discrepancy between code comment and implementation in Math.calcSpotPrice", "description": "There is a discrepancy between a code comment above the `Math.calcSpotPriceMMM` function and its implementation. The comment states the spot price is calculated according to an incorrect formula.", "severity": "Informative", "contract": "Math.sol", "function": "calcSpotPriceMMM", "lineNumber": "422"}, {"id": 12, "category": {"1": ["CWE-284"], "2": ["CWE-269"], "3": ["CWE-266"]}, "title": "Protect privileged accounts against invalid addresses", "description": "The setSwaapLabs and setController methods lack sanity checks to prevent irreversible loss of privileges when transferring to an invalid address.", "severity": "Low", "contract": "Factory, Pool-contract", "function": "setSwaapLabs, setController", "lineNumber": "N/A"}, {"id": 13, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Safe gas by removing superfluous require clauses", "description": "The following require-clauses can never be false because unsigned integers cannot be negative.", "severity": "Informative", "contract": "Pool.sol", "function": "N/A", "lineNumber": "234, 674"}, {"id": 14, "category": {"1": ["CWE-710"], "2": ["CWE-1041"]}, "title": "Safe gas by removing superfluous re-entrancy locks", "description": "Some functions are decorated with the `_lock_` modifier even though they cannot trigger external calls, e.g. `Pool.setSwapFe` or `Pool.setController` as well as other setters.", "severity": "Informative", "contract": "Pool", "function": "setSwapFe,setController", "lineNumber": "N/A"}, {"id": 15, "category": {"1": ["CWE-703"], "2": ["CWE-228"], "3": ["CWE-233"], "4": ["CWE-235"]}, "title": "Add input validation to Pool.joinPool and Pool.exitPool", "description": "The `joinPool` and `exitPool` functions take parameters to limit the maximum (resp. minimum) amount of tokens that the user is willing to deposit (resp. withdraw). The user has to provide one limit per bound token. If he provides fewer limits both functions will revert (due to invalid array access in the loop's body). However, if he provides more limits, the functions will run to completion.", "severity": "Informative", "contract": "Pool", "function": "joinPool and exitPool", "lineNumber": "N/A"}, {"id": 16, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Add sanity checks to Pool.finalize", "description": "Pools can have at least 2 tokens and at most 8 tokens bound to it. The former side-condition is checked during Pool.finalize while the second one is checked during Pool.bindMMM. It is recommended to add a sanity check to `Pool.finalize` for the maximum number of bound tokens as well.", "severity": "Informative", "contract": "Pool", "function": "finalize()", "lineNumber": "N/A"}, {"id": 17, "category": {"1": ["CWE-682"], "2": ["CWE-1339"]}, "title": "Potential precision optimization in Math.calcSpotPrice", "description": "The spot price calculation can be modified to yield a higher precision in the average case by using a simplified equation with one less rounding operation.", "severity": "Low", "contract": "Math", "function": "calcSpotPrice()", "lineNumber": "N/A"}, {"id": 18, "category": {"1": ["CWE-682"], "2": ["CWE-1339"]}, "title": "Potential precision optimization in Math.calcPoolOutGivenSingleIn", "description": "The liquidity provision function Malc.calcPoolOutGivenSingleIn can be modified to yield a higher precision in the average case by using one less rounding operation.", "severity": "Low", "contract": "Math", "function": "calcPoolOutGivenSingleIn", "lineNumber": "N/A"}, {"id": 19, "category": {"1": ["CWE-682"], "2": ["CWE-1339"]}, "title": "Potential precision optimization in Math.calcSinlgeInGivenPoolOut", "description": "The liquidity provision function Malc.calcSinlgeInGivenPoolOut can be modified to yield a higher precision in the average case by using one less rounding operation.", "severity": "Low", "contract": "Math", "function": "calcSinlgeInGivenPoolOut()", "lineNumber": "N/A"}, {"id": 20, "category": {"1": ["CWE-682"], "2": ["CWE-1339"]}, "title": "Potential precision optimization in Pool.calcSingleOutGivenPoolIn", "description": "The liquidity provision function Pool.calcSingleOutGivenPoolIn can be modified to yield a higher precision in the average case by using one less rounding operation.", "severity": "Low", "contract": "Pool", "function": "calcSingleOutGivenPoolIn", "lineNumber": "N/A"}]}