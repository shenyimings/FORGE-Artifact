{"path": "./Audit_Reports_2024/Runtime_V\u0435rification/Runtime_V\u0435rification-StakeWise.pdf", "project_info": {"url": "https://github.com/stakewise/contracts", "commit_hash": "19da824f44079c2b94c8cca84de77f5bdf3f0e54", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"]}, "title": "Flaws in StakedTokens contract implementation", "description": "The rewardRates[] mapping in StakedTokens does not store the user's reward rate separately for each token, and thus StakedTokens._withdrawRewards() will not work correctly when there are multiple tokens.", "severity": "High", "contract": "StakedTokens", "function": "_withdrawRewards()", "lineNumber": "212"}, {"id": 1, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Error in RewardEthToken._transfer() implementation", "description": "When a user's rwETH balance is negative, they can increase it to zero by sending a transaction of RewardEthToken.transfer(recipient, 0) for any non-zero recipient address due to a bug in the _transfer() function.", "severity": "High", "contract": "RewardEthToken", "function": "_transfer()", "lineNumber": "106"}, {"id": 2, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "Off-by-one error in consensus condition for balance reporting oracles", "description": "The implementation of the consensus condition has an off-by-one error, allowing conflicting values to be updated on different chains in case of \u2153 of reporters being malicious under the asynchronous network condition.", "severity": "Critical", "contract": "BalanceReporters", "function": "N/A", "lineNumber": "L151,L80"}, {"id": 3, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Total supply of stETH/rwETH tokens could exceed the actual balance of the validator pool", "description": "The total supply of stETH/rwETH tokens could exceed the actual balance of the validator pool if users' balances fall below zero, leading to redemption issues.", "severity": "High", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-682"], "2": ["CWE-191"]}, "title": "StakedEthToken.balanceOf() could revert", "description": "StakedEthToken.balanceOf() will revert when an user's balance of stETH + rwETH tokens falls below zero.", "severity": "High", "contract": "StakedEthToken", "function": "balanceOf()", "lineNumber": "L75"}, {"id": 5, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Newly generated rewards are vulnerable to attack by malicious balance reporters", "description": "A malicious balance reporter can steal newly generated rewards by executing a sequence of contract calls in a single transaction, including flash loan/swap, staking LP tokens, casting a vote, withdrawing the LP tokens, and paying back the tokens.", "severity": "High", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-682"]}, "title": "Rounding errors in instant penalty distribution", "description": "The use of integer division could lead to rounding errors in the computation of rewardPerToken and curReward in RewardEthToken.updateTotalRewards() and RewardEthToken.rewardOf(), respectively, causing potential issues with instant penalty distribution.", "severity": "Informative", "contract": "RewardEthToken", "function": ["updateTotalRewards()", "rewardOf()"], "lineNumber": ["133", "91"]}, {"id": 7, "category": {"1": ["CWE-682"], "2": ["CWE-1339"]}, "title": "Precision losses in rewards distribution computation", "description": "Precision losses in the computation of individual rewards distributions can lead to distributing less amount of rewards to users.", "severity": "Informative", "contract": "N/A", "function": "updateRewardCheckpoint() or _withdrawRewards()", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-682"]}, "title": "StakedTokens.withdrawTokens() does not update token rewards when token is disabled", "description": "The function withdrawTokens() in StakedTokens contract does not update token rewards when the token is disabled, resulting in users receiving less amount of rewards than they should.", "severity": "High", "contract": "StakedTokens", "function": "withdrawTokens()", "lineNumber": "L115-L118"}, {"id": 9, "category": {"1": ["CWE-284"]}, "title": "Permission for RewardEthToken.updateRewardCheckpoint()", "description": "The same effect of RewardEthToken.updateRewardCheckpoint(x) can be made by the self RewardEthToken.transfer() call, making the permission requirement unnecessary.", "severity": "Informative", "contract": "RewardEthToken", "function": "updateRewardCheckpoint()", "lineNumber": "116"}, {"id": 10, "category": {"1": ["CWE-682"]}, "title": "No service fees are refunded in penalty distribution", "description": "Maintainers charge a service fee for each reward distribution but do not return a portion of the fees when penalties are imposed to users even if it is the maintainers' fault, which is unfair from users\u2019 perspective.", "severity": "Informative", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 11, "category": {"1": ["CWE-682"]}, "title": "Gas optimization suggestion", "description": "Optimize gas cost in _transfer() function of StakedEthToken and RewardEthToken by packing Checkpoint struct into a single word and refactoring code to use smaller typed integer.", "severity": "Informative", "contract": "StakedEthToken, RewardEthToken", "function": "_transfer()", "lineNumber": "N/A"}, {"id": 12, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Access control analysis", "description": "Inconsistencies in pause functionality across contracts, allowing certain actions to continue despite pause status.", "severity": "Informative", "contract": "Multiple (Solos, Pool, StakedEthToken, RewardEthToken, BalanceReporters, Validators)", "function": "N/A", "lineNumber": "N/A"}, {"id": 13, "category": {"1": ["CWE-664"], "2": ["CWE-662"], "3": ["CWE-663"]}, "title": "Non-systematic uses of nonReentrant modifier", "description": "The Solos.addDeposit() function lacks the nonReentrant annotation, allowing re-entry via addDeposit() and other external contracts. A global nonReentrant modifier could prevent this.", "severity": "Informative", "contract": "Solos", "function": "addDeposit()", "lineNumber": "N/A"}, {"id": 14, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Potential arithmetic overflows", "description": "Arithmetic operations 'block.timestamp + cancelLockDuration' and 'getRoleMemberCount(REPORTER_ROLE) * 2' could overflow if cancelLockDuration is set to a very large value or AccessControlUpgradeable contract misbehaves.", "severity": "Informative", "contract": ["Solos", "BalanceReporters"], "function": ["N/A", "N/A"], "lineNumber": "N/A"}]}