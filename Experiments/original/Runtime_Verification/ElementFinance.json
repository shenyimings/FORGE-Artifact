{
    "path": "./Audit_Reports_2024/Runtime_V\u0435rification/ElementFinance.pdf",
    "project_info": {
        "url": "https://github.com/element-fi/elf-contracts",
        "commit_hash": "637c6f959315cbb11a164555e588520c7d89122b",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "Vulnerability to external price manipulation",
            "description": "The Tranche contract logic relies on the assumption of monotonically increasing share prices during the lockup period, but lacks protection measures against price drops or fluctuations, making it vulnerable to sophisticated price manipulation attacks using large flash loans.",
            "severity": "High",
            "contract": "Tranche",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Flaws in minting principal tokens",
            "description": "When users deposit funds in the middle of a lockup period, they are minted less amount of principal tokens to deduct interests already accrued so far. However, the interest deduction logic has a flaw, leading to scenarios where users lose their funds even if the share price constantly goes up.",
            "severity": "Low",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-191"
                ]
            },
            "title": "Minting principal tokens with negative interest",
            "description": "The principal token minting logic relies on the assumption that the vault will never return negative interest, but it can still happen in catastrophic failures of the vault and/or malicious price manipulation attempts.",
            "severity": "Low",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "Flaws in yearn vault integration",
            "description": "Flaws in the yearn vault integration can be exploited to drain all the reserve funds.",
            "severity": "High",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-1265"
                ]
            },
            "title": "Reentrancy vulnerability",
            "description": "Some tokens (e.g., ERC777) allow callbacks from senders or receivers during token transfers. If the Element Finance system admits a token contract that allows the sender\u2019s callback to be executed after the token transfer, or the receiver\u2019s callback to be executed before the token transfer, then the following exploit scenario exists.",
            "severity": "High",
            "contract": "YVaultAssetProxy",
            "function": "reserveDeposit()",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Flaws in updating reserves",
            "description": "There are flaws in the reserves updating logic in the _deposit() and _withdraw() functions of YVaultAssetProxy.",
            "severity": "High",
            "contract": "YVaultAssetProxy",
            "function": "_deposit(), _withdraw()",
            "lineNumber": "138, 176"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Fixed-point arithmetic errors in ConvergentCurvePool",
            "description": "The fixed-point arithmetics in ConvergentCurvePool are broken when the number of decimals of either the underlying or bond token is not 18.",
            "severity": "High",
            "contract": "ConvergentCurvePool",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Undesirable failures for joinPool()/exitPool() due to rounding errors",
            "description": "Rounding errors in multiplication and division operations can cause undesirable failures in joinPool() and exitPool() functions.",
            "severity": "Low",
            "contract": "ConvergentCurvePool.sol",
            "function": "N/A",
            "lineNumber": "L606-L611"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Flaws in fee deduction logic",
            "description": "Flaws in the fee deduction logic lead to charging more fees than needed for certain cases.",
            "severity": "Low",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Typographical errors",
            "description": "Simplification of code in Tranche.constructor() to save gas by replacing 'underlying = wpContract.token();' with 'underlying = localUnderlying;'.",
            "severity": "Informative",
            "contract": "Tranche.sol",
            "function": "constructor()",
            "lineNumber": "L50-L51"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "SafeCast",
            "description": "Explicit type conversion from uint256 to uint128 without range check can lead to silent truncation of higher-order bits and potential catastrophic failures.",
            "severity": "Informative",
            "contract": "ConvergentCurvePool, Tranche, YVaultAssetProxy",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "SafeMath for ConvergentCurvePool",
            "description": "It is recommended to systematically use SafeMath for every arithmetic operation in ConvergentCurvePool because it is hard to completely rule out the possibility of certain catastrophic failures that could cause arithmetic overflow.",
            "severity": "Informative",
            "contract": "ConvergentCurvePool",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Sanity check for onJoinPool() and onExitPool()",
            "description": "In onJoinPool() and onExitPool(), it is recommended to have a sanity check that the first argument is equal to `_poolId` . This ensures that the onJoinPool() hook is correctly routed by the vault, and can avoid minting LP tokens without ever receiving liquidity due to potential errors caused by the vault.",
            "severity": "Informative",
            "contract": "N/A",
            "function": "onJoinPool() and onExitPool()",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Inconsistent boolean parameters",
            "description": "The boolean parameter of solveTradeInvariant() means the opposite of that of _assignTradeFee(), which is unintuitive and reduces code readability.",
            "severity": "Informative",
            "contract": "N/A",
            "function": [
                "solveTradeInvariant()",
                "_assignTradeFee()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1164"
                ],
                "3": [
                    "CWE-561"
                ]
            },
            "title": "Unused constants",
            "description": "The `EPSILON` constant in ConvergentCurvePool is no longer used and can be removed for readability.",
            "severity": "Informative",
            "contract": "ConvergentCurvePool",
            "function": "N/A",
            "lineNumber": "L50-L52"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Code simplification",
            "description": "The following code can be further simplified using baseIndex and bondIndex:",
            "severity": "Informative",
            "contract": "ConvergentCurvePool",
            "function": "N/A",
            "lineNumber": "L100-L107"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-665"
                ],
                "3": [
                    "CWE-909"
                ],
                "4": [
                    "CWE-456"
                ]
            },
            "title": "Immutable",
            "description": "The `_interestTokenFactory` storage variable can be declared as `immutable`.",
            "severity": "Informative",
            "contract": "TrancheFactory.sol",
            "function": "N/A",
            "lineNumber": "L24"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-345"
                ],
                "3": [
                    "CWE-347"
                ]
            },
            "title": "Signature malleability",
            "description": "ERC20Permit.permit() does not require canonicalized signatures, making it vulnerable to signature malleability.",
            "severity": "Informative",
            "contract": "ERC20Permit",
            "function": "permit()",
            "lineNumber": "L210"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Fake pool creation",
            "description": "A malicious user can exploit ConvergentPoolFactory.create() to create a fake pool to deceive benign users.",
            "severity": "Informative",
            "contract": "ConvergentPoolFactory",
            "function": "create()",
            "lineNumber": "N/A"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Documentation for Tranche.prefundedDeposit()",
            "description": "Tranche.prefundedDeposit() requires funds to be transferred to the position contract in advance and executed within a single transaction to prevent potential misuse and loss of funds.",
            "severity": "Informative",
            "contract": "Tranche",
            "function": "prefundedDeposit()",
            "lineNumber": "N/A"
        },
        {
            "id": 20,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "Risky trick",
            "description": "ERC20Permit.sol's constructor function contains a trick to automatically revert any transfer to either the zero address or the token address itself, which may introduce another attack surface that can utilize these 'nonexisting' tokens.",
            "severity": "Informative",
            "contract": "ERC20Permit",
            "function": "constructor()",
            "lineNumber": "N/A"
        },
        {
            "id": 21,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Unused imports",
            "description": "The following import is not needed and can be removed for readability.",
            "severity": "Informative",
            "contract": "InterestTokenFactory.sol",
            "function": "N/A",
            "lineNumber": "L4"
        },
        {
            "id": 22,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "Open pre-approval of allowances",
            "description": "The UserProxy.mint() function allows users to execute the permit() function of arbitrary contracts, exposing it to potential abuse.",
            "severity": "Informative",
            "contract": "UserProxy",
            "function": "mint()",
            "lineNumber": "93"
        },
        {
            "id": 23,
            "category": {
                "1": [
                    "CWE-435"
                ]
            },
            "title": "Integration issues for WrappedPosition.prefundedDeposit()",
            "description": "Replace `msg.sender` with `_destination` to enable prefundedDeposit() function usage in different contexts later.",
            "severity": "Informative",
            "contract": "WrappedPosition",
            "function": "prefundedDeposit()",
            "lineNumber": "L111"
        },
        {
            "id": 24,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-369"
                ]
            },
            "title": "Potential division-by-zero errors in ConvergentCurvePool",
            "description": "The pool initialization process may cause a division-by-zero error if any liquidity deposits are made before the initial trade, leading to failure of the `_mintLP()` function.",
            "severity": "Informative",
            "contract": "ConvergentCurvePool",
            "function": "_mintLP()",
            "lineNumber": "507"
        },
        {
            "id": 25,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Sanity checks for ConvergentCurvePool",
            "description": "It is recommended to add sanity checks in the constructor of ConvergentCurvePool and in getYieldExponent() function for extra protection.",
            "severity": "Informative",
            "contract": "ConvergentCurvePool",
            "function": "constructor, _getYieldExponent()",
            "lineNumber": "L94-L95, L633"
        },
        {
            "id": 26,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Sanity checks for UserProxy.mint()",
            "description": "In UserProxy.mint(), it is recommended to have a sanity check that makes sure `_underlying` is associated with `_position` to early detect users\u2019 mistakes that can lead to losing their funds.",
            "severity": "Informative",
            "contract": "UserProxy",
            "function": "mint()",
            "lineNumber": "N/A"
        },
        {
            "id": 27,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Sanity checks for YVaultAssetProxy constructor",
            "description": "YVaultAssetProxy would not work correctly when the number of underlying decimals is different from the number of vault decimals.",
            "severity": "Informative",
            "contract": "YVaultAssetProxy",
            "function": "N/A",
            "lineNumber": "L202"
        },
        {
            "id": 28,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "Buying underlying tokens at discount with no fee",
            "description": "In ConvergentCurvePool's implementation of YieldSpace curve, there always exists an opportunity to buy underlying tokens at a discount without paying any fee (other than gas cost).",
            "severity": "Low",
            "contract": "ConvergentCurvePool",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}