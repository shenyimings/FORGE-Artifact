{"path": "./Audit_Reports_2024/PepperSec/Vault12-Token-Vesting-audit-report.pdf", "project_info": {"url": "N/A", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"]}, "title": "Team won\u2019t recieve 20M per year for Advisors", "description": "The team will get 10% per year instead of 20M per year as required in TokenDistro.md due to incorrect implementation in Vault12LockedTokens contract.", "severity": "MAJOR", "contract": "Vault12LockedTokens", "function": "N/A", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-862"]}, "title": "Anyone can call addTokenGrant function", "description": "The addTokenGrant function of AdvisorsVesting smart contract does not check that only multisender can call it. If AdvisorsVesting contract still has the tokens approved for the transfer, anyone can create a Grand for themselves and take the tokens.", "severity": "MAJOR", "contract": "AdvisorsVesting", "function": "addTokenGrant", "lineNumber": "L59"}, {"id": 2, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "addTokenGrant doesn\u2019t check that _vestingDuration <= 25 years", "description": "The addTokenGrant function of AdvisorsVesting and Vault12LockedTokens smart contracts does not check that _vestingDuration <= 25 yrs, which is a special client requirement.", "severity": "MAJOR", "contract": "AdvisorsVesting and Vault12LockedTokens", "function": "addTokenGrant", "lineNumber": "L63 (AdvisorsVesting.sol) and L55 (Vault12LockedTokens.sol)"}, {"id": 3, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "addTokenGrant doesn\u2019t check that _vestingCliff <= 10 years", "description": "The addTokenGrant function of AdvisorsVesting smart contract does not check that _vestingCliff <= 10 yrs, which is a special client requirement.", "severity": "MAJOR", "contract": "AdvisorsVesting", "function": "addTokenGrant", "lineNumber": "L62"}, {"id": 4, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Team can rewrite team vesting", "description": "The team can use the addTokenGrant function of Vault12LockedTokens smart contract to rewrite their Vesting Grand. The contract does not check Grand already exists. That action cannot be used to cheat actually, but it can cause a DoS.", "severity": "MAJOR", "contract": "Vault12LockedTokens", "function": "addTokenGrant", "lineNumber": "L54"}, {"id": 5, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1287"]}, "title": "Redundant approve", "description": "The 3_distro.js script has redundant approve to AdvisorsVesting for 20M tokens, which is unused.", "severity": "MAJOR", "contract": "N/A", "function": "N/A", "lineNumber": "**[3_distro.js](https://github.com/vault12/vault-guardian-token/blob/master/migrations/3_distro.js)"}, {"id": 6, "category": {"1": ["CWE-664"], "2": ["CWE-404"], "3": ["CWE-772"], "4": ["CWE-775"]}, "title": "removeTokenGrant doesn\u2019t clear activeGrants", "description": "The removeTokenGrant function of AdvisorsVesting smart contract does not clear activeGrants mapping.", "severity": "MAJOR", "contract": "AdvisorsVesting", "function": "removeTokenGrant", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-682"]}, "title": "Vault12LockedTokens locks team tokens after 24 years", "description": "The claimVestedTokens function of Vault12LockedTokens smart contract accumulates yearsClaimed per call instead of rewriting, leading to locking rest amount of tokens after 24 years.", "severity": "MAJOR", "contract": "Vault12LockedTokens", "function": "claimVestedTokens", "lineNumber": "L114"}, {"id": 8, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1288"]}, "title": "Unnecessary functionality", "description": "The renounceOwnership function inherited from OpenZeppelin's Ownable contract seems superfluous and is worth considering whether it is necessary for the project.", "severity": "MEDIUM", "contract": "VaultGuardianToken", "function": "renounceOwnership", "lineNumber": "L166"}, {"id": 9, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-862"]}, "title": "addTokenGrant function doesn\u2019t check recipient address", "description": "The addTokenGrant function of AdvisorsVesting smart contract does not validate recipient address.", "severity": "MEDIUM", "contract": "AdvisorsVesting", "function": "addTokenGrant", "lineNumber": "L59"}, {"id": 10, "category": {"1": ["CWE-682"]}, "title": "Vault12LockedTokens doesn\u2019t take into account Leap year", "description": "Vault12LockedTokens define a year as 31540000 seconds, which is not always true.", "severity": "MEDIUM", "contract": "Vault12LockedTokens", "function": "N/A", "lineNumber": "L9"}, {"id": 11, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "changeMultiSig function doesn\u2019t validate address", "description": "The changeMultiSig function of the AdvisorsVesting and Vault12LockedTokens smart contracts does not validate _newMultisig address.", "severity": "MEDIUM", "contract": ["AdvisorsVesting", "Vault12LockedTokens"], "function": "changeMultiSig()", "lineNumber": ["L195", "L128"]}, {"id": 12, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-354"]}, "title": "Solidity version should be locked at final project stage", "description": "Contracts should be deployed with the same compiler version and flags that they have been tested most with. Locking the pragma helps ensure that contracts do not accidentally get deployed using, for example, the latest compiler which may pose higher risks of undiscovered bugs.", "severity": "MEDIUM", "contract": "AdvisorsVesting.sol", "function": "N/A", "lineNumber": "L1"}, {"id": 13, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Vault12LockedTokens.addTokenGrant accepts _recipient, which should be only v12MutiSig", "description": "The addTokenGrant function of VaultGuardianToken accepts _recipient , which is supposed to be only one address - address of Vault12\u2019s team MultiSig.", "severity": "MEDIUM", "contract": "Vault12LockedTokens", "function": "addTokenGrant", "lineNumber": "N/A"}, {"id": 14, "category": {"1": ["CWE-682"]}, "title": "SafeMath doesn't work for uint16", "description": "The AdvisorsVesting and Vault12LockedTokens.sol smart contracts use SafeMath for uint16, which works for uint256 only.", "severity": "MEDIUM", "contract": "AdvisorsVesting and Vault12LockedTokens", "function": "N/A", "lineNumber": "N/A"}, {"id": 15, "category": {"1": ["CWE-682"]}, "title": "Inconsistent Year Duration Assumption", "description": "3_distro.js and smart contracts assume different number of seconds in a year, which may lead to inaccurate calculations.", "severity": "MAJOR", "contract": "N/A", "function": "N/A", "lineNumber": "3_distro.js#L131"}, {"id": 16, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-394"]}, "title": "Multisend", "description": "The multisend function of the VaultGuardianToken smart contract requires the count of _recipients less than multiSendLimit , which is 150 by default. The current implementation allows increasing the value up to at least 220.", "severity": "MINOR", "contract": "VaultGuardianToken", "function": "multisend", "lineNumber": "18"}, {"id": 17, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1288"]}, "title": "Redundant Ownable for VaultGuardianToken", "description": "The VaultGuardianToken contract is inherited from Ownable and Claimable, which is also inherited from Ownable. Consider removing explicit Ownable inheritance.", "severity": "MINOR", "contract": "VaultGuardianToken", "function": "N/A", "lineNumber": "L10"}]}