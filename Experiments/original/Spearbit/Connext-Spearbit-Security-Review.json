{
    "path": "./Audit_Reports_2024/Spearbit/Connext-Spearbit-Security-Review.pdf",
    "project_info": {
        "url": "https://github.com/connext/nxtp",
        "commit_hash": "16ee2f8b441e80c82cf53358e9534c6cd4080bec",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Arbitrary reduction of balances",
            "description": "The `balances` of index `3` can be arbitrarily reduced.",
            "severity": "High Risk",
            "contract": "N/A",
            "function": "swapOut() and swapInternalOut()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-400"
                ]
            },
            "title": "Inefficient storage access in swapExactOut() and swapInternalOut()",
            "description": "Inefficient storage access in swapExactOut() and swapInternalOut() functions leading to arbitrary reduction of balances.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "swapExactOut(), swapInternalOut()",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Unnecessary SLOAD operation for LIQUIDITY_FEE_DENOMINATOR",
            "description": "The value of `LIQUIDITY_FEE_DENOMINATOR` seems to be constant but is stored in storage, requiring an `SLOAD` operation to retrieve it, increasing gas costs.",
            "severity": "_Gas Optimization",
            "contract": "AssetLogic.sol",
            "function": "N/A",
            "lineNumber": "L273"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-400"
                ],
                "3": [
                    "CWE-770"
                ]
            },
            "title": "Access elements from storage array instead of loading them in memory",
            "description": "SwapUtils.removeLiquidityOneToken() function only needs the length and one element of the storage array self.pooledTokens . For this, the function reads the entire array in memory which costs extra gas.",
            "severity": "Gas Optimization",
            "contract": "SwapUtils",
            "function": "removeLiquidityOneToken()",
            "lineNumber": "1016-1034"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Send information through calldata instead of having callee query Executor",
            "description": "The function calls `s.executor.execute()` which means that within that function `msg.value` will always be `0`. So the associated logic that uses `msg.value` doesn\u2019t work as expected and the function doesn\u2019t handle native assets correctly.",
            "severity": "High Risk",
            "contract": "Executor",
            "function": "execute()",
            "lineNumber": "L142-L280"
        }
    ]
}