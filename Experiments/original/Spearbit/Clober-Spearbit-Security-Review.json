{"path": "./Audit_Reports_2024/Spearbit/Clober-Spearbit-Security-Review.pdf", "project_info": {"url": "https://github.com/clober-dex/core", "commit_hash": "28062f477f571b38fe4f8455170bd11094a71862", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "OrderBook Denial of Service leveraging blacklistable tokens like USDC", "description": "The issue was spotted while analysing additional impact and fix for [67]. Due to the architecture decision which implements orders queue as a cyclic buffer, the `OrderBook` after reaching `MAX_ORDERS` (~32k) for a given price point, starts to overwrite stale orders. If an order was never claimed or it is broken, so it cannot be claimed, it is not possible to place a new order in a queue.", "severity": "Critical Risk", "contract": "OrderBook.sol", "function": "N/A", "lineNumber": "L649-L666"}, {"id": 1, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Overflow in `SegmentedSegmentTree464`", "description": "Same value tree update falls under `else` case which will do redundant overflow check", "severity": "Gas Optimization", "contract": "SegmentedSegmentTree464", "function": "N/A", "lineNumber": "L153"}, {"id": 2, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "OrderNFT theft due to controlling future and past tokens of same order index", "description": "An attacker can set approvals of future token IDs to themselves, allowing them to steal the NFT and cancel the NFT to claim their tokens.", "severity": "Critical Risk", "contract": "OrderBook.sol, OrderNFT.sol", "function": "getOrder, onMint", "lineNumber": "410, 285"}, {"id": 3, "category": {"1": ["CWE-697"], "2": ["CWE-1024"]}, "title": "OrderNFT theft due to ambiguous `tokenId` encoding/decoding scheme", "description": "The `encodeId()` function uniquely encodes `tokenId`s to the exact same `OrderKey`, but the `decodeId()` function can decode many. This ambiguity comes from converting `uint8` value to `bool isBid` value, allowing an attacker to craft ambiguous token IDs and steal OrderNFTs.", "severity": "High Risk", "contract": "OrderNFT.sol", "function": "encodeId() / decodeId()", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Missing owner check on `from` when transferring tokens", "description": "The `_transfer` function does not properly check if the 'from' address is the owner of the token before reducing its balance.", "severity": "N/A", "contract": "N/A", "function": "_transfer", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-682"]}, "title": "Wrong minimum net fee check", "description": "A minimum net fee was introduced that all markets should comply by such that the protocol earns fees. The protocol fees are computed `takerFee + makerFee` and the market factory computes the wrong check.", "severity": "High Risk", "contract": "MarketFactory.sol", "function": "N/A", "lineNumber": "79,111"}, {"id": 6, "category": {"1": ["CWE-682"]}, "title": "Rounding up of taker fees of constituent orders may exceed collected fee", "description": "If multiple orders are taken, the taker fee calculated is rounded up once, but that of each taken maker order could be rounded up as well, leading to more fees accounted for than actually taken.", "severity": "High Risk", "contract": "OrderBook.sol", "function": "N/A", "lineNumber": "L463, L478-L482, L604"}, {"id": 7, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Markets with malicious tokens should not be interacted with", "description": "It is possible to prevent creating new markets (OrderBooks) for any given quoteToken as the allow list can be updated at any time by the owner, what can potentially be used to censor some types of markets if abused.", "severity": "N/A", "contract": "OrderBook", "function": "N/A", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-732"]}, "title": "Claim bounty of stale orders should be given to `user` instead of `daoTreasury`", "description": "When an unclaimed stale order is being replaced, the `claimBounty` is sent to the DAO treasury. However, since the `user` is the one executing the claim on behalf of the stale order owner, and is paying the gas for it, the `claimBounty` should be sent to him instead.", "severity": "Informational", "contract": "OrderBook.sol", "function": "N/A", "lineNumber": "L656-L662,L667"}, {"id": 9, "category": {"1": ["CWE-682"]}, "title": "Misleading comment on `remainingRequestedRawAmount`", "description": "The comment says `// always ceil`, but `remainingRequestedRawAmount` is rounded down when the base / quote amounts are converted to the raw amount.", "severity": "Informational", "contract": "OrderBook.sol", "function": "N/A", "lineNumber": "L130-L133"}, {"id": 10, "category": {"1": ["CWE-682"], "2": ["CWE-190"], "3": ["CWE-680"]}, "title": "Potential DoS if `quoteUnit` and index to price functions are set to unreasonable values", "description": "A market order uses `_take` to iterate over several price indices until the order is filled. An attacker can add a tiny amount of depth to many indices (prices), increasing the gas cost and in the worst case leading to out-of-gas transactions.", "severity": "Informational", "contract": "OrderBook", "function": "N/A", "lineNumber": "L565"}, {"id": 11, "category": {"1": ["CWE-682"], "2": ["CWE-1339"]}, "title": "Rounding rationale could be better clarified", "description": "Rounding rationale could be better clarified", "severity": "Informational", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 12, "category": {"1": ["CWE-435"], "2": ["CWE-436"]}, "title": "Rename `flashLoan()` for better composability & ease of integration", "description": "For ease of 3rd party integration, consider renaming to `flash()`, as it would then have the same function sig as Uniswap V3, although the callback function would still be different.", "severity": "Informational", "contract": "OrderBook.sol", "function": "flashLoan()", "lineNumber": "L317"}, {"id": 13, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Unsupported tokens: tokens with more than 18 decimals", "description": "The orderbook does currently not support tokens with more than 18 decimals.", "severity": "Informational", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 14, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "`ArithmeticPriceBook` and `GeometricPriceBook` contracts should be abstract", "description": "The `ArithmeticPriceBook` and `GeometricPriceBook` contracts don't have any external functions.", "severity": "Informational", "contract": ["ArithmeticPriceBook", "GeometricPriceBook"], "function": "N/A", "lineNumber": "N/A"}, {"id": 15, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "`childRawIndex` in `OctopusHeap.pop` is not a raw index", "description": "The `pop` function defines a `childRawIndex` but this variable is not a raw index, it's actually raw index + 1 (1-based).", "severity": "Informational", "contract": "OctopusHeap.sol", "function": "pop", "lineNumber": "L231"}, {"id": 16, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-354"]}, "title": "Lack of `orderIndex` validation", "description": "The `orderIndex` parameter in the `OrderNFT` contract is missing proper validation.", "severity": "Informational", "contract": "OrderNFT", "function": "N/A", "lineNumber": "271"}, {"id": 17, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "Unsafe `_getParentHeapIndex`, `_getLeftChildHeapIndex`", "description": "When `heapIndex = 1 _getParentHeapIndex(uint16 heapIndex)` would return 0 which is an invalid heap index. when `heapIndex = 45 _getLeftChildHeapIndex(uint16 heapIndex)` would return 62 which is an invalid heap index.", "severity": "Informational", "contract": "OctopusHeap.sol", "function": "N/A", "lineNumber": "L135, L156"}, {"id": 18, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1288"]}, "title": "_priceToIndex function implemented but unused", "description": "The _priceToIndex function for the price books are implemented but unused.", "severity": "Informational", "contract": "ArithmeticPriceBook.sol, GeometricPriceBook.sol", "function": "_priceToIndex", "lineNumber": "L23, L74"}, {"id": 19, "category": {"1": ["CWE-682"]}, "title": "Incorrect `_MAX_NODES` and `_MAX_NODES_P` descriptions", "description": "The derivation of the values `_MAX_NODES` and `MAX_NODES_P` in the comments are incorrect.", "severity": "Informational", "contract": "SegmentedSegmentTree464.sol", "function": "N/A", "lineNumber": "41-42"}]}