{
    "path": "./Audit_Reports_2024/Spearbit/Locke-Spearbit-Security-Review.pdf",
    "project_info": {
        "url": "https://github.com/LockeProtocol/Locke",
        "commit_hash": "596de43e6320eccbf1d274a934a5dad893c6b605",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-1339"
                ]
            },
            "title": "UnaccruedSeconds do not increase even if nobody is actively staking",
            "description": "The `unstreamed` variable tracks whether someone is staking in the contract or not. However, because of the division precision loss at Locke.sol#L164-L166 and Locke.sol#L187, `unstreamed > 0` may happen even when everyone has already withdrawn all deposited tokens from the contract.",
            "severity": "High Risk",
            "contract": "Locke",
            "function": "N/A",
            "lineNumber": "180"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Old governor can call acceptGov() after renouncing its role through _abdicate()",
            "description": "The __abdicate function does not reset pendingGov value to 0. Therefore, if a pending governor is set the user can become a governor by calling acceptGov.",
            "severity": "High Risk",
            "contract": "Gov.sol",
            "function": "_abdicate",
            "lineNumber": "L30"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "User can lose their reward due truncated division",
            "description": "The truncated division can cause users to lose rewards in this update round which may happen when any of the following conditions are true: RewardToken.decimals() is too low, Reward is updated too frequently, StreamDuration is too large, or TotalVirtualBalance is too large.",
            "severity": "High Risk",
            "contract": "Locke.sol",
            "function": "N/A",
            "lineNumber": "L321"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "The streamAmt check may prolong a user in the stream",
            "description": "If Alice stakes a small amount of deposit token and Bob comes along and deposits a very large amount of deposit token, it's in Alice's interest to exit the pool as early as possible especially when this is an indefinite stream.",
            "severity": "Medium Risk",
            "contract": "Locke.sol",
            "function": "stake()",
            "lineNumber": "410"
        }
    ]
}