{
    "path": "./Audit_Reports_2024/Spearbit/MorphoV1-Spearbit-Security-Review.pdf",
    "project_info": {
        "url": "https://github.com/morpho-dao/morpho-v1",
        "commit_hash": "5f39e0d197830dbd4ede7f1657973a56f7e21232",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Delta leads to incorrect reward distributions",
            "description": "There is a mismatch of delta between the pool balance that earns a reward and the sum of pool balances that are tracked in the reward manager to earn that reward. The increase in delta directly leads to an increase in rewards for all other users on the pool.",
            "severity": "Low Risk",
            "contract": "MatchingEngine",
            "function": "N/A",
            "lineNumber": "[aave-v2/MatchingEngine.sol#L315], [compound/MatchingEngine.sol#L347]"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "When adding a new rewards manager, users already on the pool won't be earning rewards",
            "description": "When setting a new rewards manager, existing users that are already on the pool are not tracked and won't be earning rewards.",
            "severity": "Low Risk",
            "contract": "MatchingEngine",
            "function": "N/A",
            "lineNumber": "aave-v2/MatchingEngine.sol#L315, compound/MatchingEngine.sol#L347"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ]
            },
            "title": "N/A",
            "description": "N/A",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "`liquidationThreshold` computation can be moved for gas efficiency",
            "description": "The `vars.liquidationThreshold` computation is only relevant if the user is supplying this asset. Therefore, it can be moved to the `if (_isSupplying(vars.userMarkets, vars.borrowMask))` branch.",
            "severity": "Gas Optimization",
            "contract": "MorphoUtils.sol",
            "function": "N/A",
            "lineNumber": "320-323"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1120"
                ],
                "3": [
                    "CWE-1060"
                ]
            },
            "title": "Add max approvals to markets upon market creation",
            "description": "Approvals to the Compound markets are set on each supplyToPool function call. Consider adding a single max approval of type(uint256).max once upon market creation in MorphoGovernance.createMarket to save gas, and remove the other approvals.",
            "severity": "Gas Optimization",
            "contract": "MorphoGovernance",
            "function": "createMarket",
            "lineNumber": "123"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "`isP2PDisabled` flag is not updated by `setIsPausedForAllMarkets`",
            "description": "The function `setIsPausedForAllMarkets` does not update the `isP2PDisabled` flag, which may lead to inconsistent behavior when resuming operations and allowing P2P usage.",
            "severity": "Informational",
            "contract": "ExitPositionsManager",
            "function": "setIsPausedForAllMarkets",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-436"
                ]
            },
            "title": "Differences between Morpho and Aave `liquidate` validation logic",
            "description": "Morpho has decided to override some of their own internal flags in the liquidation logic, which may lead to differences with Aave's implementation.",
            "severity": "Informational",
            "contract": "ExitPositionsManager",
            "function": "liquidateLogic",
            "lineNumber": "L217-L235"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-436"
                ]
            },
            "title": "Differences between Morpho and Aave `repay` validation logic",
            "description": "The Morpho approach is to mimic 1:1 the logic of the underlying protocol, including all the logic and sanity checks that are done before executing a user's action. On top of the protocol's logic, Morpho has its own logic.",
            "severity": "Informational",
            "contract": "ExitPositionsManager",
            "function": "repay",
            "lineNumber": "181-197, 643"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-253"
                ]
            },
            "title": "Differences between Morpho and Aave `withdraw` validation logic",
            "description": "Morpho re-implements the `liquidate` function as a mix of `withdraw` + `borrow` operations on Aave where needed. Morpho does not check that the Aave market has `isActive == true`, and does not check that `remainingToWithdraw.rayDiv(poolIndexes[_poolToken].poolBorrowIndex) > 0`. Trying to withdraw that amount from Aave would make the whole tx revert.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "_unsafeWithdrawLogic",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Differences between Morpho and Aave `borrow` validation logic",
            "description": "Morpho re-implements the `borrow` function as a mix of `withdraw` + `borrow` operations on Aave where needed, but lacks certain sanity checks done by Aave, such as checking if the market is active or frozen, and verifying health factors.",
            "severity": "Informational",
            "contract": "EntryPositionsManager",
            "function": "borrow()",
            "lineNumber": "L90-L182"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-436"
                ]
            },
            "title": "Differences between Morpho and Aave `supply` validation logic",
            "description": "The Morpho approach is to mimic 1:1 the logic of the underlying protocol, including all the logic and sanity checks that are done before executing a user's action. On top of the protocol's logic, Morpho has its own logic.",
            "severity": "Informational",
            "contract": "EntryPositionsManager",
            "function": "supply",
            "lineNumber": "L90-L182"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Morpho should avoid creating a new market when the underlying Aave market is frozen",
            "description": "MorphoGovernance.createMarket function only checks if the AToken is in active state but does not check if it's not in a frozen state, which can cause operations on the Aave side to be prevented.",
            "severity": "Informational",
            "contract": "MorphoGovernance",
            "function": "createMarket",
            "lineNumber": "L473"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-435"
                ],
                "2": [
                    "CWE-436"
                ]
            },
            "title": "Differences between Morpho and Compound `liquidate` validation logic",
            "description": "The finding highlights differences in liquidation validation logic between Morpho and Compound protocols.",
            "severity": "N/A",
            "contract": "ExitPositionsManager",
            "function": "liquidateLogic",
            "lineNumber": "217-235"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Removed unused 'named' return parameters from functions",
            "description": "Remove unused named return parameters from functions to increase code readability and maintainability.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}