{
    "path": "./Audit_Reports_2024/Spearbit/Gauntlet-Spearbit-Security-Review.pdf",
    "project_info": {
        "url": "https://github.com/GauntletNetworks/aera-contracts",
        "commit_hash": "d48ddedf1dc70b9d13cb17d07ebee481a1d0b8d2",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Minting of unlimited number of sundae tokens",
            "description": "N/A",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Potential unauthorized script upgrade",
            "description": "The copies of the OpenZeppelin files are also (manually) changed to adapt the import paths which has the risk of making a mistake in the process.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ],
                "3": [
                    "CWE-302"
                ]
            },
            "title": "Front-running attacks on finalize could affect received token amounts",
            "description": "The `finalize()` function could be susceptible to a front-running attack, allowing an attacker to force the Treasury to receive an unexpected amount of tokens.",
            "severity": "Medium Risk",
            "contract": "AeraVaultV1.sol",
            "function": "finalize() and returnFunds()",
            "lineNumber": "L539, L899-L910"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Impermanent loss for the treasury",
            "description": "Treasury may experience impermanent loss due to front-running transactions during finalization, resulting in an undesired token distribution.",
            "severity": "High",
            "contract": "N/A",
            "function": "initiateFinalization()",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Human error in token order specification",
            "description": "The Balancer protocol requires that the pool's tokens must be ordered by the token address during pool creation. The functions initialDeposit, deposit, withdraw, enableTradingWithWeights, and updateWeightsGradually accept an uint256[] of amounts or weights without knowing if the order inside that array follows the same order of the tokens inside the Balancer pool.",
            "severity": "Informational",
            "contract": "AeraVaultV1",
            "function": [
                "initialDeposit",
                "deposit",
                "withdraw",
                "enableTradingWithWeights",
                "updateWeightsGradually"
            ],
            "lineNumber": [
                "350",
                "402",
                "456",
                "574",
                "599-603"
            ]
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Swap is not enabled after initialDeposit execution",
            "description": "In the current deployment flow of AeraVault, the Balancer pool is created with swapEnabledOnStart set as false. When the pool receives their initial funds via initialDeposit, the pool has still the swap functionality disabled.",
            "severity": "Informational",
            "contract": "AeraVaultV1",
            "function": "initialDeposit()",
            "lineNumber": "L350-L399"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-1284"
                ]
            },
            "title": "Important Balancer fields can be overwritten by EndTime",
            "description": "Balancer\u2019s `ManagedPool` uses 32 bit values for `startTime` and `endTime` but it does not verify if those values exist within that range. Values are stored in a 32-byte `_miscData` slot in `BasePool` via the `insertUint32()` function. Nevertheless, this function does not strip any excess bits, resulting in other fields stored in `_miscData` to be overwritten.",
            "severity": "Critical Risk",
            "contract": "ManagedPool.sol, LegacyBasePool.sol, WordCodec.sol",
            "function": "N/A",
            "lineNumber": "L75-L77, L84-L86"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "sweep function should prevent Treasury from withdrawing pool\u2019s BPTs",
            "description": "The current sweep() implementation allows the vault owner (the Treasury) to sweep any token owned by the vault including BPTs that have been minted by the Vault during the pool's initialDeposit() function call.",
            "severity": "_Critical Risk",
            "contract": "AeraVaultV1.sol",
            "function": "sweep()",
            "lineNumber": "L559-L561"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Manager can cause an immediate weight change",
            "description": "Balancer\u2019s `ManagedPool` uses 32 bit values for `startTime` and `endTime` but it does not verify if those values exist within that range. This allows the Manager to cause an immediate weight change via the `updateWeightsGradually()` function, opening arbitrage opportunities.",
            "severity": "High Risk",
            "contract": "ManagedPool",
            "function": "updateWeightsGradually()",
            "lineNumber": "L254-L272, L620-L654, L680-L698"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "deposit and withdraw functions are susceptible to sandwich attacks",
            "description": "Transactions calling the deposit() function are susceptible to sandwich attacks where an attacker can extract value from deposits. A similar issue exists in the withdraw() function but the minimum check on the pool holdings limits the attack\u2019s impact.",
            "severity": "High Risk",
            "contract": "AeraVaultV1.sol",
            "function": [
                "deposit()",
                "withdraw()"
            ],
            "lineNumber": "L402-L453, L456-L514"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "allowance() doesn\u2019t limit withdraw()s",
            "description": "The allowance() function is meant to limit withdraw amounts but it can only read and not alter state because its visibility is set to view. Therefore, the withdraw() function can be called on demand until the entire Vault/Pool balance has been drained, rendering the allowance() function ineffective.",
            "severity": "High Risk",
            "contract": "PermissiveWithdrawalValidator.sol, IWithdrawalValidator.sol, AeraVaultV1.sol",
            "function": "allowance(), withdraw()",
            "lineNumber": "17-27, 456-514"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Managed Pools are still undergoing development and may contain bugs and/or significant changes",
            "description": "The ManagedPool smart pool implementation of WeightedPool is still in active development by the Balancer team and could have unknown bugs.",
            "severity": "High Risk",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}