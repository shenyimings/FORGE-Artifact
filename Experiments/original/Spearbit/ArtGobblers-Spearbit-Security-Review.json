{"path": "./Audit_Reports_2024/Spearbit/ArtGobblers-Spearbit-Security-Review.pdf", "project_info": {"url": "https://github.com/artgobblers/art-gobblers", "commit_hash": "fe647c8a7e4539c586c25ac68b6e29da83f4043a", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-703"], "2": ["CWE-228"], "3": ["CWE-237"], "4": ["CWE-239"]}, "title": "Neither `GobblersERC1155B` nor `ArtGobblers` implement the ERC-165 `supportsInterface` function", "description": "From the EIP-1155 documentation: Smart contracts implementing the ERC-1155 standard MUST implement all of the functions in the ERC1155 interface. Smart contracts implementing the ERC-1155 standard MUST implement the ERC165 supportsInterface function and MUST return the constant value true if 0xd9b67a26 is passed through the interfaceID argument.", "severity": "Informational", "contract": ["GobblersERC1155B", "ArtGobblers"], "function": "N/A", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1173"]}, "title": "Unused Import of wadExp from SignedWadMath", "description": "The LogisticVRGDA contract is importing the wadExp function from the SignedWadMath library but never uses it.", "severity": "Informational", "contract": "LogisticVRGDA", "function": "N/A", "lineNumber": "L4"}, {"id": 2, "category": {"1": ["CWE-703"]}, "title": "Pages.tokenURI does not revert when pageId is the ID of an invalid or not minted token", "description": "The current implementation of tokenURI in Pages is returning an empty string if the pageId specified by the user's input has not been minted yet or is invalid, instead of reverting.", "severity": "Informational", "contract": "Pages", "function": "tokenURI()", "lineNumber": "L207-L211"}, {"id": 3, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Consider checking if the token fed to the Gobbler is a real ERC1155 or ERC721 token", "description": "The current implementation of `ArtGobblers.feedArt` function allows users to specify from the value of the `bool isERC1155` input parameter if the `id` passed is from an `ERC721` or `ERC1155` type of token. Without checking if the passed `nft` address fully support `ERC721` or `ERC1155`, these two problems could arise.", "severity": "Informational", "contract": "ArtGobblers", "function": "feedArt", "lineNumber": "L672-L674"}, {"id": 4, "category": {"1": ["CWE-682"]}, "title": "Rounding down in legendary auction leads to `legendaryGobblerPrice` being zero earlier than the auction interval", "description": "The expression has a value 0 when `numMintedSinceStart` is between 573 and 581, causing `legendaryGobblerPrice` to be zero before the auction interval.", "severity": "Informational", "contract": "ArtGobblers", "function": "N/A", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-710"], "2": ["CWE-1061"]}, "title": "Typos in code comments or natspec comments", "description": "Below is a list of typos encountered in the code base and / or natspec comments:", "severity": "Informational", "contract": ["Pages", "LogisticVRGDA"], "function": ["N/A", "N/A"], "lineNumber": ["L179, L188", "L23"]}, {"id": 6, "category": {"1": ["CWE-710"], "2": ["CWE-1059"], "3": ["CWE-1110"]}, "title": "Missing natspec comments for contract's constructor, variables or functions", "description": "Some of the contract's `constructor` variables and functions are missing natespec comments.", "severity": "Informational", "contract": ["Pages", "LibString", "MerkleProofLib", "SignedWadMath", "VRGDA", "LogisticVRGDA", "PostSwitchVRGDA", "GobblerReserve", "GobblersERC1155B", "PagesERC721"], "function": ["constructor", "getTargetSaleDay", "toString", "verify", "toWadUnsafe", "unsafeWadMul", "unsafeWadDiv", "wadMul", "wadDiv", "wadExp", "wadLn", "unsafeDiv", "constructor", "getTargetDayForNextSale", "artGobblers", "constructor"], "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-682"]}, "title": "Potential issues due to slippage when minting legendary gobblers", "description": "The price of a legendary mint is a function of the number of gobblers minted from goo. Because of the strict check that the price is exactly equal to the number of gobblers supplied, this can lead to slippage issues.", "severity": "Informational", "contract": "ArtGobblers", "function": "mintLegendaryGobbler()", "lineNumber": "L375-L387"}, {"id": 8, "category": {"1": ["CWE-682"]}, "title": "Users who claim early have an advantage in goo production", "description": "There is an advantage in gooBalance for users who claimed a day earlier as their emission starts earlier.", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 9, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Add a negativity check for `decayConstant` in the constructor", "description": "The value of decayConstant should be checked for negativity and kept as a positive number with the negative sign added in the getPrice function.", "severity": "Informational", "contract": "N/A", "function": "constructor", "lineNumber": "N/A"}, {"id": 10, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "Improvements in `toString()`", "description": "The function `toString()` does not return a string aligned to a 32-byte word boundary.", "severity": "Informational", "contract": "LibString.sol", "function": "toString()", "lineNumber": "L38"}, {"id": 11, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-862"], "4": ["CWE-638"], "5": ["CWE-424"], "6": ["CWE-425"]}, "title": "The `claimGobbler` function does not enforce the `MINTLIST_SUPPLY` on-chain", "description": "There is a public constant `MINTLIST_SUPPLY` (2000) that is supposed to represent the number of gobblers that can be minted by using merkle proofs. However, this is not explicitly enforced in the `claimGobbler` function and will need to be verified off-chain from the list of merkle proof data.", "severity": "Low Risk", "contract": "ArtGobblers.sol", "function": "claimGobbler()", "lineNumber": "L287-L304"}]}