{
    "path": "./Audit_Reports_2024/Spearbit/SudoswapLSSVM2-Spearbit-Security-Review.pdf",
    "project_info": {
        "url": "https://github.com/sudoswap/lssvm2",
        "commit_hash": "5c1a0cabf4668c0901ba5e1377f05ac75fc923d6",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-400"
                ],
                "3": [
                    "CWE-770"
                ]
            },
            "title": "Partial fills for buy orders in ERC1155 swaps will fail when pair has insufficient balance",
            "description": "Partial fills are currently supported for buy orders in `VeryFastRouter.swap()`. When `_findMaxFillableAmtForBuy()` determines `numItemsToFill`, it is not guaranteed that the underlying pair has so many items left to fill.",
            "severity": "High Risk",
            "contract": "VeryFastRouter",
            "function": "swap()",
            "lineNumber": "L189-L198"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Function `token()` of `cloneERC1155ERC20Pair()` reads from wrong location",
            "description": "The function `token()` loads the token data from position 81. However on ERC1155 pairs it should load it from position 93.",
            "severity": "High Risk",
            "contract": "LSSVMPairCloner.sol",
            "function": "cloneERC1155ERC20Pair()",
            "lineNumber": "359-436"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Switched order of update leads to incorrect partial fill calculations",
            "description": "Being updated before `numItemsToFill` which itself uses the value of `start`, leading to incorrect partial fill calculations when binary search recurses on the right half.",
            "severity": "High Risk",
            "contract": "LSSVMRouter",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Swap functions with sell orders in `LSSVMRouter` will fail for property-check enforced pairs",
            "description": "Any swap batch of transactions which has a property-checked sell order for ERC1155 will revert.",
            "severity": "Low Risk",
            "contract": "VeryFastRouter",
            "function": "N/A",
            "lineNumber": "120, 134"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-1287"
                ]
            },
            "title": "pairTransferERC20From() only supports ERC721 NFTs",
            "description": "The function pairTransferERC20From() does not verify the correct type of pair is used and only supports ERC721 NFTs.",
            "severity": "Medium Risk",
            "contract": "LSSVMRouter, VeryFastRouter",
            "function": "pairTransferERC20From()",
            "lineNumber": "L491-L543, L344-L407"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Insufficient application of trading fee leads to 50% loss for LPs in swapTokenForAnyNFTs()",
            "description": "The protocol applies a trading fee of `2*tradeFee` on NFT buys from pairs, but `LSSVMPairERC1155.swapTokenForAnyNFTs()` enforces a trading fee of only `tradeFee`, leading to 50% loss for LPs.",
            "severity": "High Risk",
            "contract": "LSSVMPairERC1155",
            "function": "swapTokenForAnyNFTs()",
            "lineNumber": "L114, L61-L63"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Royalty not always being taken into account leads to incorrect protocol accounting",
            "description": "The royalty amount is not always considered when calculating sale amounts, leading to incorrect protocol accounting.",
            "severity": "N/A",
            "contract": "LSSVMPair",
            "function": "_getRoyaltyAndSpec() and _computeAmounts()",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-393"
                ]
            },
            "title": "Error return codes of `getBuyInfo()` and `getSellInfo()` are sometimes ignored",
            "description": "The callers of functions `getBuyInfo()`, `getSellInfo()`, `getBuyNFTQuote()`, `getSellNFTQuote()`, and `getSellNFTQuoteWithRoyalties()` have to check the error codes too.",
            "severity": "High Risk",
            "contract": "StandardSettings.sol",
            "function": "changeSpotPriceAndDelta()",
            "lineNumber": "L227-L294"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Missing additional safety for `multicall` may lead to lost ETH in future",
            "description": "If the function `multicall()` would be `payable`, then multiple `delegated-to` functions could use the same `msg.value`, which could result in losing ETH from the pair.",
            "severity": "Low Risk",
            "contract": "LSSVMPair",
            "function": "multicall()",
            "lineNumber": "653-663"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Missing zero-address check may allow re-initialization of pairs",
            "description": "Certain logic requires zero-address checks to avoid undesired behavior or lock of funds.",
            "severity": "Low Risk",
            "contract": "Multiple (StandardSettings, LSSVMPairFactory)",
            "function": "N/A",
            "lineNumber": "StandardSettings.sol#L38-L42, StandardSettings.sol#L164-L206, LSSVMPairFactory.sol#L82-L98"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Unused imports affect readability",
            "description": "Unused imports reduce code readability.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-697"
                ],
                "2": [
                    "CWE-1025"
                ],
                "3": [
                    "CWE-595"
                ],
                "4": [
                    "CWE-597"
                ]
            },
            "title": "Use of `isPair()` is not intuitive",
            "description": "The function `isPair()` has two use cases: 1) to check if a contract is a pair of any of the 4 types and 2) to check if a pair is ETH/ERC20/ERC721/ERC1155. The second use case is not intuitive and may lead to errors.",
            "severity": "Informational",
            "contract": "LSSVMPairFactory",
            "function": "isPair()",
            "lineNumber": "309-322"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-435"
                ]
            },
            "title": "Royalty related code spread across different contracts affects readability",
            "description": "The contract LSSVMPairFactory contains the function authAllowedForToken(), which has a lot of interactions with external contracts related to royalties. The code is rather similar to code that is present in the RoyaltyEngine contract.",
            "severity": "Informational",
            "contract": "LSSVMPairFactory, RoyaltyEngine",
            "function": "authAllowedForToken()",
            "lineNumber": "330-377"
        }
    ]
}