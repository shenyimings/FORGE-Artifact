{
    "path": "./Audit_Reports_2024/Spearbit/report-blast-contracts-review-draft.pdf",
    "project_info": {
        "url": "https://github.com/blast-io/blast-audit-spearbit",
        "commit_hash": "be51873cb7740d6044fc41ce218ee4f1bd601c32",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-287"
                ]
            },
            "title": "msg.sender has to be un-aliased in L2BlastBridge.finalizeBridgeETHDirect()",
            "description": "L2BlastBridge.finalizeBridgeETHDirect() checks that msg.sender is L1BlastBridge, but since the function is called directly as a L1 ! L2 transaction initiated by L1BlastBridge, which is a contract, msg.sender will actually be the aliased address of L1BlastBridge. As such, this check will always revert, thus users who deposit stETH in L1BlastBridge will not receive ETH on L2.",
            "severity": "Critical",
            "contract": "L2BlastBridge",
            "function": "finalizeBridgeETHDirect()",
            "lineNumber": "L48"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "L1BlastBridge uses wrong token order when bridging USD yield tokens",
            "description": "The _initiateBridgeERC20 function encodes the USD bridge message as: The DAI and USDB tokens need to be swapped.",
            "severity": "Critical Risk",
            "contract": "L1BlastBridge",
            "function": "_initiateBridgeERC20",
            "lineNumber": "L196-L197"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "_delegatecall_uint256_arr_arg_returns_uint256 wrong calldata encoding",
            "description": "The _delegatecall_uint256_arr_arg_returns_uint256 function encodes the calldata as abi.encodePacked(selector, uint256[] arg) which leads to an incorrect calldata. It should be abi encoded using abi.encodeWithSelector(bytes4(bytes32(selector)), arg).",
            "severity": "Critical",
            "contract": "DelegateCalls",
            "function": "_delegatecall_uint256_arr_arg_returns_uint256",
            "lineNumber": "L26-L84"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Changing yield from Claimable cause fund loss",
            "description": "The issue is that when withdrawFromInsurance() is called to cover the loss, it transfers DAI to the unstakes and holds DAI in the insurance contract YieldManager. As such, when for DSRYieldProvider, stakedValue() won't increase after withdrawFromInsurance() as the withdrawn DAI remains unstaked, so committedYield won't change.",
            "severity": "Medium Risk",
            "contract": "DSRYieldProvider",
            "function": "withdrawFromInsurance()",
            "lineNumber": "L112-L129"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Calling findCheckpointHints() with _firstIndex as 0 will always revert",
            "description": "_firstIndex must be greater than 0 because checkpoint list is 1-based array, and calling findCheckpointHints() with _firstIndex as 0 will always revert.",
            "severity": "Critical Risk",
            "contract": "LidoYieldProvider.sol",
            "function": "claim()",
            "lineNumber": "93-97"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Withdrawing discounted ETH from L2 always fails",
            "description": "All discounted ETH withdrawals will fail due to the mismatch between the scheduled withdrawal amount on L2 and the actual discounted amount on L1.",
            "severity": "High Risk",
            "contract": "L2CrossDomainMessenger",
            "function": "relayMessage()",
            "lineNumber": "189-191"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Fund duplication via ERC20 self-transfer",
            "description": "The from and to balances are fetched and cached, then updated via _setBalance(). Should a user do an asset self-transfer such that from == to with a specified amount, there would be fund duplication where his balance would increase by amount.",
            "severity": "Critical Risk",
            "contract": "ERC20Rebasing.sol",
            "function": "N/A",
            "lineNumber": "L241-L247"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Message can be passed through OptimismPortal to maliciously call ethYieldManager",
            "description": "A message can be sent through OptimismPortal to maliciously call ethYieldManager.",
            "severity": "N/A",
            "contract": "OptimismPortal",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Negative yield events can affect withdrawals that happened before",
            "description": "Withdrawals can be discounted in case a negative yield event happens. The discounted price is determined by the accumulatedNegativeYields variable which is only increased in commitYieldReport.",
            "severity": "Informational",
            "contract": "YieldManager.sol",
            "function": "commitYieldReport()",
            "lineNumber": "L306"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-358"
                ]
            },
            "title": "enableInsurance flag controls two distinct features",
            "description": "The enableInsurance parameter in YieldManager.commitYieldReport function controls two distinct features: whether insurance is taken on positive yield and whether insurance funds should be paid out on negative yield. This single flag affects all providers.",
            "severity": "Informational",
            "contract": "YieldManager.sol",
            "function": "commitYieldReport",
            "lineNumber": "L229"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "OpenZeppelin's v5 Ownable2StepUpgradeable does not initialize owner",
            "description": "The imported OpenZeppelin Upgradeable version is 4.7.3, which lacks Ownable2StepUpgradeable as it was introduced in a later version and does not call __Ownable_init_unchained, leaving the owner uninitialized.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Allow DAI $ USDC swaps via Curve's 3Pool",
            "description": "DAI $ USDC swaps are restricted to Maker's PSM. There could be some scenarios where using Curve's 3Pool could be better.",
            "severity": "Informational",
            "contract": "USDConversions.sol",
            "function": "N/A",
            "lineNumber": "L24-L25"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "USD conversion slippage parameter is bridged as extraData",
            "description": "The USD conversion slippage parameter is passed as the _extraData parameter to L2, which is unnecessary and can be adjusted.",
            "severity": "Informational",
            "contract": "L1BlastBridge",
            "function": "N/A",
            "lineNumber": "L183"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "DAI withdrawals need to be manually claimed",
            "description": "Users need to wait for the bridge finalization period and only then the waiting period for the admin to finalize withdrawals begins. Some contracts might not have the functionality to claim the withdrawals.",
            "severity": "Informational",
            "contract": "L1BlastBridge",
            "function": "finalizeBridgeERC20",
            "lineNumber": "112"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-697"
                ]
            },
            "title": "L1BlastBridge.finalizeBridgeERC20 natspec clarification",
            "description": "The natspec says that the L1 USD Bridge is to be used, but the actual bridge used is L2BlastBridge.",
            "severity": "Informational",
            "contract": "USDB",
            "function": "N/A",
            "lineNumber": "L48-L51"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Additional setYieldToken checks",
            "description": "N/A",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "33"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "ILido.stake could use full signature with return values",
            "description": "The ILido interface does not define the return value of Lido's stake function.",
            "severity": "Informational",
            "contract": "LidoYieldProvider.sol",
            "function": "stake",
            "lineNumber": "L11"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-116"
                ],
                "3": [
                    "CWE-838"
                ]
            },
            "title": "L2BlastBridge error prefixes",
            "description": "error prefixes. The L2BlastBridge.finalizeBridgeETHDirect function currently uses StandardBridge.",
            "severity": "Informational",
            "contract": "L2BlastBridge",
            "function": "finalizeBridgeETHDirect",
            "lineNumber": "48-51"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Yield token price peg assumptions",
            "description": "N/A",
            "severity": "Medium Risk",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "34"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Yield distribution may become unfair",
            "description": "Due to _sharePrice() calculation, yield doesn't get distributed to remainders, preventing small deposits and remainders of <= 0.5 ETH from receiving yield.",
            "severity": "Medium Risk",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 20,
            "category": {
                "1": [
                    "CWE-697"
                ],
                "2": [
                    "CWE-1025"
                ],
                "3": [
                    "CWE-595"
                ],
                "4": [
                    "CWE-597"
                ]
            },
            "title": "Clarity on Bridge selection",
            "description": "Used for bridging ETH from L1 to L2 and vice-versa. This could confuse users on which bridge to select for bridging ETH.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 21,
            "category": {
                "1": [
                    "CWE-284"
                ]
            },
            "title": "Missing onlyEOA modifier",
            "description": "N/A",
            "severity": "Informational",
            "contract": "WithdrawalQueue",
            "function": "N/A",
            "lineNumber": "L6,L17,L99-L123"
        }
    ]
}