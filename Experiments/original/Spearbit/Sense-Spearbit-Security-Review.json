{"path": "./Audit_Reports_2024/Spearbit/Sense-Spearbit-Security-Review.pdf", "project_info": {"url": "https://github.com/sense-finance/sense-v1", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "The Variable `maxscale` Is Not Saved", "description": "In the function `_collect()` of `Divider.sol`, the value `maxscale` is updated in a temporary variable. However, this temporary variable is not written back to its origin.", "severity": "High Risk", "contract": "Divider.sol", "function": "_collect()", "lineNumber": "334-382"}, {"id": 1, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "Reserves Not Always Updated In `onJoinPool()`", "description": "The reserves are not always updated when a user joins a pool.", "severity": "Low Risk", "contract": "N/A", "function": "onJoinPool()", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "Wrong Amount in `sponsorSeries`", "description": "N/A", "severity": "High Risk", "contract": "N/A", "function": "sponsorSeries", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-682"]}, "title": "Return value missing in `wrapUnderlying() WstETHAdapter`", "description": "The function `wrapUnderlying()` of `WstETHAdapter` does not return any value, which means it returns 0. On the contrary, the function `wrapUnderlying()` of `CAdapter` returns the amount of tokens sent: `tBal`. The contract `Periphery`, which calls `wrapUnderlying()`, expects a return value.", "severity": "High Risk", "contract": "WstETHAdapter", "function": "wrapUnderlying()", "lineNumber": "136-142"}, {"id": 4, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "Send Reward And Stake Once", "description": "A reward and stake can be sent from settleSeries() or backfillScale(). However, this should only be done once.", "severity": "_High Risk", "contract": "Divider.sol", "function": ["settleSeries()", "backfillScale()"], "lineNumber": "L157-180, L511-547"}, {"id": 5, "category": {"1": ["CWE-682"]}, "title": "Untrusted `ERC-20 decimals()` Return Values Could Be Mutated, Uncached Access Shouldn\u2019t Be Considered Reliable", "description": "An attacker can mutate the variable returned by `decimals()` multiple times intra-transaction if they so wished, when it comes to a permissionless or untrusted `ERC-20`, `target` or `underlying`. This could lead to exploits due to the return value for `decimals()` is used for calculating balance transfers and other important logic.", "severity": "High Risk", "contract": ["Space.sol", "GClaimManager.sol", "CAdapter.sol", "Periphery.sol", "Divider.sol"], "function": "N/A", "lineNumber": ["L133", "L59", "L96", "L109", "L113-115", "L426-427", "L70-71", "L546-548", "L676"]}, {"id": 6, "category": {"1": ["CWE-682"]}, "title": "LP Oracle Should Enforce 18 Decimals Or Use Decimal Flexible Fixed Point Math", "description": "The LP oracle calculation assumes all priced tokens have 18 decimals, which can lead to undervaluation or overvaluation if target tokens have different decimals. This could be exploited by malicious users creating pools with manipulated decimals.", "severity": "High Risk", "contract": "LP.sol", "function": "N/A", "lineNumber": "L87-L88"}, {"id": 7, "category": {"1": ["CWE-693"], "2": ["CWE-807"]}, "title": "Intra-Transaction Oracle Tampering Possible With LP Pricing Using Flashloans", "description": "An attacker could potentially tamper with the price by setting arbitrary pool values only true for a certain point of the transaction. This could lead to draining the contract of the rest.", "severity": "High Risk", "contract": "LP.sol", "function": "N/A", "lineNumber": "L87-L88"}, {"id": 8, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Avoid External Calls To Transient Or Unverified External Contracts", "description": "Interacting with transient, unverified contracts on-chain can be quite dangerous, as its underlying logic could turn malicious at some point.", "severity": "High Risk", "contract": "PoolManager.sol", "function": "N/A", "lineNumber": "L190, L254, L274"}, {"id": 9, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "Check `zeroParams` and `lpTokenParams` Is Not Empty", "description": "The function `addSeries()` does not check if `zeroParams` and `lpTokenParams` are not empty. As these parameters are set via `setParams()`, they might not be set yet, which can lead to a griefing attack.", "severity": "High Risk", "contract": "PoolManager.sol", "function": "addSeries()", "lineNumber": "L158-197"}, {"id": 10, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Use `safeMath` for `Space` contract", "description": "The math operations in solidity 0.7.x can underflow and overflow without sufficient protection.", "severity": "High Risk", "contract": "Space.sol", "function": "onJoinPool()", "lineNumber": "132-133, 182, 213-214, 263-264, 291, 300, 356, 366, 369, 373, 379, 401, 418, 423, 435, 439, 443, 447, 456, 493, 498, 503, 509-510, 516, 523-524"}, {"id": 11, "category": {"1": ["CWE-124"]}, "title": "Attempted Out Of Bound Array Access On `TWAP` Result When `Zero Address >= Target Address`", "description": "Out of bounds array access is attempted on the results variable when `zeroi` is 1, which can lead to a panic code-path and revert the transaction. This can cause a Denial-of-Service (DoS) for any `Zero` address with a larger `bytes20` representation than its target.", "severity": "Medium Risk", "contract": "Zero.sol", "function": "N/A", "lineNumber": "87-98"}, {"id": 12, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Force Claim Collection For Any Address", "description": "An actor can trigger claim collection from any address by doing a transferFrom transaction with an amount of 0 tokens, potentially causing control over timing issues.", "severity": "Medium Risk", "contract": "Claim.sol and Divider.sol", "function": "transferFrom() and collect()", "lineNumber": "L37-44, L331-398"}, {"id": 13, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "Balancer Tokens Are Already Sorted", "description": "Balancer requires tokens to be sorted, so the result of getPoolTokens() is also sorted. This means Sense does not have to discover which token is the zero token.", "severity": "Gas Optimization", "contract": "Zero.sol", "function": "N/A", "lineNumber": "L74-L110"}, {"id": 14, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-391"]}, "title": "Use Custom Errors", "description": "Implement custom errors as explained in the Solidity Language Blog: Custom Errors Explainer.", "severity": "Low Risk", "contract": "LP.sol, Target.sol, Underlying.sol, Zero.sol, IRModel.sol", "function": "N/A", "lineNumber": "L52, L13, L8"}, {"id": 15, "category": {"1": ["CWE-682"]}, "title": "Use Full-Sized Types For Minimal Gas Cost Overhead On `immutables` or `constants`", "description": "`Immutable` / `Constant` variables do not yield any gas savings normally appropriated to smaller bit-sized types. This is because they do not use storage slots and, therefore, do not benefit from tight packing storage slots.", "severity": "Gas Optimization", "contract": ["Space.sol", "BaseAdapter.sol", "Claim.sol", "BaseFactory.sol"], "function": "N/A", "lineNumber": ["L424", "L290"]}, {"id": 16, "category": {"1": ["CWE-664"], "2": ["CWE-400"]}, "title": "Getter for Only `Zero` And `Claim`", "description": "The addresses for `Divider` contract using the `getter` function for the `zero` and/or `claim` `series` array. This uses a relative large amount of gas as 9 parameters are retrieved of which only 2 are used.", "severity": "_Gas Optimization_", "contract": "GClaimManager.sol, Periphery.sol, Divider.sol", "function": "N/A", "lineNumber": "GClaimManager.sol#L43, GClaimManager.sol#L82, GClaimManager.sol#L114, Periphery.sol#L395, Periphery.sol#L407, Periphery.sol#L559, Divider.sol#L70-L96"}, {"id": 17, "category": {"1": ["CWE-710"], "2": ["CWE-1120"], "3": ["CWE-1080"]}, "title": "Consolidate Mappings Accessed by Same Key Into Struct", "description": "Multiple mappings are accessed by the same key in both Divider.sol and PoolManager.sol. Consolidating the multiple mappings into a struct could yield gains in code readability and gas optimization.", "severity": "_Gas Optimization", "contract": "Divider.sol, PoolManager.sol", "function": "N/A", "lineNumber": "Divider.sol#L58, Divider.sol#L73, Divider.sol#L67, Divider.sol#L70, PoolManager.sol#L94-98"}, {"id": 18, "category": {"1": ["CWE-710"], "2": ["CWE-1120"], "3": ["CWE-1060"]}, "title": "Lower `issuance` And `tilt` In `Divider.sol` To `uint46` / `uint96`", "description": "Lowering `issuance` and `tilt` to `uint46`/`uint96` in `Divider.sol` can save an additional storage slot, yielding gas benefits from warm access and dirty slot sharing.", "severity": "Gas Optimization", "contract": "Divider.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 19, "category": {"1": ["CWE-682"]}, "title": "Redundant `fdivUp`", "description": "In the function excess(), a redundant fdivUp is performed with a multiplication by FixedMath.WAD followed by a division by 10**18. As FixedMath.WAD == 10**18, this does not do anything.", "severity": "Gas Optimization", "contract": "GClaimManager.sol", "function": "excess()", "lineNumber": "109-130"}]}