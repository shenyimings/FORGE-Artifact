{"path": "./Audit_Reports_2024/Spearbit/Timeless-Spearbit-Security-Review.pdf", "project_info": {"url": "https://github.com/timeless-fi/timeless", "commit_hash": "018b1f47de6c95d9cdfe8d4c2ca1580b3449b79a", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"]}, "title": "Rounding issues when exiting a vault through shares", "description": "When exiting a vault through Gate.exitToVaultShares, the user specifies a vaultSharesAmount. The amount of PYT&NYT to burn is determined by a burnAmount = _vaultSharesAmountToUnderlyingAmount(vaultSharesAmount) call. All implementations of this function in derived YearnGate and ERC4626 contract\u2019s round down the burnAmount.", "severity": "Medium Risk", "contract": "Gate.sol", "function": "_vaultSharesAmountToUnderlyingAmount", "lineNumber": "L383"}, {"id": 1, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "Possible outstanding allowances from Gate", "description": "N/A", "severity": "Low Risk", "contract": "Gate.sol", "function": "N/A", "lineNumber": "216"}, {"id": 2, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Factory.sol owner can change fees unexpectedly", "description": "The Factory.sol owner may be able to front run yield calculations in a gate implementation and change user fees unexpectedly.", "severity": "Low Risk", "contract": "Factory.sol", "function": "N/A", "lineNumber": "L141"}, {"id": 3, "category": {"1": ["CWE-693"], "2": ["CWE-807"]}, "title": "Low uniswapV3TwapSecondsAgo may result in AMM manipulation in pound()", "description": "The lower the value of `uniswapV3TwapSecondsAgo` is set with at construction creation time the easier it becomes for an attacker to manipulate the results of the `pound()` function.", "severity": "Low Risk", "contract": "UniswapV3xPYT.sol", "function": "N/A", "lineNumber": "L98"}, {"id": 4, "category": {"1": ["CWE-697"], "2": ["CWE-1024"]}, "title": "UniswapV3Swapper uses wrong allowance check", "description": "Before the UniswapV3Swapper can exit a gate, it needs to set an XPYT allowance to the gate. The following check determines if an approval needs to be set: The tokenAmountOut is in an underlying token amount but is compared against an xPYT shares amount.", "severity": "Low Risk", "contract": "UniswapV3Swapper.sol", "function": "N/A", "lineNumber": "L282, L373"}, {"id": 5, "category": {"1": ["CWE-697"], "2": ["CWE-1023"], "3": ["CWE-839"]}, "title": "Missing check that tokenIn and tokenOut are different", "description": "The doZeroExSwap() function does not check if the two token addresses are different from one another.", "severity": "N/A", "contract": "N/A", "function": "doZeroExSwap()", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Gate.sol gives unlimitted ERC20 approval on pyt for arbitrary address", "description": "A malicious contract may be passed into the claimYieldAndEnter() function as xPYT and given full control over any PYT the contract may ever hold.", "severity": "Low Risk", "contract": "Gate.sol", "function": "claimYieldAndEnter()", "lineNumber": "L675"}, {"id": 7, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "Constructor function does not check for zero address", "description": "The constructor function does not check if the addresses passed into it are not zero addresses.", "severity": "N/A", "contract": ["xPYTFactory", "UniswapV3xPYT", "UniswapV3Swapper", "Swapper", "Factory", "Gate", "NegativeYieldToken", "PerpetualYieldToken"], "function": "constructor()", "lineNumber": ["20-23", "82-83", "70-74", "76-78", "52", "158-160", "15", "15"]}, {"id": 8, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Accruing yield to msg.sender is not required when minting to xPYT contract", "description": "The _exit function always accrues yield to the msg.sender before burning new tokens. However, in case xPYT is used, tokens are burned on the Gate and not msg.sender.", "severity": "Low Risk", "contract": "Gate", "function": "_exit", "lineNumber": "L1009"}, {"id": 9, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "Mint PerpetualYieldTokens for free by self-transfer", "description": "functions operate on cached balance values. When transferring tokens to oneself the decreased balance is overwritten by an increased balance which makes it possible to mint PYT tokens for free.", "severity": "Critical Risk", "contract": "PerpetualYieldToken", "function": "transfer() and transferFrom()", "lineNumber": "L53"}, {"id": 10, "category": {"1": ["CWE-682"]}, "title": "Unlocked solidity pragmas", "description": "Unlocked solidity pragmas can result in unexpected behaviors or errors with different compiler versions.", "severity": "Informational", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 11, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "No safeCast in UniswapV3Swapper\u2019s _swap", "description": "It should be noted that solidity version `\u02c60.8.0` doesn\u2019t revert on overflow when type-casting.", "severity": "Informational", "contract": "UniswapV3Swapper.sol", "function": "_swap", "lineNumber": "L475"}]}