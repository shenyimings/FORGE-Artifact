{"path": "./Audit_Reports_2024/Spearbit/report-blast-node-review-draft.pdf", "project_info": {"url": "https://github.com/blast-io/blast-audit-spearbit", "commit_hash": "be51873cb7740d6044fc41ce218ee4f1bd601c32", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "AllocateDevGas() contains redundant hashing", "description": "AllocateDevGas() contains redundant calls to getHash(), which performs the computationally expensive Keccak256Hash algorithm, exposing the node to resource consumption related DOS.", "severity": "Low Risk", "contract": "N/A", "function": "AllocateDevGas()", "lineNumber": "134"}, {"id": 1, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-862"]}, "title": "(b *blast) Run() caller authorization conditionals should be placed before input deserialization", "description": "The caller authorization conditionals in (b *blast) Run() are placed after input deserialization, allowing untrusted callers to populate the byte buffer with malicious data. Moving these conditionals to the start of their respective handler routines will improve efficiency and reduce the attack surface.", "severity": "Low Risk", "contract": "op-geth/core/vm/contracts.go", "function": "Run()", "lineNumber": "L1239-L1240, L1278-L1279"}, {"id": 2, "category": {"1": ["CWE-682"], "2": ["CWE-369"]}, "title": "AllocateDevGas() divide-by-zero can cause denial of service", "description": "Divide-by-zero can cause denial of service.", "severity": "N/A", "contract": "op-geth/core/vm/gas_tracker.go", "function": "AllocateDevGas()", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "No nil check on ZeroClaimRate", "description": "N/A", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "To implement TODOs found in the code risking node ops", "description": "This contains the TODO's mentions in the code which point to missing code implementation.", "severity": "Low Risk", "contract": "N/A", "function": "N/A", "lineNumber": "101, 107"}, {"id": 5, "category": {"1": ["CWE-664"], "2": ["CWE-404"], "3": ["CWE-772"], "4": ["CWE-775"]}, "title": "SelfDestruct permanently deletes all unclaimed yield", "description": "Contracts using yieldClaimable will have all unclaimed yield deleted when selfdestructing.", "severity": "Low Risk", "contract": "N/A", "function": "opSelfdestruct()", "lineNumber": "L826, L831"}, {"id": 6, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "Configuring a YieldClaimable account to YieldClaimable resets the claimable balance", "description": "Setting a flag of an account in YieldClaimable mode to again in YieldClaimable mode updates its fixed field to include the previous claimable balance, and the claimable amount goes to 0.", "severity": "Low Risk", "contract": "N/A", "function": "N/A", "lineNumber": "L511-L513"}, {"id": 7, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "SubClaimableAmount() can claim more than the maximum claimable balance", "description": "SubClaimableAmount(amount *big.Int) doesn't check that amount doesn't exceed the maximum claimable. The current call path checks this isn't the case before calling this function. However, a new invocation may not do that which could lead to issues with the miscalculated shares and remainder, affecting the system overall.", "severity": "Low Risk", "contract": "N/A", "function": "SubClaimableAmount", "lineNumber": "[op-geth/core/state/state_object.go#L545]"}, {"id": 8, "category": {"1": ["CWE-682"]}, "title": "Share remainder becomes increasingly inefficient over time", "description": "Share price can never decrease, introducing an inefficiency that will continue to get worse over time when calculating shares and remainder in computeSharesAndRemainder(). The remainder size will grow and could become very large if the Ethereum price grows.", "severity": "Low Risk", "contract": "N/A", "function": "computeSharesAndRemainder()", "lineNumber": "[op-geth/core/state/state_object.go#L430](https://github.com/blast-io/blast-audit-spearbit/blob/be51873cb7740d6044fc41ce218ee4f1bd601c32/op-geth/core/state/state_object.go#L430)"}, {"id": 9, "category": {"1": ["CWE-664"], "2": ["CWE-400"], "3": ["CWE-770"]}, "title": "Gas tracking introduces resource consumption related DOS", "description": "The gas tracking mechanism can lead to Denial of Service (DOS) attacks due to increased resource overhead during transaction processing and state transitions.", "severity": "High Risk", "contract": "N/A", "function": "vmenv.Call()", "lineNumber": "L35, L205"}, {"id": 10, "category": {"1": ["CWE-691"], "2": ["CWE-362"]}, "title": "MemoryStateDB contains data race in DeleteState()", "description": "Upstream Optimism has two functions in op-chain-ops/state/memory_db.go that do not use the MemoryStateDB sync.RWMutex correctly.", "severity": "Medium Risk", "contract": "N/A", "function": "DeleteState()", "lineNumber": "N/A"}, {"id": 11, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "(i ImmutableConfig) Check() is missing validation checks for new Blast fields", "description": "Check() contains checks for nearly every field in Immutable, but some new blast fields are still missing validation checks.", "severity": "Low Risk", "contract": "ImmutableConfig", "function": "Check()", "lineNumber": "L31"}, {"id": 12, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "USDB predeployment is skipped", "description": "USDB related code was commented as there was an issue with USDB's constructor and this has since been fixed outside of review scope.", "severity": "Low Risk", "contract": "immutables", "function": "N/A", "lineNumber": "L198-L206"}, {"id": 13, "category": {"1": ["CWE-682"]}, "title": "op-geth/core/vm/contracts.go change makes multiple methods less efficient", "description": "The op-geth/core/vm/contracts.go change causes multiple methods to become less efficient.", "severity": "Low Risk", "contract": "N/A", "function": "Run()", "lineNumber": "L1239-L1240, L1278-L1279"}, {"id": 14, "category": {"1": ["CWE-703"]}, "title": "Invariant panics risk node operation", "description": "There are multiple places where invariants are tracked with panic. The use of panics in critical block processing code should be carefully considered before the code is used in production.", "severity": "Low Risk", "contract": "N/A", "function": "N/A", "lineNumber": "[op-geth/core/vm/gas_tracker.go#L28, op-geth/core/vm/gas_tracker.go#L66-L67, op-geth/core/state_transition.go#L505-L506]"}, {"id": 15, "category": {"1": ["CWE-703"]}, "title": "Op-geth and optimism contain multiple failing tests and code without tests", "description": "There are multiple tests that are failing or have been commented out. Some of these are Blast specific tests that are not inherited from upstream Optimism code. There are also multiple large portions of code that do not have any testing coverage for which tests should be created.", "severity": "Informational", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 16, "category": {"1": ["CWE-710"], "2": ["CWE-1061"]}, "title": "Referencing enums in their integer notation makes code less readable", "description": "makes the code less readable and more difficult to maintain.", "severity": "Informational", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 17, "category": {"1": ["CWE-710"], "2": ["CWE-1041"]}, "title": "UseGasWithOp() contains an unneeded conditional and call", "description": "The else if op.IsContractCreate() conditional branch can be removed.", "severity": "Informational", "contract": "N/A", "function": "UseGasWithOp()", "lineNumber": "L205-L209"}, {"id": 18, "category": {"1": ["CWE-710"], "2": ["CWE-1164"]}, "title": "Typos", "description": "There are a few typos in the code and comments.", "severity": "Informational", "contract": "statedb.go,state_object.go,journal.go,state_account.go", "function": "N/A", "lineNumber": "L371,L427,L483,L659,L78,L112,L39"}, {"id": 19, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Code diff can be explained in comments", "description": "Code diff from Optimism sometimes is not obvious and can be explained in comments.", "severity": "Informational", "contract": "layer_two.go", "function": "N/A", "lineNumber": "L72-L76"}, {"id": 20, "category": {"1": ["CWE-435"]}, "title": "UseGasNatively() and UseGasForConstantCost() are duplicates", "description": "N/A", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "14"}, {"id": 21, "category": {"1": ["CWE-710"], "2": ["CWE-1164"]}, "title": "Incorrect comments", "description": "N/A", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "14"}]}