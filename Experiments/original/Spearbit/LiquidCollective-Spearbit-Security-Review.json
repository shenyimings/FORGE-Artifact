{
    "path": "./Audit_Reports_2024/Spearbit/LiquidCollective-Spearbit-Security-Review.pdf",
    "project_info": {
        "url": "https://github.com/River-Protocol/river-contracts",
        "commit_hash": "778d71c5c2b0bb7d430b60df72b4d65173ebee6a",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Shares distributed to operators suffer from rounding error",
            "description": "_rewardOperators distribute a portion of the overall shares distributed to operators based on the number of active and funded validators that each operator has. The current number of shares distributed to a validator is calculated by the following code `_mintRawShares(operators[idx].feeRecipient, validatorCounts[idx] * rewardsPerActiveValidator);` which suffers from a rounding error caused by division before multiplication.",
            "severity": "Medium Risk",
            "contract": "River.1.sol",
            "function": "_rewardOperators",
            "lineNumber": "L238"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "OperatorsRegistry._getNextValidatorsFromActiveOperators should not consider stopped when picking a validator",
            "description": "The function _getNextValidatorsFromActiveOperators should not consider stopped operators when picking a validator.",
            "severity": "N/A",
            "contract": "OperatorsRegistry",
            "function": "_getNextValidatorsFromActiveOperators",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Cache the `r.value.length - 1` value to avoid reading from the storage multiple times",
            "description": "We can cache the `r.value.length - 1` value to avoid reading from the storage twice and also doing the same arithmetic operation twice.",
            "severity": "_Gas Optimization",
            "contract": "Operators.sol",
            "function": "N/A",
            "lineNumber": "L261-L264"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Caching `activeCount` in `Operators.sol::getAllActive/getAllFundable` to save gas",
            "description": "`activeCount` can be made into a storage variable that gets updated when an operator becomes active or inactive. This way we can avoid the expensive loops to calculate `activeCount` on each call to `getAllActive()` or `getAllFundable()`.",
            "severity": "Gas Optimization",
            "contract": "Operators.sol",
            "function": "getAllActive/getAllFundable",
            "lineNumber": "L165-L176, L205-L216"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1120"
                ],
                "3": [
                    "CWE-1060"
                ]
            },
            "title": "Rewrite the for loop in `ValidatorKeys.sol::getKeys` to save gas",
            "description": "Optimize the for loop in ValidatorKeys.sol's getKeys function to reduce gas consumption.",
            "severity": "Gas Op",
            "contract": "ValidatorKeys.sol",
            "function": "getKeys",
            "lineNumber": "L64-L65"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Gas Optimization: Replace `Operators.get` with `Operators.getByIndex`",
            "description": "`Operators.get` in `_getNextValidatorsFromActiveOperators` performs multiple checks that have been done before when `Operators.getAllFundable()` was called. This includes finding the `index`, and checking if `OperatorResolution.active` is set.",
            "severity": "Gas Optimization",
            "contract": "OperatorsRegistry.1.sol",
            "function": "_getNextValidatorsFromActiveOperators",
            "lineNumber": "436"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-571"
                ]
            },
            "title": "Avoid unnecessary equality checks with `true` in `if` statements",
            "description": "Unnecessary equality checks with `true` can be avoided in `if` statements to improve code quality and readability.",
            "severity": "Low",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-400"
                ]
            },
            "title": "Rewrite `OperatorRegistry.getOperatorDetails` to save gas",
            "description": "N/A",
            "severity": "Gas Optimization",
            "contract": "OperatorRegistry",
            "function": "getOperatorDetails",
            "lineNumber": "40"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Rewrite/simplify `OracleV1.isMember` to save gas",
            "description": "Simplifying OracleV1.isMember can help reduce gas consumption.",
            "severity": "Gas Op",
            "contract": "OracleV1",
            "function": "isMember",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Cache `beaconSpec.secondsPerSlot * beaconSpec.slotsPerEpoch` multiplication to save gas",
            "description": "Caching the result of `beaconSpec.secondsPerSlot * beaconSpec.slotsPerEpoch` can help reduce gas consumption.",
            "severity": "Optimization",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "41"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Avoid to waste gas distributing rewards when the number of shares to be distributed is zero",
            "description": "_onEarnings calculate and distribute shares to both operators and treasury. During the Audit, the Client stated that both GlobalFee and OperatorRewardsShare , used to calculate the number of shares to be distributed to operators and treasury, could range from 0 to BASE . This mean that there are scenarios where: sharesToMint could be 0 (total number of shares to be distributed to operators and treasury). operatorRewards could be 0 (number of shares to be distributed to operators). sharesToMint - mintedRewards could be 0 (number of shares to be distributed to treasury). In those scenarios, all the gas spent in calculation and event emitted by calling _mintRawShares could be avoided.",
            "severity": "Gas Optimization",
            "contract": "River.1.sol",
            "function": "_onEarnings",
            "lineNumber": "L263-L280"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "_rewardOperators could save gas by skipping operators with no active and funded validators",
            "description": "_rewardOperators is the River function that distributes earning rewards to each active operator based on the amount of active validators. The function iterates over the list of active operators, calculating the total amount of active and funded validators for each operator. Because of current code, the final temporary array validatorCounts could have some item that contains 0 if the operator in the index position had no more active validators.",
            "severity": "Gas Optimization",
            "contract": "River.1.sol",
            "function": "_rewardOperators",
            "lineNumber": "L219-L248"
        }
    ]
}