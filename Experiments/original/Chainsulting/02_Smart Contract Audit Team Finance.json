{"path": "./Audit_Reports_2024/Chainsulting/02_Smart Contract Audit Team Finance.pdf", "project_info": {"url": "https://raw.githubusercontent.com/chainsulting/Smart-Contract-Security-Audits/master/Team%20Finance/", "commit_hash": "4c014a11769bbb853317db21df5576a02427f0ff4981fa17350450763b1cdd8f", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Implicit loop over unbounded data structure", "description": "Gas consumption in function 'getAllDepositIds' in contract 'lockContract' depends on the size of data structures that may grow unboundedly. The highlighted statement involves copying the array 'allDepositIds' from 'storage' to 'memory'. When copying arrays from 'storage' to 'memory' the Solidity compiler emits an implicit loop. If the array grows too large, the gas required to execute the code will exceed the block gas limit, effectively causing a denial-of-service condition.", "severity": "LOW", "contract": "lockContract", "function": "getAllDepositIds", "lineNumber": "176-180"}]}