{
    "path": "./Audit_Reports_2024/Cyberscope/xava.pdf",
    "project_info": {
        "url": "https://github.com/avalaunch-external/avalaunch-contracts",
        "commit_hash": "b6b8bbb6a326522c07a8cecaa602d8ac30b8d8bc",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1120"
                ]
            },
            "title": "TII - Token Indexing Improvement",
            "description": "The contract uses a boolean indicator to identify fund and main tokens, leading to complexity and decreased readability and performance.",
            "severity": "Minor / Informative",
            "contract": "AvalaunchLBP.sol",
            "function": "createLBP()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "MSC - Missing Sanity Check",
            "description": "The `platformAccessFeeBPS` variable is initialized in the constructor of the contract without a maximum check, which can cause pools to not be finalized if initialized with a value greater than 10,000.",
            "severity": "Minor / Informative",
            "contract": "AvalaunchLBP.sol",
            "function": "N/A",
            "lineNumber": "119"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-237"
                ]
            },
            "title": "DSM - Data Structure Misuse",
            "description": "The contract uses redundant data structures `_recipientAddresses` and `_feeRecipientsBPS` to store platform fee receiver addresses and fees. These variables are initialized once in the constructor and never changed again.",
            "severity": "Minor / Informative",
            "contract": "AvalaunchLBP.sol",
            "function": "N/A",
            "lineNumber": "55"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-1288"
                ]
            },
            "title": "L05 - Unused State Variable",
            "description": "An unused state variable is a state variable that is declared in the contract, but is never used in any of the contract's functions.",
            "severity": "Minor / Informative",
            "contract": "AvalaunchLBP.sol",
            "function": "N/A",
            "lineNumber": "58"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "L16 - Validate Variable Setters",
            "description": "The contract performs operations on variables that have been configured on user-supplied input without proper check for zero value, leading to potential problems when the contract is executed.",
            "severity": "Minor / Informative",
            "contract": "AvalaunchLBP.sol",
            "function": "N/A",
            "lineNumber": "120,127,128"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "L19 - Stable Compiler Version",
            "description": "The `^` symbol indicates that any version of Solidity that is compatible with the specified version can be used to compile the contract. The version lock is a mechanism that allows the author to specify a minimum version of the Solidity compiler that must be used to compile the contract code.",
            "severity": "Minor / Informative",
            "contract": "AvalaunchLBP",
            "function": "N/A",
            "lineNumber": "2"
        }
    ]
}