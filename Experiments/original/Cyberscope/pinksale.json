{
    "path": "./Audit_Reports_2024/Cyberscope/pinksale.pdf",
    "project_info": {
        "url": "https://github.com/pinkmoonfinance/pink-lock-contracts-v3",
        "commit_hash": "a4c47e837a098fd1be62bac21e0abd1094b24a2e",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "ID Token Generation Conflict",
            "description": "The contract generates ids based on an arbitrary assumption about previous versions, which may break if someone abuses the previous versions and generates a large amount of locks.",
            "severity": "minor",
            "contract": "PinkLock02.sol",
            "function": "N/A",
            "lineNumber": "L368"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ],
                "3": [
                    "CWE-680"
                ]
            },
            "title": "Normal and LP Token Duplication",
            "description": "N/A",
            "severity": "minor",
            "contract": "PinkLock02.sol",
            "function": "N/A",
            "lineNumber": "348, 456"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "LP Token Mocking",
            "description": "The user can create a contract that implements the factory(), getPair() and token0(), token1() method in order to mock the LP token validator. As a result the user will be able to lock an LP Token that essentially is not an LP token.",
            "severity": "minor",
            "contract": "PinkLock02.sol",
            "function": "_isValidLpToken",
            "lineNumber": "862"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Transposition Property Check",
            "description": "According to the transposition property, if the sum of two integers is less than n, then each integer will be less than n. The contract could skip the individual checks since the sum is checked.",
            "severity": "Minor",
            "contract": "PinkLock02",
            "function": "N/A",
            "lineNumber": "138"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Performance Improvement (1/2)",
            "description": "N/A",
            "severity": "minor",
            "contract": "PinkLock02",
            "function": "N/A",
            "lineNumber": "L205"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Performance Improvement (2/2)",
            "description": "N/A",
            "severity": "minor",
            "contract": "PinkLock02",
            "function": "N/A",
            "lineNumber": "L534"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-841"
                ]
            },
            "title": "Locker Logic Simplification",
            "description": "N/A",
            "severity": "Minor",
            "contract": "PinkLock02",
            "function": "N/A",
            "lineNumber": "21"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-233"
                ],
                "4": [
                    "CWE-236"
                ]
            },
            "title": "L12 - Using Variables before Declaration",
            "description": "The contract is using a variable before the declaration. This is usually happening either if it has not been declared yet or the variable has been declared in a different scope.",
            "severity": "minor",
            "contract": "PinkLock02.sol",
            "function": "N/A",
            "lineNumber": "849"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-369"
                ]
            },
            "title": "L13 - Divide before Multiply Operation",
            "description": "Performing divisions before multiplications may cause loss of precision.",
            "severity": "minor",
            "contract": "PinkLock02.sol",
            "function": "N/A",
            "lineNumber": "513"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "L14 - Uninitialized Variables in Local Scope",
            "description": "There are variables that are defined in the local scope and are not initialized.",
            "severity": "minor",
            "contract": "PinkLock02.sol",
            "function": "N/A",
            "lineNumber": "848,849"
        }
    ]
}