{
    "path": "./Audit_Reports_2024/Cyberscope/usdxs.pdf",
    "project_info": {
        "url": "N/A",
        "commit_hash": "N/A",
        "address": "N/A"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "RC - Redundant Check",
            "description": "The `_tokens[tokenType].decimals > 0` expression is checked twice in the `collect` function, making the second require check redundant. The contract calls the `createAccount` function only if the `account.depositAddress == address(0)` expression is true, making the require check redundant.",
            "severity": "Minor / Informative",
            "contract": "N/A",
            "function": "collect() and createAccount()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-191"
                ]
            },
            "title": "PSU - Potential Subtraction Underflow",
            "description": "The contract subtracts two values, the second value may be greater than the first value if the contract owner misuses the configuration. As a result, the subtraction may underflow and cause the execution to revert.",
            "severity": "Critical",
            "contract": "N/A",
            "function": "centsToToken",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "RFC - Redundant Function Call",
            "description": "The contract calls the `max` function to determine which of the `balance` and `withdrawLimitCents` variables is greater. This comparison has already been made at the first if-block. As a result, calling the `max` function is redundant.",
            "severity": "Optimization",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-1173"
                ]
            },
            "title": "CR - Code Reusability",
            "description": "The code segment `keccak256(abi.encodePacked(withdrawAddress, tokenType))` is the same as the one returned from the `getSalt` function.",
            "severity": "Unresolved",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "RSK - Redundant Storage Keyword",
            "description": "The contract uses the `storage` keyword in a view function. The `storage` keyword is used to persist data on the contract's storage. View functions are functions that do not modify the state of the contract and do not perform any actions that cost gas (such as sending a transaction). As a result, the use of the `storage` keyword in view functions is redundant.",
            "severity": "N/A",
            "contract": "DXS Bridge",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1061"
                ],
                "3": [
                    "CWE-766"
                ]
            },
            "title": "IDI - Immutable Declaration Improvement",
            "description": "The contract uses variables that initialize them only in the constructor and are not mutated by other functions, but these variables are not defined as `immutable`.",
            "severity": "Unresolved",
            "contract": "DXS Bridge",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-665"
                ],
                "3": [
                    "CWE-909"
                ],
                "4": [
                    "CWE-456"
                ]
            },
            "title": "L02 - State Variables could be Declared Constant",
            "description": "State variables can be declared as constant using the constant keyword to ensure that their values cannot be changed after being set, which decreases gas consumption of the corresponding transaction.",
            "severity": "Minor / Informative",
            "contract": "DXS Bridge",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-1288"
                ]
            },
            "title": "L05 - Unused State Variable",
            "description": "An unused state variable is a state variable that is declared in the contract, but is never used in any of the contract's functions.",
            "severity": "N/A",
            "contract": "DXS Bridge",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "L16 - Validate Variable Setters",
            "description": "The contract performs operations on variables that have been configured on user-supplied input without proper checks for zero values, leading to potential problems during execution.",
            "severity": "Critical",
            "contract": "DXS Bridge",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "L19 - Stable Compiler Version",
            "description": "The team is advised to lock the pragma to ensure the stability of the codebase. The locked pragma version ensures that the contract will not be deployed with an unexpected version.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-228"
                ],
                "3": [
                    "CWE-229"
                ]
            },
            "title": "L23 - ERC20 Interface Misuse",
            "description": "The contract implements the transfer function without the return value, which is against the ERC20 interface standard.",
            "severity": "Critical",
            "contract": "N/A",
            "function": "transfer()",
            "lineNumber": "N/A"
        }
    ]
}