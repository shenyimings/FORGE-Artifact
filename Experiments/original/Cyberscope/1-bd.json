{
    "path": "./Audit_Reports_2024/Cyberscope/1-bd.pdf",
    "project_info": {
        "url": "N/A",
        "commit_hash": "N/A",
        "address": "0xbbce22ad2c7d5672ebf5307a809dfab746ccaf52",
        "chain": "bsc",
        "compilerVersion": [
            "v0.8.19+commit.7dd6d404"
        ],
        "project_path": {
            "BD": "Experiments/contracts\\1-bd\\BD"
        }
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1061"
                ],
                "3": [
                    "CWE-766"
                ]
            },
            "title": "IDI - Immutable Declaration Improvement",
            "description": "The contract is using variables that initialize them only in the constructor and are not defined as `immutable`. This can prevent certain optimizations by the Solidity compiler.",
            "severity": "Critical",
            "contract": "BitDemon",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1164"
                ],
                "3": [
                    "CWE-561"
                ]
            },
            "title": "L09 - Dead Code Elimination",
            "description": "Dead code can make a contract more difficult to understand and maintain, and can also increase the size of the contract and the cost of deploying and interacting with it.",
            "severity": "Critical",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "L19 - Stable Compiler Version",
            "description": "The `^` symbol indicates that any version of Solidity that is compatible with the specified version (i.e., any version that is a higher minor or patch version) can be used to compile the contract. The version lock is a mechanism that allows the author to specify a minimum version of the Solidity compiler that must be used to compile the contract code.",
            "severity": "Unresolved",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}