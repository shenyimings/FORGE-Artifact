{"path": "./Audit_Reports_2024/Trail_of_Bits/MesonProtocol.pdf", "project_info": {"url": "https://github.com/MesonFi/meson-contracts-solidity", "commit_hash": "d89ccc23d3c28d12d7110578d08903864b75b434", "address": "e26107628136fe2be3675a28a3fe12cae618fa64"}, "findings": [{"id": 0, "category": {"1": ["CWE-707"], "2": ["CWE-170"]}, "title": "Hash collisions in untyped signatures", "description": "The Meson protocol supports both typed and legacy untyped messages. The format of a message is determined by a bit in the encoded swap information itself. However, there is a risk of hash collisions in untyped signatures.", "severity": "High", "contract": "MesonHelpers", "function": "_checkRequestSignature, _checkReleaseSignature", "lineNumber": "237-244, 293-297"}, {"id": 1, "category": {"1": ["CWE-707"], "2": ["CWE-116"], "3": ["CWE-838"]}, "title": "Typed signatures implement insecure nonstandard encodings", "description": "[EIP-712] specifies standard encodings for the hashing and signing of typed structured data.", "severity": "Informational", "contract": "MesonHelpers", "function": "N/A", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-703"], "2": ["CWE-228"], "3": ["CWE-229"], "4": ["CWE-230"]}, "title": "Missing validation in the _addSupportToken function", "description": "Insufficient input validation in the `_addSupportToken` function makes it possible to register the same token as supported multiple times.", "severity": "Informational", "contract": "MesonTokens", "function": "_addSupportToken(address, uint8)", "lineNumber": "47-51"}, {"id": 3, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-391"]}, "title": "Insufficient event generation", "description": "Several critical operations in the MesonPools contract do not emit events.", "severity": "Informational", "contract": "MesonPools", "function": ["depositAndRegister", "deposit", "withdraw", "addAuthorizedAddr", "removeAuthorizedAddr", "unlock"], "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-664"], "2": ["CWE-665"], "3": ["CWE-908"], "4": ["CWE-457"]}, "title": "Use of an uninitialized state variable in functions", "description": "Uninitialized state variables can lead to unintended behavior and potential security risks if used in functions without proper initialization.", "severity": "High", "contract": "UCTUpgradeable", "function": "initialize()", "lineNumber": "23"}, {"id": 5, "category": {"1": ["CWE-664"], "2": ["CWE-665"], "3": ["CWE-909"], "4": ["CWE-456"]}, "title": "Risk of upgrade issues due to missing __gap variable", "description": "Without a `__gap` variable, adding new variables to inherited contracts can cause storage slot issues and break the contract.", "severity": "High", "contract": "contracts/**/*.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Lack of a zero-value check on the initialize function", "description": "The initialize function lacks a check for zero values, which can lead to unintended behavior or security vulnerabilities.", "severity": "Medium", "contract": "N/A", "function": "initialize()", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-682"]}, "title": "Solidity compiler optimizations can be problematic", "description": "High-severity security issues due to optimization bugs have occurred in the past, including a high-severity bug in the emscripten-generated solc-js compiler used by Truffle and Remix that persisted until late 2018.", "severity": "High", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-664"], "2": ["CWE-404"], "3": ["CWE-772"], "4": ["CWE-775"]}, "title": "Service fees cannot be withdrawn", "description": "If the service fee charged for a swap is waived, the fee collected for the swap is stored at index zero of the `_balanceOfPoolToken` mapping. However, because the fee withdrawal function does not allow withdrawals from index zero of the mapping, the fee can never be withdrawn.", "severity": "Informational", "contract": "MesonPools.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 9, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Lack of contract existence check on transfer / transferFrom calls", "description": "The MesonHelpers contract uses low-level call function to execute transfer / transferFrom function of an ERC20 token without performing a contract existence check, which can lead to potential issues if a supported token is self-destructed.", "severity": "High", "contract": "MesonHelpers", "function": "_unsafeDepositToken", "lineNumber": "59-62"}, {"id": 10, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1173"]}, "title": "USDT transfers to third-party contracts will fail", "description": "The Meson protocol uses the nonstandard `increaseAllowance` method during the release phase of a swap. However, certain ERC20 tokens (e.g., USDT) do not support this method, which means that those tokens cannot be released during a swap.", "severity": "N/A", "contract": "MesonHelpers", "function": "N/A", "lineNumber": "N/A"}, {"id": 11, "category": {"1": ["CWE-697"], "2": ["CWE-183"]}, "title": "SDK function _randomHex returns low-quality randomness", "description": "The Meson protocol SDK uses the `_randomHex` function to generate random salts for new swaps, but this function produces low-quality randomness due to its reliance on JavaScript's `Math.random` function.", "severity": "Informational", "contract": "N/A", "function": "_randomHex", "lineNumber": "95-113"}, {"id": 12, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "encodedSwap values are used as primary swap identifier", "description": "Using encodedSwap values as the primary swap identifier can lead to front-running attacks by malicious actors or MEV bots, causing the original initiator's transaction to fail and their swap not to be posted.", "severity": "High", "contract": "N/A", "function": "postSwap()", "lineNumber": "48-51"}, {"id": 13, "category": {"1": ["CWE-664"], "2": ["CWE-400"]}, "title": "Unnecessary _releasing mutex increases gas costs", "description": "Users taking advantage of third-party DApp integrations pay higher gas costs when executing swaps because of the unnecessary write operation.", "severity": "Informational", "contract": "MesonPools", "function": "N/A", "lineNumber": "191-197"}, {"id": 14, "category": {"1": ["CWE-682"]}, "title": "Misleading result returned by view function getPostedSwap", "description": "The return value of the `getPostedSwap` function may mislead front-end services or other interacting applications, causing them to react as though a swap has not been executed when it actually has.", "severity": "N/A", "contract": "MesonSwap", "function": "getPostedSwap()", "lineNumber": "161-173"}]}