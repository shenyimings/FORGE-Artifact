{"path": "./Audit_Reports_2024/Trail_of_Bits/MesonProtocolFixReview.pdf", "project_info": {"url": "N/A", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-707"]}, "title": "Hash collisions in untyped signatures", "description": "The Meson protocol supports both typed and legacy untyped messages, but the format of a message is determined by a bit in the encoded swap information itself, which can lead to hash collisions.", "severity": "High", "contract": "MesonHelpers", "function": "_checkRequestSignature,_checkReleaseSignature", "lineNumber": "237-243,293-297"}, {"id": 1, "category": {"1": ["CWE-707"], "2": ["CWE-116"], "3": ["CWE-838"]}, "title": "Typed signatures implement insecure nonstandard encodings", "description": "Meson currently uses a form of typed message encoding that does not conform to EIP-712, which could theoretically collide with the encoding of personal messages (Ethereum signed messages) or Recursive Length Prefix (RLP)-encoded transactions.", "severity": "Informational", "contract": "contracts/utils/MesonHelpers.sol", "function": "N/A", "lineNumber": "246-248"}, {"id": 2, "category": {"1": ["CWE-703"], "2": ["CWE-228"], "3": ["CWE-229"], "4": ["CWE-230"]}, "title": "Missing validation in the _addSupportToken function", "description": "Insufficient input validation in the `_addSupportToken` function makes it possible to register the same token as supported multiple times.", "severity": "Informational", "contract": "MesonTokens", "function": "_addSupportToken(address, uint8)", "lineNumber": "47-51"}, {"id": 3, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-391"]}, "title": "Insufficient event generation", "description": "Several critical operations in the MesonPools contract do not emit events, making it difficult to review the correct behavior of the contract once it has been deployed.", "severity": "Informational", "contract": "MesonPools", "function": ["depositAndRegister", "deposit", "withdraw", "addAuthorizedAddr", "removeAuthorizedAddr", "unlock"], "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-664"], "2": ["CWE-665"], "3": ["CWE-908"], "4": ["CWE-457"]}, "title": "Use of an uninitialized state variable in functions", "description": "The `_mesonContract` address is not set in the `UCTUpgradeable` contract\u2019s `initialize` function during the contract\u2019s initialization, leading to unexpected behavior.", "severity": "Medium", "contract": "UCTUpgradeable", "function": "initialize()", "lineNumber": "18-25"}, {"id": 5, "category": {"1": ["CWE-664"], "2": ["CWE-665"], "3": ["CWE-909"], "4": ["CWE-456"]}, "title": "Risk of upgrade issues due to missing __gap variable", "description": "None of the Meson protocol contracts include a `__gap` variable. Without this variable, it is not possible to add any new variables to the inherited contracts without causing storage slot issues.", "severity": "High", "contract": "contracts/**/*.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Lack of a zero-value check on the initialize function", "description": "The `UCTUpgradeable` contract\u2019s `initialize` function fails to validate the address of the incoming `minter` argument, allowing the caller to accidentally set the `minter` variable to the zero address.", "severity": "Informational", "contract": "UCTUpgradeable", "function": "initialize()", "lineNumber": "20-25"}, {"id": 7, "category": {"1": ["CWE-682"]}, "title": "Solidity compiler optimizations can be problematic", "description": "The optional Solidity compiler optimizations may not be safe and could lead to latent bugs or new issues being introduced due to future optimizations.", "severity": "High", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "Service fees cannot be withdrawn", "description": "If the service fee charged for a swap is waived, the fee collected for the swap is stored at index zero of the `_balanceOfPoolToken` mapping. However, because the fee withdrawal function does not allow withdrawals from index zero of the mapping, the fee can never be withdrawn.", "severity": "Informational", "contract": "MesonPools", "function": "N/A", "lineNumber": "198-203"}, {"id": 9, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Lack of contract existence check on transfer / transferFrom calls", "description": "The `MesonHelpers` contract uses the low-level `call` function to execute the `transfer` / `transferFrom` function of an ERC20 token without performing a contract existence check, which can lead to unexpected behavior if the target token is self-destructed.", "severity": "High", "contract": "contracts/utils/MesonHelpers.sol", "function": "_unsafeDepositToken", "lineNumber": "53-58"}, {"id": 10, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-732"]}, "title": "USDT transfers to third-party contracts will fail", "description": "To allow a user to release funds to a smart contract, the Meson protocol increases the contract\u2019s allowance (via a call to `increaseAllowance`) and then calls the contract.", "severity": "High", "contract": "MesonHelpers", "function": "N/A", "lineNumber": "66-67"}, {"id": 11, "category": {"1": ["CWE-697"], "2": ["CWE-183"]}, "title": "SDK function _randomHex returns low-quality randomness", "description": "The Meson protocol SDK uses the `_randomHex` function to generate random salts for new swaps, but this function produces low-quality randomness due to its use of the JavaScript `Math.random` function and zero-padding.", "severity": "Medium", "contract": "sdk/Swap.ts", "function": "_makeFullSalt() and _randomHex()", "lineNumber": "95-113"}, {"id": 12, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "EncodedSwap values are used as primary swap identifier", "description": "The usage of encodedSwap as a primary swap identifier can lead to front-running attacks by malicious actors or MEV bots, causing the original initiator's transaction to fail and their swap not to be posted.", "severity": "High", "contract": "MesonSwap", "function": "postSwap() and getPostedSwap()", "lineNumber": "48-51, 161-173"}, {"id": 13, "category": {"1": ["CWE-664"], "2": ["CWE-404"], "3": ["CWE-772"]}, "title": "Unnecessary _releasing mutex increases gas costs", "description": "When executing a swap in the third-party dApp integration release mode, the Meson protocol makes a call to an untrusted user-specified smart contract. To prevent reentrancy attacks, a flag is set before and cleared after the untrusted contract call.", "severity": "Informational", "contract": "MesonPools", "function": "N/A", "lineNumber": "181, 219-221"}, {"id": 14, "category": {"1": ["CWE-682"]}, "title": "Misleading result returned by view function getPostedSwap", "description": "Front-end services may be misled by the return value of the getPostedSwap function, reacting as though a swap has not been executed when it actually has.", "severity": "Medium", "contract": "MesonSwap", "function": "getPostedSwap()", "lineNumber": "161-173"}]}