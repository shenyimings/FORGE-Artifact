{"path": "./Audit_Reports_2024/Trail_of_Bits/OriginDollar.pdf", "project_info": {"url": "https://github.com/crytic/slither", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Invalid vaultBuffer could revert allocate", "description": "The lack of input validation when updating the `vaultBuffer` could cause token allocations inside `allocate` to revert when no revert is expected.", "severity": "Low", "contract": "VaultAdmin.sol, VaultCore.sol", "function": "setVaultBuffer(uint256 _vaultBuffer)", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-394"]}, "title": "OUSD.changeSupply should require rebasingCreditsPerToken > 0", "description": "In OUSD.sol, changeSupply function is used to inflate or deflate the money supply of rebasing accounts without requiring rebasingCreditsPerToken to be greater than 0, which can break invariants in the contract.", "severity": "High", "contract": "OUSD.sol", "function": "changeSupply(uint256 _newTotalSupply)", "lineNumber": "L477-L499"}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "SafeMath is recommended in OUSD._executeTransfer", "description": "It is recommended to use SafeMath for mathematical operations in `_executeTransfer` function unless there is a good reason not to.", "severity": "Informational", "contract": "OUSD.sol", "function": "_executeTransfer()", "lineNumber": "L187-195"}, {"id": 3, "category": {"1": ["CWE-703"]}, "title": "Transfers could silently fail without safeTransfer", "description": "Several functions do not check the ERC20.transfer return value. Without a return value check, the transfer is error-prone, which may lead to unexpected results.", "severity": "Informational", "contract": "VaultAdmin.sol, InitializableAbstractStrategy.sol", "function": "transferToken", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-707"], "2": ["CWE-228"], "3": ["CWE-237"], "4": ["CWE-238"]}, "title": "Proxies are only partially EIP-1967-compliant", "description": "The contract `InitializeGovernedUpgradeabilityProxy` saves the implementation in a storage slot fully compliant with EIP-1967, but for the `admin`, it calls `Governable`'s `_setGovernor`, which saves it at a different storage slot than that of the EIP.", "severity": "Informational", "contract": "InitializeGovernedUpgradeabilityProxy", "function": "N/A", "lineNumber": "L32-35"}, {"id": 5, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-394"]}, "title": "Queued transactions cannot be cancelled", "description": "The Governor contract contains special functions to set it as the admin of the Timelock, but there are no functions in Governor that call Timelock.cancelTransaction, making it impossible for Timelock.cancelTransaction to ever be called.", "severity": "High", "contract": "Governor,Timelock", "function": "acceptAdmin,cancelTransaction", "lineNumber": "206-212"}, {"id": 6, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1288"]}, "title": "Unused code could cause problems in future", "description": "The three oracle contracts are not upgradeable, yet contain code meant for upgradeable contracts. This unnecessarily increases the attack surface and could cause problems in the future if any of this unused code causes a low-level bug.", "severity": "Undetermined", "contract": "ChainlinkOracle.sol, MixOracle.sol, OpenUniswapOracle.sol", "function": "N/A", "lineNumber": "L13-17"}, {"id": 7, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-862"], "4": ["CWE-638"], "5": ["CWE-424"], "6": ["CWE-425"]}, "title": "Proposal transactions can be executed separately and block Proposal.execute call", "description": "Missing access controls in the `Timelock.executeTransaction` function allow `Proposal` transactions to be executed separately, circumventing the `Governor.execute` function.", "severity": "High", "contract": "Governor.sol, Timelock.sol", "function": "executeTransaction", "lineNumber": "L173-L181, L160-203"}, {"id": 8, "category": {"1": ["CWE-284"], "2": ["CWE-269"], "3": ["CWE-266"]}, "title": "Proposals could allow Timelock admin takeover", "description": "A regular Proposal is allowed to contain a transaction to change the Timelock.admin, posing an unnecessary risk that an attacker could create a Proposal to change the Timelock.admin.", "severity": "High", "contract": "Governor.sol and Timelock.sol", "function": "__queueSetTimelockPendingAdmin and queueTransaction", "lineNumber": "L214-225 and L115-125"}, {"id": 9, "category": {"1": ["CWE-284"], "2": ["CWE-749"]}, "title": "Reentrancy and untrusted contract call in mintMultiple", "description": "Missing checks and no reentrancy prevention allow untrusted contracts to be called from `mintMultiple`. This could be used by an attacker to drain the contracts.", "severity": "High", "contract": "VaultCore.sol", "function": "mintMultiple()", "lineNumber": "N/A"}, {"id": 10, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "Off-by-one minDrift/maxDrift causes unexpected revert", "description": "The MixOracle contract contains an off-by-one error in checks using minDrift and maxDrift variables, causing an error when the price is exactly equal to minDrift or maxDrift.", "severity": "Low", "contract": "MixOracle", "function": "N/A", "lineNumber": "L128-L129, L179-L180"}, {"id": 11, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "Unsafe last array element removal poses future risk", "description": "The contracts being upgradable might allow the removal of the last array element if there are no elements in the array, causing specific functions to revert.", "severity": "Undetermined", "contract": "VaultAdmin.sol, MixOracle.sol", "function": "N/A", "lineNumber": "L147-L149, L62-L64"}, {"id": 12, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Strategy targetWeight can be set for non-existent strategy", "description": "The `setStrategyWeights` function can be used to set the `targetWeight` of strategies that do not (yet) exist.", "severity": "Low", "contract": "VaultAdmin.sol", "function": "setStrategyWeights()", "lineNumber": "173-187"}, {"id": 13, "category": {"1": ["CWE-682"]}, "title": "Lack of minimum redeem value might lead to less return than expected", "description": "The lack of a minimum redeem amount argument in the redeem functions could make redeemer receive less assets than expected.", "severity": "Medium", "contract": "VaultCore.sol", "function": "redeem()", "lineNumber": "N/A"}, {"id": 14, "category": {"1": ["CWE-682"]}, "title": "withdraw allows redeemer to withdraw accidentally sent tokens", "description": "The `AaveStrategy.withdraw` function accidentally transfers the entire contract's token balance to the recipient, instead of the requested amount.", "severity": "Low", "contract": "AaveStrategy.sol", "function": "withdraw()", "lineNumber": "N/A"}, {"id": 15, "category": {"1": ["CWE-435"], "2": ["CWE-436"]}, "title": "Variable shadowing from OUSD to ERC20", "description": "OUSD inherits from ERC20 but redefines _allowances and _totalSupply state variables, leading to different values when accessing these variables.", "severity": "Low", "contract": "OUSD.sol", "function": "N/A", "lineNumber": "L19, L31-39"}, {"id": 16, "category": {"1": ["CWE-682"]}, "title": "VaultCore.rebase functions have no return statements", "description": "The VaultCore.rebase() and VaultCore.rebase(bool) functions lack a return statement, causing them to always return the default value, which may lead to issues for their callers.", "severity": "Low", "contract": "VaultCore.sol", "function": ["rebase()", "rebase(bool)"], "lineNumber": "292-315"}, {"id": 17, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "**OUSD._totalSupply can be arbitrary, even smaller than user balances**", "description": "The `OUSD` token contract allows users to opt out of rebasing effects, which can lead to an arbitrary total supply that is even smaller than user balances.", "severity": "High", "contract": "OUSD.sol", "function": "rebaseOptOut()", "lineNumber": "N/A"}]}