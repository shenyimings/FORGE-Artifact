{
    "path": "./Audit_Reports_2024/Trail_of_Bits/Linkerd-securityreview.pdf",
    "project_info": {
        "url": "https://github.com/linkerd/linkerd2",
        "commit_hash": "68b63269d952b05cc721581dfa4672ad2e775964",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ]
            },
            "title": "Various unhandled errors",
            "description": "The `linkerd` codebase contains various methods with unhandled errors. In most cases, errors returned by functions are simply not checked; in other cases, functions that surround `_deferred_` error-returning functions do not capture the relevant errors.",
            "severity": "Undetermined",
            "contract": "N/A",
            "function": [
                "handleProfileDownload",
                "renderStatStats"
            ],
            "lineNumber": [
                "web/srv/handlers.go#L65-91",
                "viz/cmd/stat.go#L295-302"
            ]
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-400"
                ],
                "3": [
                    "CWE-770"
                ],
                "4": [
                    "CWE-789"
                ]
            },
            "title": "The use of time.After() in select statements can lead to memory leaks",
            "description": "Using time.After() function in for/select loops can cause memory leaks and crashes due to memory exhaustion.",
            "severity": "Undetermined",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "cli/cmd/metrics_diagnostics_util.go#L131-142"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-697"
                ],
                "2": [
                    "CWE-1025"
                ],
                "3": [
                    "CWE-595"
                ],
                "4": [
                    "CWE-597"
                ]
            },
            "title": "Use of string.Contains instead of string.HasPrefix to check for prefixes",
            "description": "Refactor prefix checks to use `string.HasPrefix` rather than `string.Contains` to ensure proper validation of prefixes within strings.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "multicluster/service-mirror/events_formatting.go#L23-27"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-400"
                ],
                "3": [
                    "CWE-770"
                ]
            },
            "title": "Risk of resource exhaustion due to the use of defer inside a loop",
            "description": "The `runCheck` function performs its core functions inside an infinite `for` loop and calls `defer cancel()` at the beginning of the loop, which could cause resource exhaustion conditions because the deferred function is called when the function exits, not at the end of each loop.",
            "severity": "Informational",
            "contract": "pkg/healthcheck/healthcheck.go",
            "function": "runCheck",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Lack of maximum request and response body constraint",
            "description": "The ioutil.ReadAll function reads from source until an error or an end-of-file (EOF) condition occurs, at which point it returns the data that it read. There is no limit on the maximum size of request and response bodies, so using ioutil.ReadAll to parse requests and responses could cause a denial of service (due to insufficient memory).",
            "severity": "Informational",
            "contract": "N/A",
            "function": [
                "heartbeat",
                "profile command",
                "obtaining Linkerd versions",
                "webhook and metrics servers",
                "metrics and TAP APIs"
            ],
            "lineNumber": [
                "239",
                "32",
                "83",
                "124",
                "48",
                "170"
            ]
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-391"
                ]
            },
            "title": "Potential goroutine leak in Kubernetes port-forwarding initialization logic",
            "description": "The `Init` function responsible for initializing port-forwarding connections for Kubernetes causes a goroutine leak when connections succeed due to an unbuffered channel blocking the execution of the anonymous goroutine.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "Init()",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-74"
                ]
            },
            "title": "Risk of log injection in TAP service API",
            "description": "Requests sent to the TAP service API endpoint, `/apis/tap`, via the POST method are handled by the `handleTap` method. This method parses a `namespace` and a `name` obtained from the URL of the request. Both the `namespace` and `name` variables are then used in a log statement for printing debugging messages to standard output. Because both fields are user controllable, an attacker could perform log injection attacks by calling such API endpoints with a `namespace` or `name` with newline indicators, such as `\\n`.",
            "severity": "Low",
            "contract": "N/A",
            "function": "handleTap",
            "lineNumber": "viz/tap/api/handlers.go#L106-125"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-757"
                ]
            },
            "title": "TLS configuration does not enforce minimum TLS version",
            "description": "Transport Layer Security (TLS) configurations do not have a minimum version requirement, allowing connections from TLS 1.0 and later, leaving the webhook and TAP API servers vulnerable to protocol downgrade and man-in-the-middle attacks.",
            "severity": "Low",
            "contract": "N/A",
            "function": "NewServer",
            "lineNumber": "viz/tap/api/sever.go"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Nil dereferences in the webhook server",
            "description": "The webhook server\u2019s `processReq` function does not properly validate request objects, resulting in `nil` dereferences and panics on the server.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "processReq",
            "lineNumber": "154, 162"
        }
    ]
}