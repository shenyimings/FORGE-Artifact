{
    "path": "./Audit_Reports_2024/Trail_of_Bits/2022-10-shimacapital-ondo-fixreview.pdf",
    "project_info": {
        "url": "https://github.com/ondoprotocol/monopoly/tree/814cfcfa04a7bfa4ae3fa395cafa329767dc67ec",
        "commit_hash": "814cfcfa04a7bfa4ae3fa395cafa329767dc67ec",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Risk of DoS attacks due to rate limits",
            "description": "Due to the rate limits imposed on MONO deposit and withdrawal operations, malicious users could launch denial-of-service (DoS) attacks.",
            "severity": "High",
            "contract": "PSM",
            "function": "_checkAndUpdateMintLimit",
            "lineNumber": "93-107"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Risk of accounting errors due to missing check in the invest function",
            "description": "The `invest` function accepts any token in the `collateral` array alongside the token amounts to be transferred, which can result in accounting errors within the protocol if multiple tokens with different decimals are used to invest in the same strategy.",
            "severity": "N/A",
            "contract": "Treasury",
            "function": "invest()",
            "lineNumber": "694-698"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "3. Missing functionality in the _rescueTokens function",
            "description": "The `RegistryClient` contract is a helper contract designed to aid in the protocol\u2019s role-based access control (RBAC) mechanism. It has various helper functions that serve as safety mechanisms to rescue funds trapped inside a contract. The inline documentation for the `_rescueTokens` function states that if the `_amounts` array contains a zero-value entry, then the entire token\u2019s balance should be transferred to the caller. However, this functionality is not present in the code; instead, the function sends zero tokens to the caller on a zero-value entry.",
            "severity": "Low",
            "contract": "RegistryClient",
            "function": "_rescueTokens",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Solidity compiler optimizations can be problematic",
            "description": "The Ondo protocol contracts have enabled optional compiler optimizations in Solidity which may lead to security implications due to optimization bugs.",
            "severity": "Informational",
            "contract": "Ondo Protocol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Lack of existence check on call",
            "description": "The multiexcall function in MonoFactory.sol does not perform an account existence check prior to calling, which may lead to unexpected behavior as per Solidity documentation.",
            "severity": "N/A",
            "contract": "MonoFactory",
            "function": "multiexcall",
            "lineNumber": "120-136"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Arbitrage opportunity in the PSM contract",
            "description": "Users could take advantage of the difference in price between two stablecoins to engage in arbitrage due to each PSM contract holding that 1 MONO is worth $1, regardless of the underlying stablecoin.",
            "severity": "Informational",
            "contract": "PSM.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-1173"
                ]
            },
            "title": "Problematic use of safeApprove",
            "description": "The `safeApprove` function is used incorrectly and is officially deprecated. It should only be called when setting an initial allowance or when resetting it to zero, otherwise subsequent redemption operations will revert.",
            "severity": "N/A",
            "contract": "BaseStablecoinStrategy",
            "function": "redeem",
            "lineNumber": "106-110"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Lack of upper bound for fees and system parameters",
            "description": "The `PSM` contract\u2019s `setMintFee` and `setRedeemFee` functions do not have an upper bound on the fee amount that can be set; therefore, a privileged actor could set minting and redeeming fees to any value.",
            "severity": "Informational",
            "contract": "PSM",
            "function": "setMintFee, setRedeemFee",
            "lineNumber": "289-306"
        }
    ]
}