{"path": "./Audit_Reports_2024/Trail_of_Bits/2023-02-succinct-securityreview.pdf", "project_info": {"url": "N/A", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1286"]}, "title": "Prover can lock user funds by including ill-formed BigInts in public key commitment", "description": "The `Rotate` circuit does not check for the validity of BigInts included in `pubkeysBigIntY`. A malicious prover can lock user funds by carefully selecting malformed public keys and using the `Rotate` function, which will prevent future provers from using the default witness generator to make new proofs.", "severity": "High", "contract": "circuits/rotate.circom", "function": "N/A", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Prover can lock user funds by supplying non-reduced Y values to G1BigIntToSignFlag", "description": "A malicious prover can lock user funds by carefully selecting malformed public keys and using the Rotate function, which will prevent future provers from using the default witness generator to make new proofs.", "severity": "High", "contract": "circuits/rotate.circom", "function": "Rotate", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "Incorrect handling of point doubling can allow signature forgery", "description": "The incorrect handling of elliptic curve point doublings allows a minority of carefully selected public keys to cause the aggregation to result in an arbitrary, maliciously chosen public key, allowing signature forgeries and thus malicious light client updates.", "severity": "Critical", "contract": "N/A", "function": "G1Add", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-682"]}, "title": "EllipticCurveAdd mishandles points at infinity", "description": "The EllipticCurveAdd function returns incorrect results when handling points at infinity, which can cause miscomputed aggregate public keys and stuck funds in the bridge.", "severity": "Informational", "contract": "N/A", "function": "EllipticCurveAdd", "lineNumber": "344-349"}, {"id": 4, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Circom circuits lack adequate testing framework", "description": "The Telepathy Circom circuits do not have functioning unit tests or a systematic testing framework.", "severity": "Informational", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-682"]}, "title": "Poseidon commitment uses a non-standard hash construction", "description": "Telepathy commits to the set of sync committee public keys with a Poseidon-based hash function. This hash function uses a construction with poor theoretical properties.", "severity": "Informational", "contract": "circuits/poseidon.circom", "function": "N/A", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "Merkle root reconstruction is vulnerable to forgery via proofs of incorrect length", "description": "The `TargetAMB` contract accepts and verifies Merkle proofs that a particular smart contract event was issued in a particular Ethereum 2.0 beacon block. Because the proof validation depends on the length of the proof rather than the index of the value to be proved, Merkle proofs with invalid lengths can be used to mislead the verifier and forge proofs for nonexistent transactions.", "severity": "High", "contract": "contracts/src/libraries/SimpleSerialize.sol", "function": "SSZ.restoreMerkleRoot", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-693"], "2": ["CWE-807"], "3": ["CWE-302"]}, "title": "LightClient forced finalization could allow bad updates in case of a DoS", "description": "Under periods of delayed finality, the `LightClient` may finalize block headers with few validators participating. If the Telepathy provers were targeted by a denial-of-Service (DoS) attack, this condition could be triggered and used by a malicious validator to take control of the `LightClient` and finalize malicious block headers.", "severity": "High", "contract": "contracts/src/lightclient/LightClient.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "G1AddMany does not check for the point at infinity", "description": "The G1AddMany template does not have an output signal to indicate whether the aggregated public key is the point at infinity.", "severity": "N/A", "contract": "telepathy/contracts/circuits/bls", "function": "G1AddMany", "lineNumber": "16-48"}, {"id": 9, "category": {"1": ["CWE-682"], "2": ["CWE-193"]}, "title": "TargetAMB receipt proof may behave unexpectedly on future transaction types", "description": "The TargetAMB uses an external RLPReader dependency to parse RLP-encoded nodes in the Ethereum state trie, including those provided by the user as part of a Merkle proof. The logic in StateProofHelper.sol#L44\u2013L82 checks if the transaction receipt is an RLP list; if it is not, the logic skips one byte of the receipt before continuing with parsing. This may lead to unexpected behavior on future transaction types.", "severity": "N/A", "contract": "StateProofHelper", "function": "N/A", "lineNumber": "44-82"}, {"id": 10, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1286"]}, "title": "RLPReader library does not validate proper RLP encoding", "description": "The RLPReader library does not properly validate RLP encoding, leading to potential out-of-bounds reads and incorrect parsing of RLP items.", "severity": "N/A", "contract": "RLPReader", "function": "toRLPItem/numItems()", "lineNumber": "256-269"}, {"id": 11, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "TargetAMB _executeMessage lacks contract existence checks", "description": "The function _executeMessage does not perform contract existence checks which can lead to incorrect return values and skipped safety checks.", "severity": "High", "contract": "TargetAMB", "function": "_executeMessage", "lineNumber": "N/A"}, {"id": 12, "category": {"1": ["CWE-693"], "2": ["CWE-345"], "3": ["CWE-347"]}, "title": "LightClient is unable to verify some block headers", "description": "The `LightClient` contract may finalize block headers with few validators participating due to delayed finality or a denial-of-service (DoS) attack, leading to malicious block headers being finalized.", "severity": "High", "contract": "contracts/src/lightclient/LightClient.sol", "function": "N/A", "lineNumber": "N/A"}, {"id": 13, "category": {"1": ["CWE-697"], "2": ["CWE-1025"], "3": ["CWE-595"], "4": ["CWE-597"]}, "title": "OptSimpleSWU2 Y-Coordinate Output Is Underconstrained", "description": "A malicious prover can generate a witness where the Y-coordinate is not in its canonical representation.", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 14, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1286"]}, "title": "Malicious Prover Supplying Ill-Formed BigInts", "description": "During the sync committee rotation process, a malicious prover can supply ill-formed BigInts, corrupting the resulting commitment and preventing the LightClient from validating new block headers.", "severity": "Critical", "contract": "LightClient", "function": "N/A", "lineNumber": "N/A"}, {"id": 15, "category": {"1": ["CWE-682"]}, "title": "Commitment Corruption During Sync Committee Rotation", "description": "A malicious prover can supply valid BigInts that are not reduced modulo the BLS12-381 field prime during the sync committee rotation process, corrupting the resulting commitment and preventing the LightClient from making further progress.", "severity": "Critical", "contract": "LightClient", "function": "N/A", "lineNumber": "N/A"}, {"id": 16, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-354"]}, "title": "Merkle Proof Length Verification", "description": "The TargetAMB does not verify that the provided Merkle proof is of the correct length when verifying transaction receipts in the executeMessageFromLog function, allowing malicious provers to convince the contract that a value appearing elsewhere in the block Merkle tree is the transaction receipt root.", "severity": "Critical", "contract": "TargetAMB", "function": "executeMessageFromLog()", "lineNumber": "N/A"}]}