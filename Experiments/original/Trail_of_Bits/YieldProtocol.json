{"path": "./Audit_Reports_2024/Trail_of_Bits/YieldProtocol.pdf", "project_info": {"url": "https://github.com/yieldprotocol/fyDai", "commit_hash": "4422fda75931f2bfea49f5041ec90dc026e5c03d", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Flash minting can be used to redeem fyDAI", "description": "The flash-minting feature from the fyDAI token can be used to redeem an arbitrary amount of funds from a mature token.", "severity": "Medium", "contract": "YDai.sol, Unwind.sol", "function": "flashMint()", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-284"], "2": ["CWE-269"], "3": ["CWE-266"]}, "title": "Permission-granting is too simplistic and not flexible enough", "description": "The Yield Protocol contracts implement an oversimplified permission system that can be abused by the administrator.", "severity": "Low", "contract": "Orchestrated.sol", "function": "orchestrate()", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "pot.chi() value is never updated", "description": "The Yield contracts interact with the Dai Savings Rate (DSR) contracts from MakerDAO to obtain the rate accumulator value without properly calling a function to update its value.", "severity": "Low", "contract": "YDai.sol", "function": "mature()", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-354"]}, "title": "Lack of validation when setting the maturity value", "description": "The contract constructor performs no validation on the maturity date timestamp to ensure it is within an acceptable range.", "severity": "Low", "contract": "YDai.sol", "function": "constructor()", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Delegates can be added or removed repeatedly to bloat logs", "description": "Several contracts in the Yield Protocol system inherit the Delegable contract, which allows users to delegate the ability to perform certain operations on their behalf to other addresses. However, there is no check to prevent a user from repeatedly adding or removing a delegation that is already enabled or revoked, which could allow redundant events to be emitted repeatedly.", "severity": "Informational", "contract": "helpers/Delegable.sol", "function": ["addDelegate(address delegate)", "revokeDelegate(address delegate)"], "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "Withdrawing from the controller allows accounts to contain dust", "description": "The `withdraw` operation can break the assumption that no account can contain dust for certain collaterals.", "severity": "Low", "contract": "Controller.sol", "function": "withdraw()", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Solidity compiler optimizations can be dangerous", "description": "Yield Protocol has enabled optional compiler optimizations in Solidity which have been related to several bugs with security implications and it is unclear how many contracts in the wild actually use them.", "severity": "Undetermined", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-693"], "2": ["CWE-807"], "3": ["CWE-302"]}, "title": "Lack of chainID validation allows signatures to be re-used across forks", "description": "The ERC20Permit contract does not account for chainsplits, allowing a third party to transmit a signature from a token holder that modifies the ERC20 allowance for a particular user. The signed message may be considered valid on both forks if the chain forks after deployment.", "severity": "High", "contract": "helpers/ERC20Permit.sol", "function": "permit()", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-435"]}, "title": "Permit opens the door for griefing contracts that interact with the Yield Protocol", "description": "The `permit` function can be front-run to break the workflow from third-party smart contracts.", "severity": "Informational", "contract": "ERC20Permit.sol", "function": "permit()", "lineNumber": "N/A"}, {"id": 9, "category": {"1": ["CWE-284"]}, "title": "Pool initialization is unprotected", "description": "The Yield Pool contract implements a simple initialization system that can be abused by any user.", "severity": "Low", "contract": "Pool.sol", "function": "init()", "lineNumber": "N/A"}, {"id": 10, "category": {"1": ["CWE-682"], "2": ["CWE-1339"]}, "title": "Computation of DAI/fyDAI to buy/sell is imprecise", "description": "The functions used to determine how many DAI or fyDAI a user must buy or sell (given the current total supply and reserves) may not work as expected due to potential precision loss.", "severity": "Undetermined", "contract": "YieldMath.sol", "function": "yDaiOutForDaiIn()", "lineNumber": "N/A"}]}