{"path": "./Audit_Reports_2024/Trail_of_Bits/Opyn.pdf", "project_info": {"url": "https://github.com/trailofbits/slither", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-703"], "2": ["CWE-755"], "3": ["CWE-390"]}, "title": "onERC721Received callback is never called when new tokens are minted or transferred", "description": "The ERC721 implementation used by the `Controller` contract does not properly call the corresponding callback when new tokens are minted or transferred.", "severity": "High", "contract": "Controller", "function": "mintNFT(address)", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Users can create vaults that cannot be liquidated", "description": "The `Controller` contract does not check that the UniswapV3 token positions deposited into the vaults hold liquidity, allowing users to create non-liquidable vaults.", "severity": "High", "contract": "Controller.sol", "function": "depositUniPositionToken()", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-707"], "2": ["CWE-20"]}, "title": "Solidity compiler optimizations can be problematic", "description": "Opyn has enabled optional compiler optimizations in Solidity which can lead to security implications due to latent bugs and future optimizations.", "severity": "Undetermined", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Initialization function can be front-run", "description": "The `ShortPowerPerp` and `WPowerPerp` contracts have initialization functions that can be front-rundered, allowing an attacker to incorrectly initialize the contract.", "severity": "Low", "contract": "ShortPowerPerp, WPowerPerp", "function": "init()", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-682"]}, "title": "The computation of the normalization factor can fail", "description": "When computing the normalization factor, the system does not properly check for a corner case that could make the transaction revert, blocking interactions with the `Controller` contract.", "severity": "High", "contract": "Controller.sol", "function": "_checkVault", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Users can disrupt the bookkeeping of the strategy when it is deployed", "description": "The strategy contains code that initializes bookkeeping operations on the first deposit, but any user can make a collateral deposit to disrupt these operations.", "severity": "High", "contract": "CrabStrategy.sol, Controller.sol", "function": "_deposit()", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-284"]}, "title": "Lack of access controls allows anyone to deposit Uniswap tokens", "description": "The `Controller` contract allows anyone to add a UniswapV3 token position as collateral to any vault.", "severity": "Low", "contract": "Controller.sol", "function": "depositUniPositionToken(uint256 _vaultId, uint256 _uniTokenId)", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-691"], "2": ["CWE-362"]}, "title": "Front-running a withdrawal operation can cause it to revert", "description": "An attacker can front-run the `withdraw` function in the `CrabStrategy` contract to force the transaction to fail.", "severity": "Low", "contract": "CrabStrategy.sol", "function": "withdraw(uint256 _crabAmount, uint256 _wSqueethAmount)", "lineNumber": "N/A"}]}