{
    "path": "./Audit_Reports_2024/BlockSec/BlockSec-blocksec_noah_v1.0-signed.pdf",
    "project_info": {
        "url": "N/A",
        "commit_hash": "N/A",
        "address": "N/A"
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Miscalculated poolWeight with Duplicated Pool Voting",
            "description": "A malicious user can craft a `_poolWeight` that decreases to zero during the voting process, thereby ensuring that `poke()` (which invokes `_vote()` ) calls cannot be made to his/her account until the voting power decreases to zero. As a result, the user\u2019s voting record within the contract `Bribe` will remain static across multiple epochs, which allows him/her to gain more rewards than anticipated.",
            "severity": "High",
            "contract": "Bribe",
            "function": "_vote()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Incorrect Reward Calculations from Inappropriate Check",
            "description": "N/A",
            "severity": "High",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "36"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Lack of Zero Address Check",
            "description": "Lack of zero address check before updating address variables in multiple places.",
            "severity": "Confirmed",
            "contract": "Voter",
            "function": [
                "setEmergencyCouncil()",
                "constructor()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Redundant Functions",
            "description": "In the contract Voter, there are two identical functions with different names, one named distro() while the other named distribute().",
            "severity": "N/A",
            "contract": "Voter",
            "function": "distro() and distribute()",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Redundant Invocation of Function _updateFor",
            "description": "The function setVotableGauge() allows the privileged gov to enable a Gauge that can not be voted for, or disable a votable Gauge. When the gov tries to disable a votable Gauge, the function will first distribute unreleased rewards by invoking the function distribute(), and invoke the function _updateFor() after that to update the reward of the Gauge. However, the function distribute() itself has already invoked the function _updateFor(), thus the function _updateFor() in line 126 is redundant.",
            "severity": "N/A",
            "contract": "Voter",
            "function": "setVotableGauge()",
            "lineNumber": "126"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Meaningless Usage of max",
            "description": "There are several meaningless usages of function `Max()` in the contract `RewardDistributor`. The return value of `Max(uint(X), 0)` will always be `X` itself.",
            "severity": "N/A",
            "contract": "RewardDistributor",
            "function": "N/A",
            "lineNumber": "134, 153, 203, 260"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1061"
                ]
            },
            "title": "Inappropriate Variable Naming",
            "description": "The name of variable 'bribeForGauge' in the contract 'Voter' is confusing because it uses the key of 'bribe' to index the 'gauge' in the function 'registerGauge'. This is semantically inconsistent with the variable 'poolForGauge', which uses 'gauge' as the key to index the 'pool'.",
            "severity": "N/A",
            "contract": "Voter",
            "function": "registerGauge()",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Lack of Check for releaseFactor and pledgeFactor",
            "description": "In the contract Minter, the increase of releaseFactor and pledgeFactor will increase the number of tokens minted in each epoch. They can be updated via the function setReleaseFactor() and setPledgeFactor() respectively by the privileged role Owner. However, there is no check to limit the maximum value of them.",
            "severity": "Medium",
            "contract": "Minter",
            "function": "setReleaseFactor(), setPledgeFactor()",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Redundant Check in Function mint_marketing",
            "description": "In the function mint_marketing() of the contract Minter, there are two identical checks (i.e., require(amount > 0); and require(amount > 0, \"fully minted\");) , which are redundant.",
            "severity": "N/A",
            "contract": "Minter",
            "function": "mint_marketing()",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Potential Centralization Problem",
            "description": "The project has potential centralization problems due to privileged roles `team` and `gov` having control over certain variables affecting token minting and transaction fee rewards.",
            "severity": "Confirmed",
            "contract": "Bribe, Multiple Contracts (not specified)",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Timely deployment contracts",
            "description": "The contracts VotingEscrow, FeeVault, Minter, and RewardDistributor initialize variables using block.timestamp at deployment time, which may cause users to receive incorrect rewards if not synchronized within the same week.",
            "severity": "Confirmed",
            "contract": "VotingEscrow, FeeVault, Minter, RewardDistributor",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-841"
                ]
            },
            "title": "Non-Linear Unlocking in Multiple Claims",
            "description": "The contract operates in a linear fashion for a single claim cycle but does not maintain linearity when the user makes multiple claims.",
            "severity": "Note",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Token Release for Team and VC without Time Restrictions",
            "description": "In the contract Minter, the functions mint_team() and mint_vc() lack time-staggered batches unlocking checks, allowing the team to mint NOAH and esNOAH tokens to anyone at any time.",
            "severity": "Confirmed",
            "contract": "Minter",
            "function": "mint_team(), mint_vc()",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Index out of Bounds for the Empty Array",
            "description": "In the contract Gauge, the array fees are initialized to an empty array in the constructor. The function _claimFees() caches the global fees into the empty array fees[0] and loads the last value from it directly, which results in a revert due to an index-out-of-bounds error.",
            "severity": "High",
            "contract": "Gauge",
            "function": "_claimFees()",
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-665"
                ],
                "3": [
                    "CWE-908"
                ],
                "4": [
                    "CWE-457"
                ]
            },
            "title": "Improper Use of the Keyword Memory",
            "description": "In Solidity, assignments made from memory to memory only create references. This means that changing the value of one memory pointer will also update any other references to that same memory location.",
            "severity": "Medium",
            "contract": "VotingEscrow",
            "function": "_checkpoint",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-193"
                ]
            },
            "title": "Incorrect Index in getPriorSupplyIndex",
            "description": "In the function `getPriorSupplyIndex()` of the contract Bribe, the check statement `if (supplyCheckpoint > timestamp)` is incorrect. In the current implementation, the start index for the array `supplyCheckpoints[]` begins from 1, so the check for the point at the index 0 is meaningless.",
            "severity": "Low",
            "contract": "Bribe",
            "function": "getPriorSupplyIndex()",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-834"
                ],
                "3": [
                    "CWE-674"
                ]
            },
            "title": "Potential Loop from Self-Calling",
            "description": "N/A",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-697"
                ]
            },
            "title": "Incorrect Validation of Withdrawal Rate",
            "description": "In the function `withdraw()` of the contract `Vester`, the validation of `require(rate > 0 || rate <= PRECISION, \"Vester: `rate invalid\")` is incorrect, it should ensure both conditions are satisfied, or the check will be meaningless.",
            "severity": "Low",
            "contract": "Vester",
            "function": "withdraw()",
            "lineNumber": "N/A"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Miscalculated Bribe Rewards (I)",
            "description": "The function earned() in the contract Bribe miscalculates user rewards in the current epoch by missing the accumulation of rewards for the second-to-last checkpoint.",
            "severity": "High",
            "contract": "Bribe",
            "function": "earned()",
            "lineNumber": "N/A"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Miscalculated Bribe Rewards (II)",
            "description": "N/A",
            "severity": "High",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 20,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Timely invocation of update_period() before setReleaseFactor() and setPledgeFactor()",
            "description": "Before modifying releaseFactor and pledgeFactor, the contract will not invoke update_period() to update and distribute rewards of the last epoch, which could result in the previous epoch\u2019s rewards being directly changed.",
            "severity": "N/A",
            "contract": "Minter.sol",
            "function": "update_period(), setReleaseFactor(), setPledgeFactor()",
            "lineNumber": "N/A"
        },
        {
            "id": 21,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Timely invocation of distribute() in notifyRewardAmount()",
            "description": "The distribution of esNOAHs among various Gauges is determined by the voting results of users holding veNOAH in the contract Voter. However, based on the current implementation, these rewards are not directly settled and distributed to each Gauge based on the current votes after being transferred to the contract Voter.",
            "severity": "Medium",
            "contract": "Voter",
            "function": "notifyRewardAmount()",
            "lineNumber": "N/A"
        },
        {
            "id": 22,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Reward for Killed Gauge Being Locked",
            "description": "In contract `Voter`, users can vote for each `Gauge`. The reward of each epoch will be allocated to the corresponding gauge according to the proportion of votes in each pool. However, a disabled `Gauge` is still votable and included in the calculation of the reward distribution but not claimable.",
            "severity": "Medium",
            "contract": "Voter",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 23,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-394"
                ]
            },
            "title": "Lack of Checks for Gauges that Do Not Support Voting",
            "description": "In the contract Voter, the user is allowed to vote for various Gauges via the function vote(). If a Gauge does not support voting, the function will skip it, resulting in the votes of this portion of veNOAH not being utilized.",
            "severity": "Medium",
            "contract": "Voter",
            "function": "vote()",
            "lineNumber": "N/A"
        },
        {
            "id": 24,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Reward Token can be Managed by Users with Different Privileges",
            "description": "The privileged role `gov` can change the whitelist token, which changes the reward token users receive in the contract `Bribe`.",
            "severity": "Confirmed",
            "contract": "Bribe",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 25,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Timely invocation of claimfees() in Gauge",
            "description": "Rewards for voters are delayed, and what\u2019s worse, voters may lose the rewards.",
            "severity": "High",
            "contract": "Gauge",
            "function": "claimFees()",
            "lineNumber": "N/A"
        },
        {
            "id": 26,
            "category": {
                "1": [
                    "CWE-693"
                ]
            },
            "title": "Failed to Notify Rewards due to the Reentrancy Lock",
            "description": "The function notifyRewardAmount() in the contract Gauge contains a reentrancy guard and claims swap fees from the contract FeeVault via the call stack, but the function claimFees() in the contract FeeVault reenters the original function notifyRewardAmount() in the caller Gauge when sufficient swap fees accumulated, resulting in the revert of transaction as the original function notifyRewardAmount() is in a lock state.",
            "severity": "High",
            "contract": "Gauge",
            "function": "notifyRewardAmount()",
            "lineNumber": "N/A"
        },
        {
            "id": 27,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Swap Fee Rewards cannot Distribution Mechanism does not Work",
            "description": "The contract Gauge claims fees from the contract FeeVault via the external call _feeVault.claimFees(sta in the function _claimFees(). The contract FeeVault will then invoke the function notifyRewardAmount() to send the reward. However, in the function notifyRewardAmount() of contract Gauge , there is a requirement token != stake that will lead to revert of the transaction.",
            "severity": "High",
            "contract": "Gauge",
            "function": "_claimFees() and notifyRewardAmount()",
            "lineNumber": "N/A"
        }
    ]
}