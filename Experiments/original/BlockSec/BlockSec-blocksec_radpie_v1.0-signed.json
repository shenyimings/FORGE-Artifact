{
    "path": "./Audit_Reports_2024/BlockSec/BlockSec-blocksec_radpie_v1.0-signed.pdf",
    "project_info": {
        "url": "https://github.com/MagpieXYZ/radiant",
        "commit_hash": "d603286c5ee0115914dea2f7fb8fa4381534f8ee",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Avoid incorrect assignment",
            "description": "In the updateEmissionRate function, oldEmissionRate is supposed to record the previous value of radpiePerSec before updating it.",
            "severity": "N/A",
            "contract": "RadpiePoolHelper.sol and MasterRadpie.sol",
            "function": "updateEmissionRate()",
            "lineNumber": "759"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "The protocol will not support deflation/inflation tokens",
            "description": "The MasterRadpie contract mints or burns receipt tokens at a 1:1 ratio based on the specified deposited or withdrawn amounts. However, if _stakingToken is a deflationary or inflationary token, the actual transferred amount in the deposit function will diverge from the specified amount.",
            "severity": "Note",
            "contract": "MasterRadpie",
            "function": "deposit()",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ]
            },
            "title": "Potential centralization risk",
            "description": "No description provided",
            "severity": "Note",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-862"
                ]
            },
            "title": "Periodic invocation of batchHarvestDlpRewards",
            "description": "The batchHarvestDlpRewards function in the RadiantStaking contract can be invoked by anyone to collect rewards from Radiant and queue them to rewarders, leading to a potential flashloan attack where an attacker can temporarily inflate shares to manipulate rewards.",
            "severity": "High",
            "contract": "RadiantStaking",
            "function": "batchHarvestDlpRewards",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Periodic invocation of batchHarvestEntitledRDNT",
            "description": "An attacker can temporarily inflate shares and manipulate entitled RDNT rewards by minting substantial receipt tokens, invoking batchHarvestEntitledRDNT to update entitledPerTokenStored, and then updating entitled RDNT and starting vesting.",
            "severity": "High",
            "contract": "RadiantStaking",
            "function": "batchHarvestEntitledRDNT()",
            "lineNumber": "N/A"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Ensure initial TVL in RadiantStaking pools",
            "description": "The protocol promises to ensure a certain amount of initial total value locked (TVL) before any deposits can occur to prevent inflation attacks.",
            "severity": "Note",
            "contract": "RadiantStaking",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-665"
                ],
                "3": [
                    "CWE-909"
                ],
                "4": [
                    "CWE-456"
                ]
            },
            "title": "The initialization of vdToken balance",
            "description": "Without an initial vdToken balance, the depositAssetFor function cannot properly leverage borrow for each deposit.",
            "severity": "Note",
            "contract": "N/A",
            "function": "depositAssetFor",
            "lineNumber": "N/A"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-400"
                ],
                "3": [
                    "CWE-770"
                ]
            },
            "title": "Periodic invocation of accrueStreamingFee",
            "description": "N/A",
            "severity": "Note",
            "contract": "N/A",
            "function": "accrueStreamingFee()",
            "lineNumber": "N/A"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-404"
                ],
                "3": [
                    "CWE-772"
                ],
                "4": [
                    "CWE-775"
                ]
            },
            "title": "Potential overwriting on existing poolInfo",
            "description": "The current poolInfo for the corresponding asset may be inadvertently overwritten.",
            "severity": "N/A",
            "contract": "RadpiePoolHelper.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Double-counting rewards",
            "description": "In Radpie, updating rewards for both sender and receiver during receipt token transfer results in double-counting issue when _from and _to addresses are identical.",
            "severity": "High",
            "contract": "MasterRadpie",
            "function": "_harvestRewards",
            "lineNumber": "N/A"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "Incorrect _onlyWhiteListed modifier",
            "description": "N/A",
            "severity": "N/A",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "10"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ],
                "3": [
                    "CWE-1288"
                ]
            },
            "title": "Lack of duplicate checks for function arguments",
            "description": "The addRegisteredReceipt function in the RDNTRewardManager contract allows the RewardQueueuer role to add _receiptToken addresses to the registeredReceipts list without checking if _receiptToken already exists, which could lead to duplicates. Similarly, the poolTokenList in the RadiantStaking contract is append-only and may cause duplicates if a pool becomes inactive and the registerPool function is called again.",
            "severity": "Medium",
            "contract": "RDNTRewardManager, RadiantStaking",
            "function": "addRegisteredReceipt, registerPool",
            "lineNumber": "N/A"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Incorrect fee removal logic",
            "description": "Removes the fee from radiantFeeInfos regardless of _isRDNTFee, leaving elements in rTokenFeeInfos unremovable and failing to deduct the removed fee value from totalRTokenFee or totalRDNTFee.",
            "severity": "Medium",
            "contract": "RadiantStaking",
            "function": "removeFee",
            "lineNumber": "N/A"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-682"
                ],
                "2": [
                    "CWE-190"
                ]
            },
            "title": "Lack of sanity check on total fee",
            "description": "In the addFee function of the RadiantStaking contract, a sanity check exists to ensure that the value of the added fee must not exceed DENOMINATOR. However, it should also validate that the total fee, represented by totalRDNTFee or totalRTokenFee, does not surpass DENOMINATOR either.",
            "severity": "Medium",
            "contract": "RadiantStaking",
            "function": [
                "addFee",
                "setFee"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-666"
                ],
                "3": [
                    "CWE-672"
                ]
            },
            "title": "Unclaimable rewards due to rewarder modification",
            "description": "The set function in the MasterRadpie contract provides the functionality to modify the rewarder for a pool. However, users cannot retrieve unclaimed rewards from the previous rewarder after a modification.",
            "severity": "Medium",
            "contract": "MasterRadpie",
            "function": "set()",
            "lineNumber": "N/A"
        },
        {
            "id": 15,
            "category": {
                "1": [
                    "CWE-703"
                ]
            },
            "title": "Lack of health check",
            "description": "No description provided",
            "severity": "Medium",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 16,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Remove unused variable",
            "description": "Since rewardToken is already used as the key for the rewards mapping, The rewardToken within the Reward structure is redundant and can be removed.",
            "severity": "N/A",
            "contract": "BaseRewardPoolV2.sol",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 17,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Remove redundant check in the _sendRewards function",
            "description": "Both _rewardToken and _amount have been validated in the _harvestDlpRewards function, thus eliminating the need for redundant checks in the _sendRewards function.",
            "severity": "N/A",
            "contract": "RadiantStaking.sol",
            "function": "_sendRewards",
            "lineNumber": "N/A"
        },
        {
            "id": 18,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ]
            },
            "title": "Prevent multiple native tokens",
            "description": "It is recommended to include a check in the setPoolInfo function to prevent multiple native tokens from being added to the poolInfo mapping.",
            "severity": "N/A",
            "contract": "RadpiePoolHelper.sol",
            "function": "setPoolInfo",
            "lineNumber": "N/A"
        },
        {
            "id": 19,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-732"
                ]
            },
            "title": "Prevent accidental native token transfers",
            "description": "In the depositAsset function, it is recommended to include an additional check in the else branch (line 101) to prevent accidental transfers of native tokens from depositors.",
            "severity": "N/A",
            "contract": "N/A",
            "function": "depositAsset()",
            "lineNumber": "101"
        },
        {
            "id": 20,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Avoid incorrect assignment",
            "description": "In the updateEmissionRate function, oldEmissionRate is supposed to record the previous value of radpiePerSec before updating it.",
            "severity": "N/A",
            "contract": "RadpiePoolHelper.sol and MasterRadpie.sol",
            "function": "updateEmissionRate()",
            "lineNumber": "759"
        }
    ]
}