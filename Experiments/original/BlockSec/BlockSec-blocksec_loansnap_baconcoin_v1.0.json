{"path": "./Audit_Reports_2024/BlockSec/BlockSec-blocksec_loansnap_baconcoin_v1.0.pdf", "project_info": {"url": "https://github.com/loansnap/HomeDAO", "commit_hash": "1a3f2091642bdf5ea4a7ffab7d386f1efef22128", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-693"]}, "title": "Reentrancy in PoolStaking.unstake function", "description": "The unstake function is subject to reentrancy attacks, where the call to distribute can re-enter the unstake function because the BaconCoin is an ERC-777 token.", "severity": "High", "contract": "PoolStaking", "function": "unstake()", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-284"]}, "title": "Lack of access control in airdrop contract", "description": "The BaconCoinAirdrop contract is used to distribute airdrops of BaconCoin. It is controlled by a lock indicating whether the airdrop is allowed. However, the function for locking the airdrop is public with NO access control, which means that anyone is allowed to lock the airdrop.", "severity": "Medium", "contract": "BaconCoinAirdrop", "function": "N/A", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1287"]}, "title": "Potential loss in sending ERC-777 tokens", "description": "The PoolStaking.withdraw function will send the withdrawn LP tokens to the caller, while the LP tokens are designed to be the ERC-777 tokens. However, there is a pitfall in the OpenZeppelin\u2019s ERC-777 implementation.", "severity": "Medium", "contract": "PoolStaking", "function": "withdraw", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-394"]}, "title": "Potential DoS caused by insufficient gas", "description": "Insufficient gas can lead to a Denial of Service (DoS) problem, causing users' funds to be locked in the PoolStaking contract.", "severity": "High", "contract": "PoolStaking.sol", "function": "distribute", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-682"]}, "title": "Inconsistent decimal usage in PoolStaking.distribute", "description": "The PoolStaking.distribute function has inconsistent decimal usage, specifically with the tempAccruedBacon variable having a decimal of 18 at Line 240 and 12 at Line 255 due to an incorrect implementation of the calcBaconBetweenEvents function.", "severity": "Medium", "contract": "PoolStaking", "function": "distribute()", "lineNumber": "240, 255"}, {"id": 5, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-862"], "4": ["CWE-638"], "5": ["CWE-424"], "6": ["CWE-425"]}, "title": "No delegate function implemented in BaconCoin contract", "description": "The BaconCoin contract does not implement the delegate function, which is suggested to allow direct delegation.", "severity": "N/A", "contract": "BaconCoin", "function": "delegate", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-710"], "2": ["CWE-1164"]}, "title": "Unnecessary usage of ERC-777 standard", "description": "The BaconCoin and LP token uses the ERC-777 standard but does not utilize its specific features, which may introduce potential security problems and make integration with other projects difficult.", "severity": "Low", "contract": "BaconCoin", "function": "N/A", "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-693"]}, "title": "Risk-free interest rate reduction by reentrancy", "description": "A malicious borrower can lower the borrow interest rate in a risk-free manner by exploiting reentrancy through the PoolCore.lend and redeem functions.", "severity": "Low", "contract": "PoolCore", "function": "lend() and redeem()", "lineNumber": "220"}, {"id": 8, "category": {"1": ["CWE-682"]}, "title": "Incorrect interest rate divisor in PoolCore.getLoanAccruedInterest", "description": "The PoolCore.getLoanAccruedInterest function is used to calculate the accumulated interest of a specific loan. In this function, the interestPerSecond variable is calculated by using the divisor 31622400 (seconds), which is 366 days and does not follow the common financial convention to calculate the interests (i.e., 1 year is standardized as 360 days).", "severity": "Low", "contract": "PoolCore.sol", "function": "getLoanAccruedInterest()", "lineNumber": "N/A"}, {"id": 9, "category": {"1": ["CWE-664"], "2": ["CWE-665"], "3": ["CWE-909"], "4": ["CWE-456"]}, "title": "No liquidation logic provided", "description": "Off-chain liquidation states are unable to be reflected on-chain due to lack of liquidation logic.", "severity": "Medium", "contract": "N/A", "function": "repay()", "lineNumber": "N/A"}, {"id": 10, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Potential centrality problem", "description": "When a user registers their houses off-chain, an on-chain NFT will be minted by calling the PropTokens.mintPropToken function with access control mechanism. If the private key of this servicer address is leaked, a malicious attacker might mint arbitrary NFTs and drain all the pools.", "severity": "Medium", "contract": "PropTokens", "function": "mintPropToken", "lineNumber": "N/A"}, {"id": 11, "category": {"1": ["CWE-682"]}, "title": "Potential logic problem in PoolStaking.withdraw", "description": "Ambiguous logic in withdraw function of PoolStaking contract might cause issues in the future and should be refactored into a single address to eliminate ambiguity.", "severity": "N/A", "contract": "PoolStaking", "function": "withdraw()", "lineNumber": "N/A"}, {"id": 12, "category": {"1": ["CWE-682"], "2": ["CWE-190"]}, "title": "Potential incorrect logic in PoolStaking.distribute", "description": "In the PoolStaking.distribute function, for some special addresses (i.e., the daoAddress and guardianAddress), the initial userLastDistribution would be zero, resulting in an extremely large blockDifference calculation.", "severity": "Low", "contract": "PoolStaking.sol", "function": "distribute()", "lineNumber": "212, 218, 222"}]}