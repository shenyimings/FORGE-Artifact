{
    "path": "./Audit_Reports_2024/BlockSec/BlockSec-blocksec_whale_loan_v1.4.pdf",
    "project_info": {
        "url": "https://github.com/Whale-loans/contracts",
        "commit_hash": "e3ca48812f586d351d18116ef127982d3f21e493",
        "address": "N/A",
        "is_exists": false
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-1265"
                ]
            },
            "title": "Reentrancy Vulnerability in FlashERC20",
            "description": "A potential reentrancy vulnerability exists in FlashERC20 with deposit() and claimFees(). An attacker could launch a reentrancy attack by manipulating totalFees to increase userClaimableFees, allowing them to constantly and infinitely get the system's reward with no risk and almost no cost.",
            "severity": "Critical",
            "contract": "FlashERC20",
            "function": "deposit() and claimFees()",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-285"
                ],
                "3": [
                    "CWE-863"
                ]
            },
            "title": "stakedAmount Manipulation in YieldDistribution",
            "description": "An attacker can maliciously manipulate stakedAmount in YieldDistribution through flashloan attacks or 'double spending' attacks, allowing them to constantly and infinitely get the system's reward with no risk and almost no cost.",
            "severity": "Critical",
            "contract": "YieldDistribution",
            "function": "computeDeposit()",
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Improper Implementation of Reward Mechanism in recomputeFees()",
            "description": "The FlashERC20.recomputeFees() function calls YieldDistribution.recomputeFees() followed by computeDeposit() (when _updateReward is not zero), but the recomputeFees() function only updates the growth of stakeholders in one batch, and the computeDeposit() function requires that the yield generator is fully updated.",
            "severity": "Critical",
            "contract": "FlashERC20",
            "function": "recomputeFees()",
            "lineNumber": "180"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Unclaimed Fees (stakedAmount) Overriding",
            "description": "The YieldDistribution.computeWithdraw() function does not consider accumulated and unclaimed fees of stakeholders.",
            "severity": "High",
            "contract": "YieldDistribution",
            "function": "computeWithdraw()",
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Removing Redundant require() Statement",
            "description": "The require() statements in line 349 and line 353-357 in YieldDistribution.claimFees() have the same effect.",
            "severity": "Low",
            "contract": "YieldDistribution",
            "function": "claimFees()",
            "lineNumber": "349, 353-357"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-693"
                ],
                "2": [
                    "CWE-807"
                ]
            },
            "title": "Do Not Use Elastic Supply Tokens",
            "description": "Elastic supply tokens could dynamically adjust their price, supply, user's balance, etc., making a DeFi system over complex and vulnerable. It is highly recommended to avoid using elastic supply tokens.",
            "severity": "Unknown",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}