{"path": "./Audit_Reports_2024/Verichains_Lab/Verichains Public Audit Report - Camly Smartcontracts - v1.0.pdf", "project_info": {"url": "https://github.com/CamlyEcosytem/CamlySmartContract", "commit_hash": "637a532c805e9b7e0164ef4765924867be60dde3", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-284"], "2": ["CWE-282"], "3": ["CWE-283"]}, "title": "Check token ownership of the caller before burning", "description": "The function does not check the token ownership of the caller before burning.", "severity": "Critical", "contract": "CamlyMarket", "function": "N/A", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Missing checks for buyer and seller in the ExcuteOrder function", "description": "The `ExcuteOrder` function calls the `transferAsset` function to transfer NFT to the buyer and payment tokens to the seller, but it doesn't check the buyer and seller correctly. This can be exploited in two cases: 1) In case of BUYORDER, the value of `orderdetails.buyer` can be manipulated so that the attacker can force anyone to buy his NFTs; 2) In case of SELLORDER, the value of `orderdetails.seller` can be manipulated so that the attacker can buy NFTs of any seller without the seller's permission.", "severity": "CRITICAL", "contract": "CamlyMarket", "function": "ExcuteOrder()", "lineNumber": "N/A"}]}