{"path": "./Audit_Reports_2024/Verichains_Lab/Verichains Public Audit Report - DPeg Protocol Smartcontracts - v1.1.pdf", "project_info": {"url": "N/A", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-682"]}, "title": "User can redeem tokens less than exchangeRate without balance subtraction", "description": "The redeem function allows users to withdraw tokens by passing redeemAmount which is less than the exchangeRate value, resulting in the user balance not decreasing but the contract still sending the user redeemAmount tokens.", "severity": "CRITICAL", "contract": "DepErc20/DepToken", "function": "redeem/redeemInternal", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-284"], "2": ["CWE-269"], "3": ["CWE-266"]}, "title": "LevErc20 - Anyone can call initialize to steal owner role", "description": "The `initialize` function is intended to be used only when creating contract data for the first time. However, it is not currently disabled after its initial use, which means that anyone can call it again and potentially gain the owner role and reset the initial data of the contract.", "severity": "CRITICAL", "contract": "LevErc20", "function": "initialize()", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-682"]}, "title": "DepToken - User loses tokens in redeeming process when the balance in the contract is not enough", "description": "The `redeem` function allows users to redeem their `USDT` from `DepToken` contract, but if the `cashAvailToWithdraw` state is less than the `redeemAmount` specified by the user, the contract will only `transferOut` the `cashAvailToWithdraw` value while the `user`s balance is subtracted by `redeemAmount`.", "severity": "HIGH", "contract": "DepToken", "function": "redeemInternal()", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-682"]}, "title": "User Loses USDC Token in Minting Process", "description": "When balanceUSDCExReserves is less than mul_(borrowBalanceUSDT, fx_USDTUSDC), users may lose their USDC tokens during the minting process due to unrecorded or unreimbursed token swaps.", "severity": "High", "contract": "LevToken", "function": "mintInternal()", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-682"]}, "title": "Formula mismatch between contract and document", "description": "The formula in V1InterestRateModel contract does not match with the document.", "severity": "N/A", "contract": "V1InterestRateModel.sol", "function": "getBorrowRate()", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-732"]}, "title": "LevToken - New holders don't have transfer ability", "description": "New holders of leverage tokens created through minting process do not have transfer ability because they are not approved by TensorPrice contract.", "severity": "MEDIUM", "contract": "TensorPrice", "function": "mintAllowed()", "lineNumber": "N/A"}, {"id": 6, "category": {"1": ["CWE-284"], "2": ["CWE-269"]}, "title": "Upgradeable contract", "description": "The audit scope includes contracts with the `upgradeable` feature, which allows the deployer to alter the logic. If the `deployer` account is compromised, the hacker may exploit this feature to their advantage.", "severity": "MEDIUM", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}]}