{"path": "./Audit_Reports_2024/Techrate/Predator Token Full Smart Contract Security Audit.pdf", "project_info": {"url": "N/A", "commit_hash": "N/A", "address": "0xe59046e1a4a83c11ccc578e26da4eeec8484ed8d"}, "findings": [{"id": 0, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-732"], "4": ["CWE-766"]}, "title": "Wrong distributeDividends", "description": "The function distributeDividends(uint256 amount) has public access modifier, allowing anyone to call this function with any amount and put at risk part of the contract logic. Additionally, the function increases magnifiedDividendPerShare not in dividendToken proportion when dividentToken is not equal to BNB.", "severity": "Low", "contract": "N/A", "function": "distributeDividends(uint256 amount)", "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-284"]}, "title": "Redundant access", "description": "setDividendTokenAddress() function has public access modifier. So that, anybody can call this function and change token address.", "severity": "Low", "contract": "N/A", "function": "setDividendTokenAddress()", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-682"], "2": ["CWE-1339"]}, "title": "Rounding error", "description": "At each calculation with division, it goes first. In Solidity we don\u2019t have floating points, but instead we get rounding errors.", "severity": "Low", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 3, "category": {"1": ["CWE-703"]}, "title": "Out of gas", "description": "The function excludeMultipleAccountsFromFees() uses a loop to exclude multiple accounts from fees and may cause an OUT_OF_GAS exception if there is a long addresses list.", "severity": "High", "contract": "N/A", "function": "excludeMultipleAccountsFromFees()", "lineNumber": "N/A"}]}