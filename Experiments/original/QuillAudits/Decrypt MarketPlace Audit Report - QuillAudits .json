{"path": "./Audit_Reports_2024/QuillAudits/Decrypt MarketPlace Audit Report - QuillAudits .pdf", "project_info": {"url": "N/A", "commit_hash": "N/A", "address": "N/A"}, "findings": [{"id": 0, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-391"]}, "title": "Missing events emission for significant actions", "description": "Whenever certain significant privileged actions are performed within the contract, it is creators of a token when deployed, reservation of tokens for an address, setting admin and super admin of the marketplace, adding addresses to whitelist are important hence must be notified or noted.", "severity": "Low", "contract": ["DecryptMarketplace.sol", "PreSale721.sol", "SimpleERC721Deployer.sol", "ExtendedERC721Deployer.sol", "RoyaltyDistribution.sol", "PreSale1155.sol", "SimpleERC1155Deployer", "ExtendedERC1155Deployer.sol"], "function": ["addToWhitelist", "setSpecialPriceForToken", "setPreSalePaymentToken", "setCreator", "setGlobalRoyalty", "setRoyaltyReceiver", "setTokenRoyalty"], "lineNumber": "N/A"}, {"id": 1, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Possible frontrunning 2", "description": "cancelOrder() takes two parameters user order and user signature, allowing someone to cancel the order created by them by passing the created order and signature, which can lead to frontrunning.", "severity": "Medium", "contract": "DecryptMarketplace.sol", "function": "cancelOrder()", "lineNumber": "N/A"}, {"id": 2, "category": {"1": ["CWE-284"], "2": ["CWE-285"], "3": ["CWE-863"]}, "title": "Cancel the used order/signature", "description": "In some cases, orderIsCancelledOrCompleted is not getting set to true for both buyer and seller, allowing malicious users to frontrun transactions and use signatures to buy tokens.", "severity": "High", "contract": "N/A", "function": "cancelOrder()", "lineNumber": "L346,L352"}, {"id": 3, "category": {"1": ["CWE-682"]}, "title": "Condition is prone to unexpected results:", "description": "No description provided", "severity": "Medium Severity Issues", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 4, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-394"]}, "title": "Use modifier like nonReentrant", "description": "The function does not use a reentrancy modifier, which can lead to potential reentrancy attacks.", "severity": "Medium", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 5, "category": {"1": ["CWE-703"], "2": ["CWE-754"], "3": ["CWE-252"]}, "title": "Deadline/expiry should be always checked", "description": "The deadline/expiry check is only performed for buyer user claims after auction ends, but it does not ensure the expiry of _sellerOrder.deadline. This can lead to issues if the seller wants their order to expire after a certain time.", "severity": "Low", "contract": "N/A", "function": "N/A", "lineNumber": "L299"}, {"id": 6, "category": {"1": ["CWE-703"], "2": ["CWE-754"]}, "title": "Missing check for zero address", "description": "Multiple functions in the contract are missing zero address validation, which can cause unrecoverable loss of funds or tokens if transferred to a zero address.", "severity": "High", "contract": "N/A", "function": ["initialize", "setAdminAddress"], "lineNumber": "N/A"}, {"id": 7, "category": {"1": ["CWE-682"]}, "title": "Insecure ERC1155 Token Transfer", "description": "If seller already owns some quantity of ERC1155 tokens and wants to sell, it will mint new tokens instead of transferring existing ones due to lack of logic to check how many tokens need to be lazy minted.", "severity": "Medium", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 8, "category": {"1": ["CWE-707"], "2": ["CWE-20"], "3": ["CWE-1287"]}, "title": "Care needs to be taken with ERC20 tokens.", "description": "The project uses oz erc20 implementation which reverts on failure, but there can be situations where contract's functionality may not work as expected. Libraries like OZ SafeERC20 can be used to wrap erc20 operations and limit the use of specific type of erc20 tokens for which contract is written.", "severity": "High", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 9, "category": {"1": ["CWE-703"]}, "title": "N/A", "description": "N/A", "severity": "N/A", "contract": "N/A", "function": "N/A", "lineNumber": "N/A"}, {"id": 10, "category": {"1": ["CWE-664"], "2": ["CWE-666"], "3": ["CWE-672"]}, "title": "Ensure default royalty is always added.", "description": "In the token contract, ensure that default royalty is always getting added. If tokenCollaboratorsRoyaltyShare for any token id is set and it is expected that marketplace contract's transferCoins() should distribute the shares to these addresses.", "severity": "Low", "contract": "N/A", "function": "transferCoins()", "lineNumber": "L693, L698"}]}