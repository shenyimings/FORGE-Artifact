{
    "path": "./Audit_Reports_2024/QuillAudits/AgriUT Smart Contract Audit Report - QuillAudits.pdf",
    "project_info": {
        "url": "https://github.com/Agreum/AgriUT",
        "commit_hash": "2b175e68240e67cfebe30272cb374555f2a460fb",
        "address": "N/A",
        "is_exists": true
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ]
            },
            "title": "Absence of error messages in require statements",
            "description": "While error messages in require() statements are optional, adding them helps provide description about the error faced by the user.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-391"
                ]
            },
            "title": "Missing Events for Significant Transactions",
            "description": "The missing event makes it difficult to track off-chain liquidity fee changes. An event should be emitted for significant transactions calling the function : transferOwnership and burnFrom.",
            "severity": "Informational",
            "contract": "N/A",
            "function": [
                "transferOwnership",
                "burnFrom"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-354"
                ]
            },
            "title": "Floating Pragma",
            "description": "Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.",
            "severity": "Informational",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1126"
                ]
            },
            "title": "Public function that could be declared external",
            "description": "The following public functions that are never called by the contract should be declared external to save gas.",
            "severity": "Informational",
            "contract": "N/A",
            "function": [
                "burn()",
                "burnFrom()",
                "burnWithApproval()",
                "freezeAccount()",
                "approveOwnerToManage()",
                "transferFromGivenApproval()"
            ],
            "lineNumber": "N/A"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-284"
                ],
                "2": [
                    "CWE-269"
                ],
                "3": [
                    "CWE-266"
                ]
            },
            "title": "Role Owner Authority",
            "description": "The role owner has the authority to transfer user tokens, freeze user accounts, and burn user tokens.",
            "severity": "Medium",
            "contract": "N/A",
            "function": "N/A",
            "lineNumber": "N/A"
        }
    ]
}